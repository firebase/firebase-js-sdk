yarn run v1.22.22
$ /Users/chholland/repos/fb-FRESH/node_modules/.bin/lerna run test:ci --scope '@firebase/firestore*' --stream
@firebase/firestore-types: $ node ../../scripts/run_tests_in_ci.js
@firebase/firestore: $ node ../../scripts/run_tests_in_ci.js -s test:all:ci
@firebase/firestore-types: .
@firebase/firestore-types: test
@firebase/firestore-types: Starting: @firebase/firestore-types
@firebase/firestore: .
@firebase/firestore: test:all:ci
@firebase/firestore: Starting: @firebase/firestore
@firebase/firestore-types: $ tsc
@firebase/firestore: $ run-s --npm-path npm test:browser test:travis test:lite:browser test:browser:prod:nameddb test:lite:browser:nameddb
@firebase/firestore: > @firebase/firestore@4.7.9 test:browser
@firebase/firestore: > karma start
@firebase/firestore: The 'BROWSER' environment variable is undefined. Defaulting to 'ChromeHeadless'.
@firebase/firestore: START:
@firebase/firestore: Webpack bundling...
@firebase/firestore-types: Success: @firebase/firestore-types
@firebase/firestore: assets by path [1m[32m../../../../../../Users/chholland/repos/fb-FRESH/packages/firestore/dist/firestore/src/[39m[22m 842 KiB 259 assets
@firebase/firestore: assets by path [1m[32m../../../../../../Users/chholland/repos/fb-FRESH/packages/firestore/dist/firestore/test/[39m[22m 171 KiB
@firebase/firestore:   assets by path [1m[32m../../../../../../Users/chholland/repos/fb-FRESH/packages/firestore/dist/firestore/test/unit/[39m[22m 109 KiB 102 assets
@firebase/firestore:   assets by path [1m[32m../../../../../../Users/chholland/repos/fb-FRESH/packages/firestore/dist/firestore/test/integration/[39m[22m 37.5 KiB 37 assets
@firebase/firestore:   assets by path [1m[32m../../../../../../Users/chholland/repos/fb-FRESH/packages/firestore/dist/firestore/test/util/*.ts[39m[22m 19.7 KiB 7 assets
@firebase/firestore:   assets by path [1m[32m../../../../../../Users/chholland/repos/fb-FRESH/packages/firestore/dist/firestore/test/lite/*.ts[39m[22m 3.43 KiB
@firebase/firestore:     asset [1m[32m../../../../../../Users/chholland/repos/fb-FRESH/packages/firestore/dist/firestore/test/lite/helpers.d.ts[39m[22m 2.23 KiB [1m[33m[compared for emit][39m[22m
@firebase/firestore:     + 2 assets
@firebase/firestore:   asset [1m[32m../../../../../../Users/chholland/repos/fb-FRESH/packages/firestore/dist/firestore/test/register.d.ts[39m[22m 616 bytes [1m[33m[compared for emit][39m[22m
@firebase/firestore: assets by status 17.9 MiB [1m[32m[emitted][39m[22m
@firebase/firestore:   asset [1m[32mbootstrap.430169083.js[39m[22m 10.1 MiB [1m[32m[emitted][39m[22m (name: bootstrap.430169083) 1 related asset
@firebase/firestore:   asset [1m[32mbootstrap.2569352933.js[39m[22m 7.78 MiB [1m[32m[emitted][39m[22m (name: bootstrap.2569352933) 1 related asset
@firebase/firestore: assets by path [1m[32m../../../../../../Users/chholland/repos/fb-FRESH/packages/firestore/dist/firestore/lite/*.ts[39m[22m 3.38 KiB
@firebase/firestore:   asset [1m[32m../../../../../../Users/chholland/repos/fb-FRESH/packages/firestore/dist/firestore/lite/index.d.ts[39m[22m 2.57 KiB [1m[33m[compared for emit][39m[22m
@firebase/firestore:   asset [1m[32m../../../../../../Users/chholland/repos/fb-FRESH/packages/firestore/dist/firestore/lite/register.d.ts[39m[22m 829 bytes [1m[33m[compared for emit][39m[22m
@firebase/firestore: webpack 5.97.1 compiled [1m[32msuccessfully[39m[22m in 8170 ms
@firebase/firestore: [33m04 03 2025 14:53:28.288:WARN [preprocessor.sourcemap]: [39mmissing external source map for /Users/chholland/repos/fb-FRESH/packages/firestore/test/unit/bootstrap.ts
@firebase/firestore: [33m04 03 2025 14:53:28.296:WARN [preprocessor.sourcemap]: [39mmissing external source map for /Users/chholland/repos/fb-FRESH/packages/firestore/test/integration/bootstrap.ts
@firebase/firestore: [33m04 03 2025 14:53:28.309:WARN [preprocessor.sourcemap]: [39mmissing external source map for /Users/chholland/repos/fb-FRESH/packages/firestore/test/unit/bootstrap.ts
@firebase/firestore: [33m04 03 2025 14:53:28.316:WARN [preprocessor.sourcemap]: [39mmissing external source map for /Users/chholland/repos/fb-FRESH/packages/firestore/test/integration/bootstrap.ts
@firebase/firestore: [32m04 03 2025 14:53:28.323:INFO [karma-server]: [39mKarma v6.4.4 server started at http://localhost:8089/
@firebase/firestore: [32m04 03 2025 14:53:28.324:INFO [launcher]: [39mLaunching browsers ChromeHeadless with concurrency 1
@firebase/firestore: [32m04 03 2025 14:53:28.327:INFO [launcher]: [39mStarting browser ChromeHeadless
@firebase/firestore: [32m04 03 2025 14:53:28.991:INFO [Chrome Headless 133.0.0.0 (Mac OS 10.15.7)]: [39mConnected on socket 0sjVsPafVYHv_DwFAAAB with id 77278042
@firebase/firestore: Chrome Headless 133.0.0.0 (Mac OS 10.15.7) LOG: 'Default Settings: {"host":"firestore.googleapis.com","ssl":true}'
@firebase/firestore: Chrome Headless 133.0.0.0 (Mac OS 10.15.7) LOG: 'Default Settings: {"host":"firestore.googleapis.com","ssl":true}'
@firebase/firestore: Chrome Headless 133.0.0.0 (Mac OS 10.15.7) LOG: 'Default DatabaseId: "(default)"'
@firebase/firestore: Chrome Headless 133.0.0.0 (Mac OS 10.15.7) LOG: 'Default DatabaseId: "(default)"'
@firebase/firestore:   âœ” token is not invalidated once the stream is healthy
@firebase/firestore:   aggregateFieldEqual
@firebase/firestore:     âœ” equates two equal aggregate fields
@firebase/firestore:     âœ” differentiates two different aggregate fields
@firebase/firestore:   Bytes
@firebase/firestore:     âœ” constructs values from Base64
@firebase/firestore:     âœ” constructs values from Uint8Array
@firebase/firestore:     âœ” works with instanceof checks
@firebase/firestore:     âœ” support equality checking with isEqual()
@firebase/firestore:   CollectionReference
@firebase/firestore:     âœ” support equality checking with isEqual()
@firebase/firestore:     âœ” JSON.stringify() does not throw
@firebase/firestore:   DocumentReference
@firebase/firestore:     âœ” support equality checking with isEqual()
@firebase/firestore:     âœ” JSON.stringify() does not throw
@firebase/firestore:   DocumentSnapshot
@firebase/firestore:     âœ” support equality checking with isEqual()
@firebase/firestore:     âœ” JSON.stringify() does not throw
@firebase/firestore:   Query
@firebase/firestore:     âœ” support equality checking with isEqual()
@firebase/firestore:     âœ” JSON.stringify() does not throw
@firebase/firestore:   QuerySnapshot
@firebase/firestore:     âœ” support equality checking with isEqual()
@firebase/firestore:     âœ” JSON.stringify() does not throw
@firebase/firestore:   SnapshotMetadata
@firebase/firestore:     âœ” from DocumentSnapshot support equality checking with isEqual()
@firebase/firestore:     âœ” from QuerySnapshot support equality checking with isEqual()
@firebase/firestore:   Settings
@firebase/firestore:     âœ” cannot use mutually exclusive settings together
@firebase/firestore:     âœ” long polling should be in auto-detect mode by default
@firebase/firestore:     âœ” long polling should be in force mode if force=true
@firebase/firestore:     âœ” long polling should be in auto-detect mode if autoDetect=true
@firebase/firestore:     âœ” long polling should be in auto-detect mode if force=false
@firebase/firestore:     âœ” long polling should be disabled if autoDetect=false
@firebase/firestore:     âœ” long polling should be in auto-detect mode if autoDetect=true and force=false
@firebase/firestore:     âœ” long polling should be in force mode if autoDetect=false and force=true
@firebase/firestore:     âœ” long polling should be disabled if autoDetect=false and force=false
@firebase/firestore:     âœ” timeoutSeconds is undefined by default
@firebase/firestore:     âœ” timeoutSeconds minimum value is allowed
@firebase/firestore:     âœ” timeoutSeconds maximum value is allowed
@firebase/firestore:     âœ” timeoutSeconds typical value is allowed
@firebase/firestore:     âœ” timeoutSeconds floating point value is allowed
@firebase/firestore:     âœ” timeoutSeconds value one less than minimum throws
@firebase/firestore:     âœ” timeoutSeconds value one more than maximum throws
@firebase/firestore:     âœ” timeoutSeconds value of 0 throws
@firebase/firestore:     âœ” timeoutSeconds value of -0 throws
@firebase/firestore:     âœ” timeoutSeconds value of -1 throws
@firebase/firestore:     âœ” timeoutSeconds value of -infinity throws
@firebase/firestore:     âœ” timeoutSeconds value of +infinity throws
@firebase/firestore:     âœ” timeoutSeconds value of NaN throws
@firebase/firestore:     âœ” long polling autoDetect=[something truthy] should be coerced to true
@firebase/firestore:     âœ” long polling autoDetect=[something falsy] should be coerced to false
@firebase/firestore:     âœ” long polling autoDetect=null should be coerced to false
@firebase/firestore:     âœ” long polling force=[something truthy] should be coerced to true
@firebase/firestore:     âœ” long polling force=[something falsy] should be coerced to false
@firebase/firestore:     âœ” long polling force=null should be coerced to false
@firebase/firestore:     âœ” gets settings from useEmulator
@firebase/firestore:     âœ” gets privateSettings from useEmulator
@firebase/firestore: WARN: '[2025-03-04T22:53:30.078Z]  @firebase/firestore:', 'Firestore (11.3.0): Host has been set in both settings() and connectFirestoreEmulator(), emulator host will be used.'
@firebase/firestore: WARN: '[2025-03-04T22:53:30.078Z]  @firebase/firestore:', 'Firestore (11.3.0): Host has been set in both settings() and connectFirestoreEmulator(), emulator host will be used.'
@firebase/firestore:     âœ” prefers host from useEmulator to host from settings
@firebase/firestore:     âœ” sets credentials based on mockUserToken object
@firebase/firestore:     âœ” sets credentials based on mockUserToken string
@firebase/firestore:   DocumentChange:
@firebase/firestore:     âœ” positions are correct for additions
@firebase/firestore:     âœ” positions are correct for deletions
@firebase/firestore:     âœ” positions are correct for modifications
@firebase/firestore:     âœ” positions are correct for sort order changes
@firebase/firestore:     âœ” positions are correct for randomly chosen examples
@firebase/firestore:   FieldPath
@firebase/firestore:     âœ” support equality checking with isEqual()
@firebase/firestore:   FieldValue
@firebase/firestore:     âœ” support equality checking with isEqual()
@firebase/firestore:     âœ” support instanceof checks
@firebase/firestore:     âœ” JSON.stringify() does not throw
@firebase/firestore:   GeoPoint
@firebase/firestore:     âœ” constructs values
@firebase/firestore:     âœ” GeoPoints throw on invalid values
@firebase/firestore:     âœ” compares correctly
@firebase/firestore:     âœ” support equality checking with isEqual()
@firebase/firestore:     âœ” serializes to JSON
@firebase/firestore:   long_polling_options
@firebase/firestore:     âœ” longPollingOptionsEqual() should return true for empty objects
@firebase/firestore:     âœ” longPollingOptionsEqual() should return true if both objects have the same timeoutSeconds
@firebase/firestore:     âœ” longPollingOptionsEqual() should return false if the objects have different timeoutSeconds
@firebase/firestore:     âœ” longPollingOptionsEqual() should ignore properties not defined in ExperimentalLongPollingOptions
@firebase/firestore:     âœ” cloneLongPollingOptions() with an empty object should return an empty object
@firebase/firestore:     âœ” cloneLongPollingOptions() should copy timeoutSeconds
@firebase/firestore:     âœ” cloneLongPollingOptions() should not copy properties not defined in ExperimentalLongPollingOptions
@firebase/firestore:   Timestamp
@firebase/firestore:     âœ” constructor should validate the "seconds" argument and store it
@firebase/firestore:     âœ” constructor should validate the "nanoseconds" argument and store it
@firebase/firestore:     âœ” fromDate
@firebase/firestore:     âœ” valueOf
@firebase/firestore:     âœ” arithmetic comparison of a Timestamp object to itself
@firebase/firestore:     âœ” arithmetic comparison of equivalent, but distinct, Timestamp objects
@firebase/firestore:     âœ” arithmetic comparison of Timestamp objects whose nanoseconds differ
@firebase/firestore:     âœ” arithmetic comparison of Timestamp objects whose seconds differ
@firebase/firestore:     âœ” arithmetic comparison of the smallest and largest Timestamp objects
@firebase/firestore:     âœ” handles decimal inputs in fromMillis()
@firebase/firestore:     âœ” serializes to JSON
@firebase/firestore:   EventManager
@firebase/firestore:     âœ” handles many listenables per query
@firebase/firestore:     âœ” handles unlisten on unknown listenable gracefully
@firebase/firestore:     âœ” notifies listenables in the right order
@firebase/firestore:     âœ” will forward onOnlineStateChange calls
@firebase/firestore:   QueryListener
@firebase/firestore:     âœ” raises collection events
@firebase/firestore:     âœ” raises error event
@firebase/firestore:     âœ” raises event for empty collection after sync
@firebase/firestore:     âœ” raises 'hasPendingWrites' for pending mutation in initial snapshot
@firebase/firestore:     âœ” doesn't raise 'hasPendingWrites' for committed mutation in initial snapshot
@firebase/firestore:     âœ” does not raise events for metadata changes unless specified
@firebase/firestore:     âœ” raises metadata events only when specified
@firebase/firestore:     âœ” Metadata-only document changes are filtered out when includeMetadataChanges is false
@firebase/firestore:     âœ” Suppresses write acknowledgment if Watch hasn't caught up
@firebase/firestore:     âœ” Will wait for sync if online
@firebase/firestore:     âœ” Will raise initial event when going offline
@firebase/firestore:     âœ” Will raise initial event when going offline and there are no docs
@firebase/firestore:     âœ” Will raise initial event when offline and there are no docs
@firebase/firestore:   FieldFilter
@firebase/firestore:     âœ” exposes field filter members
@firebase/firestore:   CompositeFilter
@firebase/firestore:     âœ” exposes composite filter members for AND filter
@firebase/firestore:     âœ” exposes composite filter members for OR filter
@firebase/firestore:     âœ” has working composite filter nested checks
@firebase/firestore:     âœ” computes canonical id of flat conjunctions
@firebase/firestore:   ListenSequence
@firebase/firestore:     âœ” writes the new sequence number to the syncer
@firebase/firestore:     âœ” bumps the next value based on notifications from the syncer
@firebase/firestore:   Bound
@firebase/firestore:     âœ” implements isEqual
@firebase/firestore:     âœ” can get collection group
@firebase/firestore:     âœ” matches based on document key
@firebase/firestore:     âœ” matches correctly for shallow ancestor query
@firebase/firestore:     âœ” matches primitive values for filters
@firebase/firestore:     âœ” matches array-contains filters
@firebase/firestore:     âœ” matches array-contains filters with object values
@firebase/firestore:     âœ” matches IN filters
@firebase/firestore:     âœ” matches IN filters with object values
@firebase/firestore:     âœ” matches not-in filters
@firebase/firestore:     âœ” matches not-in filters with object values
@firebase/firestore:     âœ” matches array-contains-any filters
@firebase/firestore:     âœ” matches array-contains-any filters with object values
@firebase/firestore:     âœ” matches NaN for filters
@firebase/firestore:     âœ” matches null for filters
@firebase/firestore:     âœ” matches complex objects for filters
@firebase/firestore:     âœ” doesn't crash querying unset fields
@firebase/firestore:     âœ” doesn't remove complex objects with orderBy
@firebase/firestore:     âœ” filters based on array value
@firebase/firestore:     âœ” filters based on object value
@firebase/firestore:     âœ” sorts documents in the correct order
@firebase/firestore:     âœ” sorts documents using multiple fields
@firebase/firestore:     âœ” sorts documents with descending too
@firebase/firestore:     âœ” generates canonical ids
@firebase/firestore:     âœ” canonical ids are stable
@firebase/firestore:     âœ” generates the correct implicit order by's
@firebase/firestore:     âœ” generates the correct implicit order by's for multiple inequality
@firebase/firestore:     âœ” matchesAllDocuments() considers filters, orders and bounds
@firebase/firestore:     âœ” matches composite queries
@firebase/firestore:     âœ” matches composite queries with multiple inequality
@firebase/firestore:     âœ” generates appropriate order-bys for aggregate and non-aggregate targets
@firebase/firestore:     âœ” generated order-bys are not affected by previously memoized targets
@firebase/firestore:   View
@firebase/firestore:     âœ” adds documents based on query
@firebase/firestore:     âœ” removes documents
@firebase/firestore:     âœ” returns null if there are no changes
@firebase/firestore:     âœ” does not return null for the first changes
@firebase/firestore:     âœ” filters documents based on query with filter
@firebase/firestore:     âœ” updates documents based on query with filter
@firebase/firestore:     âœ” removes documents for query with limit
@firebase/firestore:     âœ” doesn't report changes for documents beyond limit of query
@firebase/firestore:     âœ” keeps track of limbo documents
@firebase/firestore:     âœ” is marked from cache with limbo documents
@firebase/firestore:     âœ” resumes queries without creating limbo documents
@firebase/firestore:     âœ” returns needsRefill on delete limit query
@firebase/firestore:     âœ” returns needsRefill on reorder in limit query
@firebase/firestore:     âœ” doesn't need refill on reorder within limit
@firebase/firestore:     âœ” doesn't need refill on reorder after limit query
@firebase/firestore:     âœ” doesn't need refill for additions after the limit
@firebase/firestore:     âœ” doesn't need refill for deletions when not near the limit
@firebase/firestore:     âœ” handles applying irrelevant docs
@firebase/firestore:     âœ” computes mutatedDocKeys
@firebase/firestore:     âœ” computes removes keys from mutatedDocKeys when new doc does not have local changes
@firebase/firestore:     âœ” remembers local mutations from previous snapshot
@firebase/firestore:     âœ” remembers local mutations from previous call to computeDocChanges
@firebase/firestore:   Md5
@firebase/firestore:     âœ” constructor should create distinct instances
@firebase/firestore:     âœ” update() should accept a string
@firebase/firestore:     âœ” update() should accept a string of non-standard characters
@firebase/firestore:     âœ” update() should accept a string of UTF-8 encoded non-standard characters 
@firebase/firestore:     âœ” update() should accept an array of number
@firebase/firestore:     âœ” update() should accept a Uint8Array
@firebase/firestore:     âœ” update() should honor opt_length on a string
@firebase/firestore:     âœ” update() should honor opt_length on an array of number
@firebase/firestore:     âœ” update() should honor opt_length on a Uint8Array
@firebase/firestore:     âœ” reset() should reset
@firebase/firestore:   Integer
@firebase/firestore:     âœ” constructor should create distinct instances
@firebase/firestore:     âœ” constructor should construct 1 and -1, 2 and -2
@firebase/firestore:     âœ” constructor should construct big positive values
@firebase/firestore:     âœ” constructor should construct big negative values
@firebase/firestore:     âœ” add() should produce the sum of the two numbers
@firebase/firestore:     âœ” multiply() should produce the product of the two numbers
@firebase/firestore:     âœ” modulo() should produce the division remainder of the two numbers
@firebase/firestore:     âœ” compare() should correctly compare two numbers for order
@firebase/firestore:     âœ” toNumber() should return the correct number
@firebase/firestore:     âœ” toString() should return the correct number
@firebase/firestore:     âœ” fromNumber() create a new Integer with the given value
@firebase/firestore:     âœ” fromString() create a new Integer with the given value
@firebase/firestore:     âœ” getBits() create a new Integer with the given value
@firebase/firestore:   Ordered Code Writer
@firebase/firestore:     âœ” computes number of leading zeros
@firebase/firestore:     âœ” converts numbers to bits
@firebase/firestore:     âœ” orders numbers correctly
@firebase/firestore:     âœ” converts strings to bits
@firebase/firestore:     âœ” orders strings correctly
@firebase/firestore:     âœ” converts bytes to bits
@firebase/firestore:     âœ” orders bytes correctly
@firebase/firestore:     âœ” encodes infinity
@firebase/firestore:     âœ” seeds bytes
@firebase/firestore:   Firestore Index Value Writer
@firebase/firestore:     can gracefully handle different format of timestamp
@firebase/firestore:       âœ” can handle different format of timestamp
@firebase/firestore:       âœ” can handle timestamps with 0 nanoseconds
@firebase/firestore:       âœ” can compare timestamps with  different formats
@firebase/firestore:       âœ” sorts vector as a different type from array and map, with unique rules
@firebase/firestore:   UpdateData - v9
@firebase/firestore:     âœ” Supports properties with primitive types
@firebase/firestore:     âœ” Supports properties with custom types
@firebase/firestore:     given properties with dots
@firebase/firestore:       âœ” preserves the value type
@firebase/firestore:       âœ” does not allow matching a sub-string|path
@firebase/firestore:     given nested objects without index properties
@firebase/firestore:       âœ” supports object replacement at each layer (with partial)
@firebase/firestore:       âœ” errors for unexpected value types at each layer
@firebase/firestore:       âœ” does not allow properties that were not on the original type
@firebase/firestore:       âœ” preserves value types for dot notation
@firebase/firestore:     given nested objects with index properties
@firebase/firestore:       âœ” supports object replacement at each layer (with partial)
@firebase/firestore:       âœ” errors for unexpected value types at each layer
@firebase/firestore:       âœ” does not allow properties that were not on the original type
@firebase/firestore:       âœ” preserves value types for dot notation
@firebase/firestore:     UpdateData - v10
@firebase/firestore:       given nested objects with index properties
@firebase/firestore:         âœ” supports object replacement at each layer (with partial)
@firebase/firestore:         âœ” allows dot notation for nested index types
@firebase/firestore:         âœ” allows dot notation for nested index types that are 2 layers deep
@firebase/firestore:   FirestoreTypeConverter
@firebase/firestore:     âœ” converter has the minimal typing information
@firebase/firestore:     âœ” converter has the minimal typing information plus return types
@firebase/firestore:     âœ” has the additional 'merge' version of toFirestore()
@firebase/firestore:     âœ” converter is explicitly typed as FirestoreDataConverter<T>
@firebase/firestore:     âœ” converter is explicitly typed as FirestoreDataConverter<T, U>
@firebase/firestore:     âœ” setDoc() fails to compile if AppModelType argument is missing properties
@firebase/firestore:     âœ” setDoc() fails to compile if AppModelType argument contains undeclared properties
@firebase/firestore:     âœ” setDoc() fails to compile if AppModelType argument contains a property with an incorrect type
@firebase/firestore:     âœ” updateDoc() successfully compiles even if DbModelType argument is missing properties
@firebase/firestore:     âœ” updateDoc() fails to compile if DbModelType argument contains undeclared properties
@firebase/firestore:     âœ” updateDoc() fails to compile if DbModelType argument contains a property with an incorrect type
@firebase/firestore:     âœ” getDoc() returns AppModelType
@firebase/firestore:   MemoryBundleCache
@firebase/firestore:     âœ” returns undefined when bundle id is not found
@firebase/firestore:     âœ” returns saved bundle
@firebase/firestore:     âœ” returns undefined when query name is not found
@firebase/firestore:     âœ” returns saved collection queries
@firebase/firestore:     âœ” returns saved collection group queries
@firebase/firestore:     âœ” returns expected limit queries
@firebase/firestore:     âœ” returns expected limit to last queries
@firebase/firestore:   IndexedDbBundleCache
@firebase/firestore:     âœ” returns undefined when bundle id is not found
@firebase/firestore:     âœ” returns saved bundle
@firebase/firestore:     âœ” returns undefined when query name is not found
@firebase/firestore:     âœ” returns saved collection queries
@firebase/firestore:     âœ” returns saved collection group queries
@firebase/firestore:     âœ” returns expected limit queries
@firebase/firestore:     âœ” returns expected limit to last queries
@firebase/firestore:   MemoryDocumentOverlayCache
@firebase/firestore:     âœ” returns null when overlay is not found
@firebase/firestore:     âœ” can read saved overlay
@firebase/firestore:     âœ” can read saved overlays
@firebase/firestore:     âœ” can overwrite overlays
@firebase/firestore:     âœ” can delete overlays repeatedly
@firebase/firestore:     âœ” can delete overlays
@firebase/firestore:     âœ” can get all overlays for collection
@firebase/firestore:     âœ” can get all overlays since batch ID
@firebase/firestore:     âœ” can get all overlays for collection group
@firebase/firestore:     âœ” getting overlays from collection group enforces batch ID
@firebase/firestore:     âœ” getting overlays from collection group enforces count limit
@firebase/firestore:     âœ” getting overlays from collection group does not return partial batches
@firebase/firestore:     âœ” updating an overlay removes the old entry for that overlay
@firebase/firestore:     âœ” skips non-existing overlay in batch lookup
@firebase/firestore:     âœ” supports empty batch in batch lookup
@firebase/firestore:     âœ” can read saved overlays in batches
@firebase/firestore:   IndexedDbDocumentOverlayCache
@firebase/firestore:     âœ” returns null when overlay is not found
@firebase/firestore:     âœ” can read saved overlay
@firebase/firestore:     âœ” can read saved overlays
@firebase/firestore:     âœ” can overwrite overlays
@firebase/firestore:     âœ” can delete overlays repeatedly
@firebase/firestore:     âœ” can delete overlays
@firebase/firestore:     âœ” can get all overlays for collection
@firebase/firestore:     âœ” can get all overlays since batch ID
@firebase/firestore:     âœ” can get all overlays for collection group
@firebase/firestore:     âœ” getting overlays from collection group enforces batch ID
@firebase/firestore:     âœ” getting overlays from collection group enforces count limit
@firebase/firestore:     âœ” getting overlays from collection group does not return partial batches
@firebase/firestore:     âœ” updating an overlay removes the old entry for that overlay
@firebase/firestore:     âœ” skips non-existing overlay in batch lookup
@firebase/firestore:     âœ” supports empty batch in batch lookup
@firebase/firestore:     âœ” can read saved overlays in batches
@firebase/firestore:   EncodedResourcePath
@firebase/firestore:     âœ” encodes resource paths
@firebase/firestore:     âœ” orders resource paths
@firebase/firestore:   MemoryGlobals
@firebase/firestore:     âœ” returns session token that was previously saved
@firebase/firestore:     âœ” returns empty session token that was previously saved
@firebase/firestore:   IndexedDbGlobals
@firebase/firestore:     âœ” returns session token that was previously saved
@firebase/firestore:     âœ” returns empty session token that was previously saved
@firebase/firestore:   IndexedDb IndexBackfiller
@firebase/firestore:     âœ” Writes latest read time to FieldIndex on completion
@firebase/firestore:     âœ” Fetches documents after earliest read time
@firebase/firestore:     âœ” Writes Index Entries
@firebase/firestore:     âœ” Writes oldest document first
@firebase/firestore:     âœ” Uses DocumentKey Offset for large Snapshots
@firebase/firestore:     âœ” Updates collection groups
@firebase/firestore:     âœ” Prioritizes new collection groups
@firebase/firestore:     âœ” Writes until cap
@firebase/firestore:     âœ” Uses latest read time for empty collections
@firebase/firestore:     âœ” Handles local mutations after remote docs
@firebase/firestore:     âœ” Mutations up to document limit and updates batchId on index
@firebase/firestore:     âœ” Mutation finishes mutation batch even if it exceeds limit
@firebase/firestore:     âœ” Mutations from high water mark
@firebase/firestore:     âœ” Updates existing doc to new value
@firebase/firestore:     âœ” Updates docs that no longer match
@firebase/firestore:     âœ” Does not process same document twice
@firebase/firestore:     âœ” Applies set to remote doc
@firebase/firestore:     âœ” Applies patch to remote doc
@firebase/firestore:     âœ” Applies delete to remote doc
@firebase/firestore:     âœ” Reindexes documents when new index is added
@firebase/firestore:   index_manager.ts top-level functions
@firebase/firestore:     displayNameForIndexType()
@firebase/firestore:       âœ” IndexType.NONE
@firebase/firestore:       âœ” IndexType.FULL
@firebase/firestore:       âœ” IndexType.PARTIAL
@firebase/firestore:       âœ” invalid IndexType
@firebase/firestore:   MemoryIndexManager
@firebase/firestore:     âœ” can add and read collection=>parent index entries
@firebase/firestore:   IndexedDbIndexManager
@firebase/firestore:     âœ” can add and read collection=>parent index entries
@firebase/firestore:     âœ” can add indexes
@firebase/firestore:     âœ” uses auto-incrementing index id
@firebase/firestore:     âœ” can get indexes
@firebase/firestore:     âœ” can update collection group
@firebase/firestore:     âœ” can get next collection group to update
@firebase/firestore:     âœ” deleting field index removes entry from collection group
@firebase/firestore:     âœ” deleting field index removes entry from getNextCollectionGroupToUpdate()
@firebase/firestore:     âœ” persist index offset
@firebase/firestore:     âœ” changes user
@firebase/firestore:     âœ” adds documents
@firebase/firestore:     âœ” applies orderBy
@firebase/firestore:     âœ” applies orderBy with not equals filter
@firebase/firestore:     âœ” applies equality filter
@firebase/firestore:     âœ” applies nested field equality filter
@firebase/firestore:     âœ” applies not equals filter
@firebase/firestore:     âœ” applies equals with not equals filter
@firebase/firestore:     âœ” applies array contains with not equals filter
@firebase/firestore:     âœ” applies array contains with not equals filter on same field
@firebase/firestore:     âœ” applies equals with not equals filter on same field
@firebase/firestore:     âœ” applies less than or equals filter
@firebase/firestore:     âœ” applies greater than or equals filter
@firebase/firestore:     âœ” applies greater than filter
@firebase/firestore:     âœ” applies range filter
@firebase/firestore:     âœ” applies startAt filter
@firebase/firestore:     âœ” applies startAt filter with notIn
@firebase/firestore:     âœ” applies startAfter filter
@firebase/firestore:     âœ” applies endAt filter
@firebase/firestore:     âœ” applies endBefore filter
@firebase/firestore:     âœ” applies range with bound filter
@firebase/firestore:     âœ” applies in filter
@firebase/firestore:     âœ” applies not in filter
@firebase/firestore:     âœ” applies not in filter with greater than filter
@firebase/firestore:     âœ” applies not in filter with out of bounds greater than filter
@firebase/firestore:     âœ” applies array contains filter
@firebase/firestore:     âœ” applies array contains any filter
@firebase/firestore:     âœ” validates that array contains filter only matches array
@firebase/firestore:     âœ” returns empty result when no index exists
@firebase/firestore:     âœ” handles when no matching filter exists
@firebase/firestore:     âœ” returns empty results when no matching documents exists
@firebase/firestore:     âœ” filters by field type
@firebase/firestore:     âœ” supports collection group indexes
@firebase/firestore:     âœ” applies limit filter
@firebase/firestore:     âœ” uses ordering for limit filter
@firebase/firestore:     âœ” updates index entries
@firebase/firestore:     âœ” removes index entries
@firebase/firestore:     âœ” supports order by key
@firebase/firestore:     âœ” supports order by filter
@firebase/firestore:     âœ” supports ascending order with greater than filter
@firebase/firestore:     âœ” supports descending order with less than filter
@firebase/firestore:     âœ” supports ascending order with greater than filter 
@firebase/firestore:     âœ” supports descending order with greater than filter
@firebase/firestore:     âœ” cannot expand result set from a cursor
@firebase/firestore:     âœ” can have filters on the same field
@firebase/firestore:     âœ” can index timestamp fields of different format
@firebase/firestore:     âœ” can index VectorValue fields
@firebase/firestore:     âœ” support advances queries
@firebase/firestore:     âœ” serves partial and full index
@firebase/firestore:     âœ” createTargetIndexes() creates full indexes for each sub-target
@firebase/firestore:     âœ” createTargetIndexes() upgrades a partial index to a full index
@firebase/firestore:     âœ” createTargetIndexes() does nothing if a full index already exists
@firebase/firestore:     âœ” deleteAllFieldIndexes() deletes all indexes
@firebase/firestore:   IndexedDbSchema: createOrUpgradeDb
@firebase/firestore:     âœ” can install schema version 1
@firebase/firestore:     âœ” drops the query cache from 2 to 3
@firebase/firestore:     âœ” can upgrade from schema version 3 to 4
@firebase/firestore:     âœ” can upgrade from schema version 4 to 5
@firebase/firestore:     âœ” can upgrade from version 5 to 6
@firebase/firestore:     âœ” can upgrade from version 6 to 7
@firebase/firestore:     âœ” can upgrade from version 7 to 8
@firebase/firestore:     âœ” rewrites canonical IDs during upgrade from version 9 to 10
@firebase/firestore:     âœ” can use read-time index after schema migration
@firebase/firestore:     âœ” can get recent document changes in a collection
@firebase/firestore:     âœ” can upgrade from version 11 to 12
@firebase/firestore:     âœ” can upgrade from version 12 to 13
@firebase/firestore:     âœ” can upgrade from schema version 13 to 14 (overlay migration)
@firebase/firestore:     âœ” can upgrade from version 13 to 14
@firebase/firestore:     âœ” can upgrade from version 14 to 15
@firebase/firestore:     âœ” can upgrade from version 15 to 16
@firebase/firestore:     âœ” can upgrade from version 16 to 17
@firebase/firestore:     âœ” downgrading throws a custom error
@firebase/firestore:   IndexedDb: canActAsPrimary
@firebase/firestore:     âœ” is eligible when client is offline and hidden and other client is offline and hidden
@firebase/firestore:     âœ” is eligible when client is offline and visible and other client is offline and hidden
@firebase/firestore:     âœ” is eligible when client is online and hidden and other client is offline and hidden
@firebase/firestore:     âœ” is eligible when client is online and visible and other client is offline and hidden
@firebase/firestore:     âœ” is not eligible when client is offline and hidden and other client is offline and visible
@firebase/firestore:     âœ” is eligible when client is offline and visible and other client is offline and visible
@firebase/firestore:     âœ” is eligible when client is online and hidden and other client is offline and visible
@firebase/firestore:     âœ” is eligible when client is online and visible and other client is offline and visible
@firebase/firestore:     âœ” is not eligible when client is offline and hidden and other client is online and hidden
@firebase/firestore:     âœ” is not eligible when client is offline and visible and other client is online and hidden
@firebase/firestore:     âœ” is eligible when client is online and hidden and other client is online and hidden
@firebase/firestore:     âœ” is eligible when client is online and visible and other client is online and hidden
@firebase/firestore:     âœ” is not eligible when client is offline and hidden and other client is online and visible
@firebase/firestore:     âœ” is not eligible when client is offline and visible and other client is online and visible
@firebase/firestore:     âœ” is not eligible when client is online and hidden and other client is online and visible
@firebase/firestore:     âœ” is eligible when client is online and visible and other client is online and visible
@firebase/firestore:     âœ” is eligible when only client
@firebase/firestore:     âœ” regains lease if available
@firebase/firestore:     âœ” obtains lease if forceOwningTab is set
@firebase/firestore:   IndexedDb: allowTabSynchronization
@firebase/firestore:     âœ” blocks start() on IndexedDbTransactionError when synchronization is disabled 
@firebase/firestore:     âœ” allows start() with IndexedDbTransactionError when synchronization is enabled 
@firebase/firestore:     âœ” blocks start() when getHighestListenSequenceNumber() fails
@firebase/firestore:     âœ” ignores intermittent IndexedDbTransactionError during lease refresh
@firebase/firestore:     âœ” rejects access when synchronization is disabled
@firebase/firestore:     âœ” grants access when synchronization is enabled
@firebase/firestore:   IndexedDb
@firebase/firestore:     âœ” can re-open after close
@firebase/firestore:   Local Serializer
@firebase/firestore:     âœ” SetMutation + TransformMutation (legacy) are squashed
@firebase/firestore:     âœ” PatchMutation + TransformMutation (legacy) are squashed
@firebase/firestore: ERROR: '[2025-03-04T22:53:31.120Z]  @firebase/firestore:', 'Firestore (11.3.0): FIRESTORE (11.3.0) INTERNAL ASSERTION FAILED: TransformMutation should be preceded by a patch or set mutation'
@firebase/firestore: ERROR: '[2025-03-04T22:53:31.120Z]  @firebase/firestore:', 'Firestore (11.3.0): FIRESTORE (11.3.0) INTERNAL ASSERTION FAILED: TransformMutation should be preceded by a patch or set mutation'
@firebase/firestore:     âœ” TransformMutation (legacy) + TransformMutation (legacy) throw assertion
@firebase/firestore: ERROR: '[2025-03-04T22:53:31.120Z]  @firebase/firestore:', 'Firestore (11.3.0): FIRESTORE (11.3.0) INTERNAL ASSERTION FAILED: TransformMutation should be preceded by a patch or set mutation'
@firebase/firestore: ERROR: '[2025-03-04T22:53:31.120Z]  @firebase/firestore:', 'Firestore (11.3.0): FIRESTORE (11.3.0) INTERNAL ASSERTION FAILED: TransformMutation should be preceded by a patch or set mutation'
@firebase/firestore:     âœ” DeleteMutation + TransformMutation (legacy) on its own throws assertion
@firebase/firestore:     âœ” multiple mutations are squashed
@firebase/firestore:     âœ” serializes overlay
@firebase/firestore:     âœ” serializes FieldIndex
@firebase/firestore:     âœ” serializes IndexState
@firebase/firestore:   LocalStore w/ Memory Persistence
@firebase/firestore:     âœ” localStoreSetIndexAutoCreationEnabled()
@firebase/firestore:     âœ” handles SetMutation
@firebase/firestore:     âœ” handles SetMutation -> Document
@firebase/firestore:     âœ” handles SetMutation -> Ack (Held) -> SetMutation -> Reject -> RemoteEvent (Release Ack)
@firebase/firestore:     âœ” handles NoDocument -> SetMutation -> Ack
@firebase/firestore:     âœ” handles SetMutation -> NoDocument
@firebase/firestore:     âœ” handles Document -> SetMutation -> Ack ->  Document
@firebase/firestore:     âœ” handles PatchMutation without prior document
@firebase/firestore:     âœ” handles PatchMutation -> Document -> Ack
@firebase/firestore:     âœ” handles PatchMutation -> Ack -> Document
@firebase/firestore:     âœ” handles DeleteMutation -> Ack
@firebase/firestore:     âœ” handles Document -> DeleteMutation -> Ack
@firebase/firestore:     âœ” handles DeleteMutation -> Document -> Ack
@firebase/firestore:     âœ” handles Document -> NoDocument -> Document
@firebase/firestore:     âœ” handles SetMutation -> PatchMutation -> Document -> Ack -> Ack
@firebase/firestore:     âœ” handles SetMutation + PatchMutation
@firebase/firestore:     âœ” handles SetMutation -> Ack -> PatchMutation -> Reject
@firebase/firestore:     âœ” handles SetMutation(A) + SetMutation(B) + PatchMutation(A)
@firebase/firestore:     âœ” handles DeleteMutation -> PatchMutation -> Ack -> Ack
@firebase/firestore:     âœ” collects garbage after ChangeBatch with no target ids
@firebase/firestore:     âœ” collects garbage after ChangeBatch
@firebase/firestore:     âœ” collects garbage after acknowledged mutation
@firebase/firestore:     âœ” collects garbage after rejected mutation
@firebase/firestore:     âœ” pins documents in the local view
@firebase/firestore:     âœ” throws away documents with unknown target-ids immediately
@firebase/firestore:     âœ” can execute document queries
@firebase/firestore:     âœ” can execute collection queries
@firebase/firestore:     âœ” can execute mixed collection queries
@firebase/firestore:     âœ” reads all documents for initial collection queries
@firebase/firestore:     âœ– persists resume tokens (skipped)
@firebase/firestore:     âœ– does not replace resume token with empty resume token (skipped)
@firebase/firestore:     âœ” handles SetMutation -> Transform -> Transform
@firebase/firestore:     âœ– handles SetMutation -> Ack -> Transform -> Ack -> Transform (skipped)
@firebase/firestore:     âœ” handles SetMutation -> Transform-> RemoteEvent -> Transform
@firebase/firestore:     âœ” holds back transforms
@firebase/firestore:     âœ” handles MergeMutation with Transform -> RemoteEvent
@firebase/firestore:     âœ” handles PatchMutation with Transform -> RemoteEvent
@firebase/firestore:     âœ” handles saving bundled documents
@firebase/firestore:     âœ” handles saving bundled documents with newer existing version
@firebase/firestore:     âœ” handles saving bundled documents with older existing version
@firebase/firestore:     âœ” handles saving bundled documents with same existing version should not overwrite
@firebase/firestore:     âœ” handles MergeMutation with Transform -> BundledDocuments
@firebase/firestore:     âœ” handles PatchMutation with Transform -> BundledDocuments
@firebase/firestore:     âœ” handles saving and checking bundle metadata
@firebase/firestore:     âœ” add then update while offline
@firebase/firestore:     âœ” handles saving and loading named queries
@firebase/firestore:     âœ” loading named queries allocates targets and updates target document mapping
@firebase/firestore:     âœ” handles saving and loading limit to last queries
@firebase/firestore:     âœ” computes highest unacknowledged batch id correctly
@firebase/firestore:     âœ” only persists updates for documents when version changes
@firebase/firestore:     âœ” can handle batch Ack when pending batches have other docs
@firebase/firestore:     âœ” can handle multiple field patches on remote docs
@firebase/firestore:     âœ” can handle multiple field patches in one batch on remote docs
@firebase/firestore:     âœ” can handle multiple field patches on local docs
@firebase/firestore:     âœ” update on remote doc leads to update overlay
@firebase/firestore:     âœ” handles document creation time
@firebase/firestore:     âœ” saves updateTime as createTime when receives ack for creating a new doc
@firebase/firestore:     âœ” handles createTime for Set -> Ack -> RemoteEvent
@firebase/firestore:     âœ” handles createTime for Set -> RemoteEvent -> Ack
@firebase/firestore:     âœ” saves updateTime as createTime when recreating a deleted doc
@firebase/firestore:     âœ” document createTime is preserved through Set -> Ack -> Patch -> Ack
@firebase/firestore:     âœ” document createTime is preserved through Doc Added -> Patch -> Ack
@firebase/firestore:     âœ” deeply nested server timestamps do not cause stack overflow
@firebase/firestore:     âœ” uses target mapping to execute queries
@firebase/firestore:     âœ” last limbo free snapshot is advanced during view processing
@firebase/firestore:     âœ– ignores target mapping after existence filter mismatch (skipped)
@firebase/firestore:     âœ– queries include locally modified documents (skipped)
@firebase/firestore:     âœ– queries include documents from other queries (skipped)
@firebase/firestore:     âœ– queries filter documents that no longer match (skipped)
@firebase/firestore:   LocalStore w/ IndexedDB Persistence
@firebase/firestore:     âœ” localStoreSetIndexAutoCreationEnabled()
@firebase/firestore:     âœ” handles SetMutation
@firebase/firestore:     âœ” handles SetMutation -> Document
@firebase/firestore:     âœ” handles SetMutation -> Ack (Held) -> SetMutation -> Reject -> RemoteEvent (Release Ack)
@firebase/firestore:     âœ” handles NoDocument -> SetMutation -> Ack
@firebase/firestore:     âœ” handles SetMutation -> NoDocument
@firebase/firestore:     âœ” handles Document -> SetMutation -> Ack ->  Document
@firebase/firestore:     âœ” handles PatchMutation without prior document
@firebase/firestore:     âœ” handles PatchMutation -> Document -> Ack
@firebase/firestore:     âœ” handles PatchMutation -> Ack -> Document
@firebase/firestore:     âœ” handles DeleteMutation -> Ack
@firebase/firestore:     âœ” handles Document -> DeleteMutation -> Ack
@firebase/firestore:     âœ” handles DeleteMutation -> Document -> Ack
@firebase/firestore:     âœ” handles Document -> NoDocument -> Document
@firebase/firestore:     âœ” handles SetMutation -> PatchMutation -> Document -> Ack -> Ack
@firebase/firestore:     âœ” handles SetMutation + PatchMutation
@firebase/firestore:     âœ– handles SetMutation -> Ack -> PatchMutation -> Reject (skipped)
@firebase/firestore:     âœ” handles SetMutation(A) + SetMutation(B) + PatchMutation(A)
@firebase/firestore:     âœ” handles DeleteMutation -> PatchMutation -> Ack -> Ack
@firebase/firestore:     âœ– collects garbage after ChangeBatch with no target ids (skipped)
@firebase/firestore:     âœ– collects garbage after ChangeBatch (skipped)
@firebase/firestore:     âœ– collects garbage after acknowledged mutation (skipped)
@firebase/firestore:     âœ– collects garbage after rejected mutation (skipped)
@firebase/firestore:     âœ– pins documents in the local view (skipped)
@firebase/firestore:     âœ– throws away documents with unknown target-ids immediately (skipped)
@firebase/firestore:     âœ” can execute document queries
@firebase/firestore:     âœ” can execute collection queries
@firebase/firestore:     âœ” can execute mixed collection queries
@firebase/firestore:     âœ” reads all documents for initial collection queries
@firebase/firestore:     âœ” persists resume tokens
@firebase/firestore:     âœ” does not replace resume token with empty resume token
@firebase/firestore:     âœ” handles SetMutation -> Transform -> Transform
@firebase/firestore:     âœ” handles SetMutation -> Ack -> Transform -> Ack -> Transform
@firebase/firestore:     âœ” handles SetMutation -> Transform-> RemoteEvent -> Transform
@firebase/firestore:     âœ” holds back transforms
@firebase/firestore:     âœ” handles MergeMutation with Transform -> RemoteEvent
@firebase/firestore:     âœ” handles PatchMutation with Transform -> RemoteEvent
@firebase/firestore:     âœ” handles saving bundled documents
@firebase/firestore:     âœ” handles saving bundled documents with newer existing version
@firebase/firestore:     âœ” handles saving bundled documents with older existing version
@firebase/firestore:     âœ” handles saving bundled documents with same existing version should not overwrite
@firebase/firestore:     âœ” handles MergeMutation with Transform -> BundledDocuments
@firebase/firestore:     âœ” handles PatchMutation with Transform -> BundledDocuments
@firebase/firestore:     âœ” handles saving and checking bundle metadata
@firebase/firestore:     âœ” add then update while offline
@firebase/firestore:     âœ” handles saving and loading named queries
@firebase/firestore:     âœ” loading named queries allocates targets and updates target document mapping
@firebase/firestore:     âœ” handles saving and loading limit to last queries
@firebase/firestore:     âœ” computes highest unacknowledged batch id correctly
@firebase/firestore:     âœ” only persists updates for documents when version changes
@firebase/firestore:     âœ” can handle batch Ack when pending batches have other docs
@firebase/firestore:     âœ” can handle multiple field patches on remote docs
@firebase/firestore:     âœ” can handle multiple field patches in one batch on remote docs
@firebase/firestore:     âœ” can handle multiple field patches on local docs
@firebase/firestore:     âœ” update on remote doc leads to update overlay
@firebase/firestore:     âœ” handles document creation time
@firebase/firestore:     âœ” saves updateTime as createTime when receives ack for creating a new doc
@firebase/firestore:     âœ” handles createTime for Set -> Ack -> RemoteEvent
@firebase/firestore:     âœ” handles createTime for Set -> RemoteEvent -> Ack
@firebase/firestore:     âœ” saves updateTime as createTime when recreating a deleted doc
@firebase/firestore:     âœ” document createTime is preserved through Set -> Ack -> Patch -> Ack
@firebase/firestore:     âœ” document createTime is preserved through Doc Added -> Patch -> Ack
@firebase/firestore:     âœ” deeply nested server timestamps do not cause stack overflow
@firebase/firestore:     âœ” uses target mapping to execute queries
@firebase/firestore:     âœ” last limbo free snapshot is advanced during view processing
@firebase/firestore:     âœ” ignores target mapping after existence filter mismatch
@firebase/firestore:     âœ” queries include locally modified documents
@firebase/firestore:     âœ” queries include documents from other queries
@firebase/firestore:     âœ” queries filter documents that no longer match
@firebase/firestore:   LocalStore w/ IndexedDB Persistence (Non generic)
@firebase/firestore:     âœ” Adds Indexes
@firebase/firestore:     âœ” Removes Indexes
@firebase/firestore:     âœ” Does Not Reset Index When Same Index Is Added
@firebase/firestore:     âœ” Deleted Document Removes Index
@firebase/firestore:     âœ” Uses Indexes
@firebase/firestore:     âœ” Uses Partially Indexed Remote Documents When Available
@firebase/firestore:     âœ” Uses Partially Indexed Overlays When Available
@firebase/firestore:     âœ” Does Not Use Limit When Index Is Outdated
@firebase/firestore:     âœ” Uses Index For Limit Query When Index Is Updated
@firebase/firestore:     âœ” Indexes Server Timestamps
@firebase/firestore:     âœ” can auto-create indexes
@firebase/firestore:     âœ” can auto-create indexes works with or query
@firebase/firestore:     âœ” does not auto-create indexes for small collections
@firebase/firestore:     âœ” does not auto create indexes when index lookup is expensive
@firebase/firestore:     âœ” index auto creation works when backfiller runs halfway
@firebase/firestore:     âœ” index created by index auto creation exists after turn off auto creation
@firebase/firestore:     âœ” disable index auto creation works
@firebase/firestore:     âœ” index auto creation works with mutation
@firebase/firestore:     âœ” delete all indexes works with index auto creation
@firebase/firestore:     âœ” delete all indexes works with manual added indexes
@firebase/firestore:     âœ” index auto creation does not work with multiple inequality
@firebase/firestore:   IndexedDbLruDelegate
@firebase/firestore:     âœ” picks sequence number percentile
@firebase/firestore:     âœ” removes targets up through sequence number
@firebase/firestore:     âœ” removes orphaned documents
@firebase/firestore:     âœ” removes targets then GCs
@firebase/firestore:     âœ” gets cache size
@firebase/firestore:     âœ” can be disabled
@firebase/firestore:     âœ” skips a cache that is too small
@firebase/firestore:     âœ” runs when the cache is large enough
@firebase/firestore:     âœ” caps sequence numbers to collect
@firebase/firestore:     nthSequenceNumber()
@firebase/firestore:       âœ” sequence number for no targets
@firebase/firestore:       âœ” with 50 targets
@firebase/firestore:       âœ” with multiple targets in a transaction
@firebase/firestore:       âœ” with all collected targets in a single transaction
@firebase/firestore:       âœ” with mutation and sequential targets
@firebase/firestore:       âœ” with mutations in targets
@firebase/firestore:   MemoryLruDelegate
@firebase/firestore:     âœ” picks sequence number percentile
@firebase/firestore:     âœ” removes targets up through sequence number
@firebase/firestore:     âœ” removes orphaned documents
@firebase/firestore:     âœ” removes targets then GCs
@firebase/firestore:     âœ” gets cache size
@firebase/firestore:     âœ” can be disabled
@firebase/firestore:     âœ” skips a cache that is too small
@firebase/firestore:     âœ” runs when the cache is large enough
@firebase/firestore:     âœ” caps sequence numbers to collect
@firebase/firestore:     nthSequenceNumber()
@firebase/firestore:       âœ” sequence number for no targets
@firebase/firestore:       âœ” with 50 targets
@firebase/firestore:       âœ” with multiple targets in a transaction
@firebase/firestore:       âœ” with all collected targets in a single transaction
@firebase/firestore:       âœ” with mutation and sequential targets
@firebase/firestore:       âœ” with mutations in targets
@firebase/firestore:   MemoryMutationQueue
@firebase/firestore:     âœ” can count batches
@firebase/firestore:     âœ” can lookup mutation batch
@firebase/firestore:     âœ” can getNextMutationBatchAfterBatchId()
@firebase/firestore:     âœ” can getAllMutationBatchesAffectingDocumentKey()
@firebase/firestore:     âœ” can getAllMutationBatchesAffectingDocumentKeys()
@firebase/firestore:     âœ” can getAllMutationBatchesAffectingQuery()
@firebase/firestore:     âœ” can getAllMutationBatchesAffectingQuery() with compound batches
@firebase/firestore:     âœ” can removeMutationBatch()
@firebase/firestore:   IndexedDbMutationQueue
@firebase/firestore:     âœ” can count batches
@firebase/firestore:     âœ” can lookup mutation batch
@firebase/firestore:     âœ” can getNextMutationBatchAfterBatchId()
@firebase/firestore:     âœ” can getAllMutationBatchesAffectingDocumentKey()
@firebase/firestore:     âœ” can getAllMutationBatchesAffectingDocumentKeys()
@firebase/firestore:     âœ” can getAllMutationBatchesAffectingQuery()
@firebase/firestore:     âœ” can getAllMutationBatchesAffectingQuery() with compound batches
@firebase/firestore:     âœ” can removeMutationBatch()
@firebase/firestore:   PersistencePromise
@firebase/firestore:     âœ” Can chain synchronous functions
@firebase/firestore:     âœ” Can chain asynchronous functions
@firebase/firestore:     âœ” Can catch synchronous functions
@firebase/firestore:     âœ” Can catch asynchronous functions
@firebase/firestore:     âœ” ignores catches without errors
@firebase/firestore:     âœ” ignores catches without errors async
@firebase/firestore:     âœ” can catch errors twice sync
@firebase/firestore:     âœ” can catch errors twice async
@firebase/firestore:     âœ” can return undefined sync
@firebase/firestore:     âœ” can return undefined async
@firebase/firestore:     âœ” can waitFor sync
@firebase/firestore:     âœ” can waitFor async
@firebase/firestore:     âœ” can waitFor async error
@firebase/firestore:     âœ” propagates error for waitFor()
@firebase/firestore:     âœ” propagates error for forEach()
@firebase/firestore:   MemoryTransaction
@firebase/firestore:     âœ” invokes onCommittedListener when transaction succeeds
@firebase/firestore:     âœ” does not invoke onCommittedListener when transaction fails
@firebase/firestore:   IndexedDbTransaction
@firebase/firestore:     âœ” invokes onCommittedListener when transaction succeeds
@firebase/firestore:     âœ” does not invoke onCommittedListener when transaction fails
@firebase/firestore:     âœ” only invokes onCommittedListener once with retries
@firebase/firestore:   QueryEngine
@firebase/firestore:     MemoryEagerPersistence
@firebase/firestore:       âœ” uses target mapping for initial view
@firebase/firestore:       âœ” filters non-matching changes since initial results
@firebase/firestore:       âœ” includes changes since initial results
@firebase/firestore:       âœ” does not use initial results without limbo free snapshot version
@firebase/firestore:       âœ” does not use initial results for unfiltered collection query
@firebase/firestore:       âœ” does not use initial results for limit query with document removal
@firebase/firestore:       âœ” does not use initial results for limitToLast query with document removal
@firebase/firestore:       âœ” does not use initial results for limit query when last document has pending write
@firebase/firestore:       âœ” does not use initial results for limitToLast query when first document has pending write
@firebase/firestore:       âœ” does not use initial results for limit query when last document has been updated out of band
@firebase/firestore:       âœ” does not use initial results for limitToLast query when first document in limit has been updated out of band
@firebase/firestore:       âœ” uses initial results if last document in limit is unchanged
@firebase/firestore:       âœ” does not include documents deleted by mutation
@firebase/firestore:       âœ” can perform OR queries using full collection scan
@firebase/firestore:       âœ” query does not include documents with missing fields
@firebase/firestore:       âœ” query with multiple ins on the same field
@firebase/firestore:       âœ” query with ins and not-ins on the same field
@firebase/firestore:       âœ” query with multiple ins on different fields
@firebase/firestore:       âœ” query in with array-contains-any
@firebase/firestore:       âœ” query in with array-contains
@firebase/firestore:       âœ” order by equality
@firebase/firestore:       âœ” or query with in and not-in
@firebase/firestore:       âœ” query with array membership
@firebase/firestore:     IndexedDbPersistence configureCsi=false
@firebase/firestore:       âœ” uses target mapping for initial view
@firebase/firestore:       âœ” filters non-matching changes since initial results
@firebase/firestore:       âœ” includes changes since initial results
@firebase/firestore:       âœ” does not use initial results without limbo free snapshot version
@firebase/firestore:       âœ” does not use initial results for unfiltered collection query
@firebase/firestore:       âœ” does not use initial results for limit query with document removal
@firebase/firestore:       âœ” does not use initial results for limitToLast query with document removal
@firebase/firestore:       âœ” does not use initial results for limit query when last document has pending write
@firebase/firestore:       âœ” does not use initial results for limitToLast query when first document has pending write
@firebase/firestore:       âœ” does not use initial results for limit query when last document has been updated out of band
@firebase/firestore:       âœ” does not use initial results for limitToLast query when first document in limit has been updated out of band
@firebase/firestore:       âœ” uses initial results if last document in limit is unchanged
@firebase/firestore:       âœ” does not include documents deleted by mutation
@firebase/firestore:       âœ” can perform OR queries using full collection scan
@firebase/firestore:       âœ” query does not include documents with missing fields
@firebase/firestore:       âœ” query with multiple ins on the same field
@firebase/firestore:       âœ” query with ins and not-ins on the same field
@firebase/firestore:       âœ” query with multiple ins on different fields
@firebase/firestore:       âœ” query in with array-contains-any
@firebase/firestore:       âœ” query in with array-contains
@firebase/firestore:       âœ” order by equality
@firebase/firestore:       âœ” or query with in and not-in
@firebase/firestore:       âœ” query with array membership
@firebase/firestore:     IndexedDbQueryEngine configureCsi=true
@firebase/firestore:       âœ” combines indexed with non-indexed results
@firebase/firestore:       âœ” uses partial index for limit queries
@firebase/firestore:       âœ” re-fills indexed limit queries
@firebase/firestore:       âœ” creates indexes when indexAutoCreationEnabled=true
@firebase/firestore:       âœ” does not create indexes when indexAutoCreationEnabled=false
@firebase/firestore:       âœ” creates indexes when min collection size is met exactly and relative cost is ever-so-slightly better
@firebase/firestore:       âœ” does not create indexes when min collection size is not met by only 1 document
@firebase/firestore:       âœ” does not create indexes when relative cost is equal
@firebase/firestore:       âœ” query with multiple ins on the same field
@firebase/firestore:       âœ” query with ins and not-ins on the same field
@firebase/firestore:       âœ” query with multiple ins on different fields
@firebase/firestore:       âœ” query in with array-contains-any
@firebase/firestore:       âœ” query in with array-contains
@firebase/firestore:       âœ” order by equality
@firebase/firestore:       âœ” or query with in and not-in
@firebase/firestore:       âœ” query with array membership
@firebase/firestore:   ReferenceSet
@firebase/firestore:     âœ” can add/remove references
@firebase/firestore:     âœ” can remove all references for a target ID
@firebase/firestore:   MemoryRemoteDocumentCache
@firebase/firestore:     âœ” returns an invalid document for documents not in cache
@firebase/firestore:     âœ” can set and read a document
@firebase/firestore:     âœ” can set and read a document at a long path
@firebase/firestore:     âœ” can set and read a NoDocument
@firebase/firestore:     âœ” can set document to new value
@firebase/firestore:     âœ” can set and read several documents
@firebase/firestore:     âœ” can set and read several documents with overlapping keys
@firebase/firestore:     âœ” can set and read several documents with deeply nested keys
@firebase/firestore:     âœ” can set and read several documents including missing document
@firebase/firestore:     âœ” can remove document
@firebase/firestore:     âœ” can remove nonexistent document
@firebase/firestore:     âœ” can get all documents from collection
@firebase/firestore:     âœ” getAll() excludes subcollection
@firebase/firestore:     âœ” can get all documents since read time
@firebase/firestore:     âœ” getDocumentsMatchingQuery() applies query check
@firebase/firestore:     âœ” getDocumentsMatchingQuery() respects mutated documents
@firebase/firestore:     âœ” getAll() uses read time rather than update time
@firebase/firestore:     âœ” does not apply document modifications to cache
@firebase/firestore:     âœ” doesn't keep track of size
@firebase/firestore:   LRU MemoryRemoteDocumentCache
@firebase/firestore:     âœ” returns an invalid document for documents not in cache
@firebase/firestore:     âœ” can set and read a document
@firebase/firestore:     âœ” can set and read a document at a long path
@firebase/firestore:     âœ” can set and read a NoDocument
@firebase/firestore:     âœ” can set document to new value
@firebase/firestore:     âœ” can set and read several documents
@firebase/firestore:     âœ” can set and read several documents with overlapping keys
@firebase/firestore:     âœ” can set and read several documents with deeply nested keys
@firebase/firestore:     âœ” can set and read several documents including missing document
@firebase/firestore:     âœ” can remove document
@firebase/firestore:     âœ” can remove nonexistent document
@firebase/firestore:     âœ” can get all documents from collection
@firebase/firestore:     âœ” getAll() excludes subcollection
@firebase/firestore:     âœ” can get all documents since read time
@firebase/firestore:     âœ” getDocumentsMatchingQuery() applies query check
@firebase/firestore:     âœ” getDocumentsMatchingQuery() respects mutated documents
@firebase/firestore:     âœ” getAll() uses read time rather than update time
@firebase/firestore:     âœ” does not apply document modifications to cache
@firebase/firestore:     âœ” keeps track of size
@firebase/firestore:   IndexedDbRemoteDocumentCache
@firebase/firestore:     âœ” can get next documents from collection group
@firebase/firestore:     âœ” can get next documents from collection group with limit
@firebase/firestore:     âœ” can get next documents from collection group with read time offset
@firebase/firestore:     âœ” can get next documents from collection group with document key offset
@firebase/firestore:     âœ” can get next documents from non-existing collection group
@firebase/firestore:     âœ” can get next documents from collection group 
@firebase/firestore:     âœ” can get next documents from collection group with limit 
@firebase/firestore:     âœ” can get next documents from collection group with read time offset 
@firebase/firestore:     âœ” can get next documents from collection group with document key offset 
@firebase/firestore:     âœ” can get next documents from non-existing collection group 
@firebase/firestore:     âœ” returns an invalid document for documents not in cache
@firebase/firestore:     âœ” can set and read a document
@firebase/firestore:     âœ” can set and read a document at a long path
@firebase/firestore:     âœ” can set and read a NoDocument
@firebase/firestore:     âœ” can set document to new value
@firebase/firestore:     âœ” can set and read several documents
@firebase/firestore:     âœ” can set and read several documents with overlapping keys
@firebase/firestore:     âœ” can set and read several documents with deeply nested keys
@firebase/firestore:     âœ” can set and read several documents including missing document
@firebase/firestore:     âœ” can remove document
@firebase/firestore:     âœ” can remove nonexistent document
@firebase/firestore:     âœ” can get all documents from collection
@firebase/firestore:     âœ” getAll() excludes subcollection
@firebase/firestore:     âœ” can get all documents since read time
@firebase/firestore:     âœ” getDocumentsMatchingQuery() applies query check
@firebase/firestore:     âœ” getDocumentsMatchingQuery() respects mutated documents
@firebase/firestore:     âœ” getAll() uses read time rather than update time
@firebase/firestore:     âœ” does not apply document modifications to cache
@firebase/firestore:     âœ” keeps track of size
@firebase/firestore:   RemoteDocumentChangeBuffer
@firebase/firestore:     âœ” can read unchanged entry
@firebase/firestore:     âœ” can add entry and read it back
@firebase/firestore:     âœ” can remove entry
@firebase/firestore:     âœ” can apply changes
@firebase/firestore:     âœ” can apply changes with removal
@firebase/firestore: ERROR: '[2025-03-04T22:53:32.877Z]  @firebase/firestore:', 'Firestore (11.3.0): FIRESTORE (11.3.0) INTERNAL ASSERTION FAILED: Changes have already been applied.'
@firebase/firestore: ERROR: '[2025-03-04T22:53:32.877Z]  @firebase/firestore:', 'Firestore (11.3.0): FIRESTORE (11.3.0) INTERNAL ASSERTION FAILED: Changes have already been applied.'
@firebase/firestore: ERROR: '[2025-03-04T22:53:32.877Z]  @firebase/firestore:', 'Firestore (11.3.0): FIRESTORE (11.3.0) INTERNAL ASSERTION FAILED: Changes have already been applied.'
@firebase/firestore: ERROR: '[2025-03-04T22:53:32.877Z]  @firebase/firestore:', 'Firestore (11.3.0): FIRESTORE (11.3.0) INTERNAL ASSERTION FAILED: Changes have already been applied.'
@firebase/firestore: ERROR: '[2025-03-04T22:53:32.877Z]  @firebase/firestore:', 'Firestore (11.3.0): FIRESTORE (11.3.0) INTERNAL ASSERTION FAILED: Changes have already been applied.'
@firebase/firestore: ERROR: '[2025-03-04T22:53:32.877Z]  @firebase/firestore:', 'Firestore (11.3.0): FIRESTORE (11.3.0) INTERNAL ASSERTION FAILED: Changes have already been applied.'
@firebase/firestore: ERROR: '[2025-03-04T22:53:32.877Z]  @firebase/firestore:', 'Firestore (11.3.0): FIRESTORE (11.3.0) INTERNAL ASSERTION FAILED: Changes have already been applied.'
@firebase/firestore: ERROR: '[2025-03-04T22:53:32.877Z]  @firebase/firestore:', 'Firestore (11.3.0): FIRESTORE (11.3.0) INTERNAL ASSERTION FAILED: Changes have already been applied.'
@firebase/firestore: ERROR: '[2025-03-04T22:53:32.877Z]  @firebase/firestore:', 'Firestore (11.3.0): FIRESTORE (11.3.0) INTERNAL ASSERTION FAILED: Changes have already been applied.'
@firebase/firestore: ERROR: '[2025-03-04T22:53:32.877Z]  @firebase/firestore:', 'Firestore (11.3.0): FIRESTORE (11.3.0) INTERNAL ASSERTION FAILED: Changes have already been applied.'
@firebase/firestore: ERROR: '[2025-03-04T22:53:32.878Z]  @firebase/firestore:', 'Firestore (11.3.0): FIRESTORE (11.3.0) INTERNAL ASSERTION FAILED: Changes have already been applied.'
@firebase/firestore: ERROR: '[2025-03-04T22:53:32.878Z]  @firebase/firestore:', 'Firestore (11.3.0): FIRESTORE (11.3.0) INTERNAL ASSERTION FAILED: Changes have already been applied.'
@firebase/firestore: ERROR: '[2025-03-04T22:53:32.878Z]  @firebase/firestore:', 'Firestore (11.3.0): FIRESTORE (11.3.0) INTERNAL ASSERTION FAILED: Changes have already been applied.'
@firebase/firestore: ERROR: '[2025-03-04T22:53:32.878Z]  @firebase/firestore:', 'Firestore (11.3.0): FIRESTORE (11.3.0) INTERNAL ASSERTION FAILED: Changes have already been applied.'
@firebase/firestore:     âœ” methods fail after apply.
@firebase/firestore:   SimpleDb
@firebase/firestore:     âœ” regex test
@firebase/firestore:     âœ” can get
@firebase/firestore:     âœ” can put
@firebase/firestore:     âœ” lets you explicitly abort transactions
@firebase/firestore:     âœ” aborts transactions when an error happens
@firebase/firestore:     âœ” aborts transactions when persistence promise is rejected
@firebase/firestore:     âœ” exposes error from inside a transaction
@firebase/firestore:     âœ” can delete
@firebase/firestore:     âœ” loadAll
@firebase/firestore:     âœ” loadFirst
@firebase/firestore:     âœ” deleteAll
@firebase/firestore:     âœ” deleteAll in key range
@firebase/firestore:     âœ” deleteAll in index range
@firebase/firestore:     âœ” can iterate
@firebase/firestore:     âœ” can iterate and skip keys
@firebase/firestore:     âœ” stops iteration after rejected promise
@firebase/firestore:     âœ” can iterate in reverse
@firebase/firestore:     âœ” can iterate and skip keys in reverse
@firebase/firestore:     âœ” can iterate and skip over the index
@firebase/firestore:     âœ” can iterate using index and range and stop before end
@firebase/firestore:     âœ” can iterate over index as keys-only
@firebase/firestore:     âœ” can iterate over index using a partial bound
@firebase/firestore:     âœ” can use arrays as keys and do partial bounds ranges
@firebase/firestore:     âœ” correctly sorts keys with nested arrays
@firebase/firestore:     âœ” retries transactions
@firebase/firestore:     âœ” retries transactions only three times
@firebase/firestore:     âœ” does not retry explicitly aborted transactions
@firebase/firestore:     âœ– Perf (skipped)
@firebase/firestore:   MemoryTargetCache
@firebase/firestore:     âœ” returns null for target not in cache
@firebase/firestore:     âœ” can set and read a target
@firebase/firestore:     âœ” handles canonical ID collisions
@firebase/firestore:     âœ” can set target to new value
@firebase/firestore:     âœ” can remove a target
@firebase/firestore:     âœ” can remove matching keys when a target is removed
@firebase/firestore:     âœ” adds or removes matching keys
@firebase/firestore:     âœ” can remove matching keys for a targetId
@firebase/firestore:     âœ” can get matching keys for targetId
@firebase/firestore:     âœ” can allocate target ID
@firebase/firestore:     âœ” can get / set targets metadata
@firebase/firestore:     âœ” sets the highest sequence number
@firebase/firestore:   IndexedDbTargetCache
@firebase/firestore:     âœ” returns null for target not in cache
@firebase/firestore:     âœ” can set and read a target
@firebase/firestore:     âœ” handles canonical ID collisions
@firebase/firestore:     âœ” can set target to new value
@firebase/firestore:     âœ” can remove a target
@firebase/firestore:     âœ” can remove matching keys when a target is removed
@firebase/firestore:     âœ” adds or removes matching keys
@firebase/firestore:     âœ” can remove matching keys for a targetId
@firebase/firestore:     âœ” can get matching keys for targetId
@firebase/firestore:     âœ” can allocate target ID
@firebase/firestore:     âœ” can get / set targets metadata
@firebase/firestore:     âœ” sets the highest sequence number
@firebase/firestore:     âœ” persists metadata across restarts
@firebase/firestore:   WebStorageSharedClientState
@firebase/firestore:     persists mutation batches
@firebase/firestore:       âœ” with a pending batch
@firebase/firestore:       âœ” with an acknowledged batch
@firebase/firestore:       âœ” with a rejected batch
@firebase/firestore:     persists query targets
@firebase/firestore:       âœ” when empty
@firebase/firestore:       âœ” with multiple targets
@firebase/firestore:       âœ” with a not-current target
@firebase/firestore:       âœ” with a current target
@firebase/firestore:       âœ” with an errored target
@firebase/firestore:       âœ” garbage collects entry
@firebase/firestore:     combines client state
@firebase/firestore:       âœ” with targets from existing client
@firebase/firestore:       âœ” with targets from new client
@firebase/firestore:       âœ” with online state from new client
@firebase/firestore:       âœ” ignores online state from inactive client
@firebase/firestore: ERROR: '[2025-03-04T22:53:33.036Z]  @firebase/firestore:', 'Firestore (11.3.0): SharedClientState', 'Failed to parse client data for instance 'A1aZc3E2gJqS1AARTxWz': {"activeTargetIds":[5,"invalid"]}'
@firebase/firestore: ERROR: '[2025-03-04T22:53:33.036Z]  @firebase/firestore:', 'Firestore (11.3.0): SharedClientState', 'Failed to parse client data for instance 'A1aZc3E2gJqS1AARTxWz': {"activeTargetIds":[5,"invalid"]}'
@firebase/firestore:       âœ” ignores invalid data
@firebase/firestore:     processes mutation updates
@firebase/firestore:       âœ” for pending mutation
@firebase/firestore:       âœ” for acknowledged mutation
@firebase/firestore:       âœ” for rejected mutation
@firebase/firestore:       âœ” handles unauthenticated user
@firebase/firestore:       âœ” ignores different user
@firebase/firestore: ERROR: '[2025-03-04T22:53:33.064Z]  @firebase/firestore:', 'Firestore (11.3.0): SharedClientState', 'Failed to parse mutation state for ID '1': {"state":"invalid","updateTimeMs":1741128813064}'
@firebase/firestore: ERROR: '[2025-03-04T22:53:33.064Z]  @firebase/firestore:', 'Firestore (11.3.0): SharedClientState', 'Failed to parse mutation state for ID '1': {"state":"invalid","updateTimeMs":1741128813064}'
@firebase/firestore:       âœ” ignores invalid data
@firebase/firestore:     processes target updates
@firebase/firestore:       âœ” for added target
@firebase/firestore:       âœ” for removed target
@firebase/firestore:       âœ” for not-current target
@firebase/firestore:       âœ” for current target
@firebase/firestore:       âœ” for errored target
@firebase/firestore: ERROR: '[2025-03-04T22:53:33.092Z]  @firebase/firestore:', 'Firestore (11.3.0): SharedClientState', 'Failed to parse target state for ID '1': {"state":"invalid","updateTimeMs":1741128813092}'
@firebase/firestore: ERROR: '[2025-03-04T22:53:33.092Z]  @firebase/firestore:', 'Firestore (11.3.0): SharedClientState', 'Failed to parse target state for ID '1': {"state":"invalid","updateTimeMs":1741128813092}'
@firebase/firestore:       âœ” ignores invalid data
@firebase/firestore:     syncs sequence numbers
@firebase/firestore:       âœ” writes out new sequence numbers
@firebase/firestore:       âœ” notifies on new sequence numbers
@firebase/firestore:     processes bundles
@firebase/firestore:       âœ” writes out collection groups
@firebase/firestore:       âœ” supports empty collection groups
@firebase/firestore:   Document
@firebase/firestore:     âœ” can be constructed
@firebase/firestore:     âœ” returns fields correctly
@firebase/firestore:     âœ” equals to other same documents
@firebase/firestore:   DocumentSet
@firebase/firestore:     âœ” keeps documents in the right order
@firebase/firestore:     âœ” adds and deletes elements
@firebase/firestore:     âœ” updates documents
@firebase/firestore:     âœ” adds docs equal to comparator with different keys
@firebase/firestore:     âœ” equals to other document set with the same elements and order
@firebase/firestore:   field index
@firebase/firestore:     âœ” comparator includes collection group
@firebase/firestore:     âœ” comparator ignores index id
@firebase/firestore:     âœ” comparator ignores index offset
@firebase/firestore:     âœ” comparator includes field name
@firebase/firestore:     âœ” comparator includes segment kind
@firebase/firestore:     âœ” comparator includes segment length
@firebase/firestore:   index offset
@firebase/firestore:     âœ” supports comparison
@firebase/firestore:     âœ” advances seconds
@firebase/firestore:   Mutation
@firebase/firestore:     âœ” can apply sets to documents
@firebase/firestore:     âœ” can apply patches to documents
@firebase/firestore:     âœ” can apply patches with merges to missing documents
@firebase/firestore:     âœ” can apply patches with merges to null documents
@firebase/firestore:     âœ” will delete values from the field-mask
@firebase/firestore:     âœ” will patch a primitive value
@firebase/firestore:     âœ” patching a NoDocument yields a NoDocument
@firebase/firestore:     âœ” can apply local serverTimestamp transforms to documents
@firebase/firestore:     âœ” can create arrayUnion() transform.
@firebase/firestore:     âœ” can create arrayRemove() transform.
@firebase/firestore:     âœ” can apply local arrayUnion transform to missing field
@firebase/firestore:     âœ” can apply local arrayUnion transform to non-array field
@firebase/firestore:     âœ” can apply local arrayUnion transform with non-existing elements
@firebase/firestore:     âœ” can apply local arrayUnion transform with existing elements
@firebase/firestore:     âœ” can apply local arrayUnion transform with duplicate existing elements
@firebase/firestore:     âœ” can apply local arrayUnion transform with duplicate union elements
@firebase/firestore:     âœ” can apply local arrayUnion transform with non-primitive elements
@firebase/firestore:     âœ” can apply local arrayUnion transform with partially-overlapping elements
@firebase/firestore:     âœ” can apply local arrayRemove transform to missing field
@firebase/firestore:     âœ” can apply local arrayRemove transform to non-array field
@firebase/firestore:     âœ” can apply local arrayRemove transform with non-existing elements
@firebase/firestore:     âœ” can apply local arrayRemove transform with existing elements
@firebase/firestore:     âœ” can apply local arrayRemove transform with non-primitive elements
@firebase/firestore:     âœ” can apply server-acked serverTimestamp transform to documents
@firebase/firestore:     âœ” can apply server-acked array transforms to document
@firebase/firestore:     âœ” can apply numeric add transform to document
@firebase/firestore:     âœ” can apply numeric add transform to unexpected type
@firebase/firestore:     âœ” can apply numeric add transform to missing field
@firebase/firestore:     âœ” can apply numeric add transforms consecutively
@firebase/firestore:     âœ” can apply server-acked numeric add transform to document
@firebase/firestore:     âœ” can apply deletes to documents
@firebase/firestore:     âœ” can apply sets with mutation results
@firebase/firestore:     âœ” will apply patches with mutation results
@firebase/firestore:     âœ” transitions versions correctly
@firebase/firestore:     âœ” extracts null base value for non-transform mutation
@firebase/firestore:     âœ” extracts null base value for ServerTimestamp
@firebase/firestore:     âœ” extracts base value for increment
@firebase/firestore:     âœ” increment twice
@firebase/firestore:     âœ” overlay with no mutation
@firebase/firestore:     âœ” overlay with mutations fail by preconditions
@firebase/firestore:     âœ” overlay with patch on invalid document
@firebase/firestore:     âœ” overlay with one set mutation
@firebase/firestore:     âœ” overlay with one patch mutation
@firebase/firestore:     âœ” overlay with patch then merge
@firebase/firestore:     âœ” overlay with delete then patch
@firebase/firestore:     âœ” overlay with delete then merge
@firebase/firestore:     âœ” overlay with patch then patch to delete field
@firebase/firestore:     âœ” overlay with patch then merge with array union
@firebase/firestore:     âœ” overlay with array union then remove
@firebase/firestore:     âœ” overlay with set then increment
@firebase/firestore:     âœ” overlay with set then patch on deleted doc
@firebase/firestore:     âœ” overlay with field deletion of nested field
@firebase/firestore:     âœ” overlay created from empty set with merge
@firebase/firestore:     âœ” overlay with mutation with multiple deletes
@firebase/firestore:     âœ” overlay by combinations and permutations
@firebase/firestore:     âœ” overlay by combinations and permutations for array transforms
@firebase/firestore:     âœ” overlay by combinations and permutations for increments
@firebase/firestore:   ObjectValue
@firebase/firestore:     âœ” can extract fields
@firebase/firestore:     âœ” can overwrite existing fields
@firebase/firestore:     âœ” can add new fields
@firebase/firestore:     âœ” can add multiple new fields
@firebase/firestore:     âœ” can implicitly create objects
@firebase/firestore:     âœ” can overwrite primitive values to create objects
@firebase/firestore:     âœ” can add to nested objects
@firebase/firestore:     âœ” can delete keys
@firebase/firestore:     âœ” can delete nested keys
@firebase/firestore:     âœ” can delete added keys
@firebase/firestore:     âœ” can delete, resulting in empty object
@firebase/firestore:     âœ” will not delete nested keys on primitive values
@firebase/firestore:     âœ” can delete multiple fields
@firebase/firestore:     âœ” provides field mask
@firebase/firestore:   MutableObjectValue
@firebase/firestore:     âœ” supports empty objectValues
@firebase/firestore:     âœ” sets single field
@firebase/firestore:     âœ” sets empty object
@firebase/firestore:     âœ” sets multiple fields
@firebase/firestore:     âœ” sets nested fields
@firebase/firestore:     âœ” sets two fields in nested object
@firebase/firestore:     âœ” sets field in nested object
@firebase/firestore:     âœ” sets deeply nested field in nested object
@firebase/firestore:     âœ” sets nested field multiple times
@firebase/firestore:     âœ” sets and deletes field
@firebase/firestore:     âœ” sets and deletes nested field
@firebase/firestore:     âœ” sets single field in existing object
@firebase/firestore:     âœ” overwrites field
@firebase/firestore:     âœ” overwrites nested field
@firebase/firestore:     âœ” overwrites deeply nested field
@firebase/firestore:     âœ” merges existing object
@firebase/firestore:     âœ” overwrites nested object
@firebase/firestore:     âœ” replaces nested object
@firebase/firestore:     âœ” deletes single field
@firebase/firestore:     âœ” deletes nested object
@firebase/firestore:     âœ” deletes non-existing field
@firebase/firestore:     âœ” deletes non-existing nested field
@firebase/firestore:   Path
@firebase/firestore:     âœ” can be constructed
@firebase/firestore:     âœ” can index into itself
@firebase/firestore:     âœ” can be constructed with offsets
@firebase/firestore:     âœ” can pop front repeatedly
@firebase/firestore:     âœ” can yield the last segment
@firebase/firestore:     âœ” can create child path
@firebase/firestore:     âœ” can pop last repeatedly
@firebase/firestore:     âœ” compares correctly
@firebase/firestore:     âœ” determines prefix correctly
@firebase/firestore:     âœ” escapes FieldPath with segments
@firebase/firestore:     âœ” can be constructed from field path.
@firebase/firestore:     fails to construct from invalid field path
@firebase/firestore:       âœ” ""
@firebase/firestore:       âœ” "foo\"
@firebase/firestore:       âœ” "foo\x"
@firebase/firestore:       âœ” "foo."
@firebase/firestore:       âœ” ".foo"
@firebase/firestore:       âœ” "foo..bar"
@firebase/firestore:   Target Bounds
@firebase/firestore:     âœ” empty query
@firebase/firestore:     âœ” equals query with ascending index
@firebase/firestore:     âœ” equals query with descending index
@firebase/firestore:     âœ” less than query with ascending index
@firebase/firestore:     âœ” less than query with descending index
@firebase/firestore:     âœ” less than or equals query with ascending index
@firebase/firestore:     âœ” less than or equals query with descending index
@firebase/firestore:     âœ” greater than query with ascending index
@firebase/firestore:     âœ” greater than query with descending index
@firebase/firestore:     âœ” greater than or equals query with ascending index
@firebase/firestore:     âœ” greater than or equals query with descending index
@firebase/firestore:     âœ” arrayContains query
@firebase/firestore:     âœ” arrayContainsAny query
@firebase/firestore:     âœ” orderBy query
@firebase/firestore:     âœ” orderBy query with filter
@firebase/firestore:     âœ” startAt query
@firebase/firestore:     âœ” startAt query with filter
@firebase/firestore:     âœ” startAfter query with filter
@firebase/firestore:     âœ” startAfter does not change bound if not applicable
@firebase/firestore:     âœ” endAt query
@firebase/firestore:     âœ” endAt query with filter
@firebase/firestore:     âœ” endBefore query with filter
@firebase/firestore:     âœ” endBefore does not change bound if not applicable
@firebase/firestore:     âœ” partial index match with bound
@firebase/firestore:     âœ” can use merge join
@firebase/firestore:     âœ” can use partial index
@firebase/firestore:     âœ” cannot use overspecified index
@firebase/firestore:     âœ” equalities with default order
@firebase/firestore:     âœ” equalities with ascending order
@firebase/firestore:     âœ” equalities with descending order
@firebase/firestore:     âœ” inequalities with default order
@firebase/firestore:     âœ” inequalities with ascending order
@firebase/firestore:     âœ” inequalities with descending order
@firebase/firestore:     âœ” inequality uses single field index
@firebase/firestore:     âœ” is query uses merge join
@firebase/firestore: ERROR: '[2025-03-04T22:53:33.935Z]  @firebase/firestore:', 'Firestore (11.3.0): FIRESTORE (11.3.0) INTERNAL ASSERTION FAILED: Collection IDs do not match'
@firebase/firestore: ERROR: '[2025-03-04T22:53:33.935Z]  @firebase/firestore:', 'Firestore (11.3.0): FIRESTORE (11.3.0) INTERNAL ASSERTION FAILED: Collection IDs do not match'
@firebase/firestore:     âœ” validates collection
@firebase/firestore:     âœ” with array-contains
@firebase/firestore:     âœ” array-contains is independent
@firebase/firestore:     âœ” with array-contains and order by
@firebase/firestore:     âœ” with equality and descending order
@firebase/firestore:     âœ” with multiple equalities
@firebase/firestore:     âœ” with multiple equalities and inequality
@firebase/firestore:     âœ” with orderBy
@firebase/firestore:     âœ” with not equals
@firebase/firestore:     âœ” with multiple filters
@firebase/firestore:     âœ” multiple filters require matching prefix
@firebase/firestore:     âœ” with multiple filters and orderBy
@firebase/firestore:     âœ” with multiple inequalities
@firebase/firestore:     âœ” with multiple notIns
@firebase/firestore:     âœ” with multiple orderBys
@firebase/firestore:     âœ” with in and notIn
@firebase/firestore:     âœ” with equality and different order by
@firebase/firestore:     âœ” with equals and not in
@firebase/firestore:     âœ” with in and orderBy
@firebase/firestore:     âœ” with in and orderBy on same field
@firebase/firestore:     âœ” with equality and inequality on the same field
@firebase/firestore:     buildTargetIndex()
@firebase/firestore:       âœ” queries with equalities
@firebase/firestore:       âœ” queries with inequalities
@firebase/firestore:       âœ” queries with array contains
@firebase/firestore:       âœ” queries with order bys
@firebase/firestore:       âœ” queries with inequalities uses single field index
@firebase/firestore:       âœ” query of a collection
@firebase/firestore:       âœ” query with array contains and order by
@firebase/firestore:       âœ” query with equality and descending order
@firebase/firestore:       âœ” query with multiple equalities
@firebase/firestore:       âœ” query with in and not in filters
@firebase/firestore:       âœ” query with equals and not-in filters
@firebase/firestore:       query with multiple equalities and inequality
@firebase/firestore:         âœ” inequality last
@firebase/firestore:         âœ” inequality in middle
@firebase/firestore:       query with multiple filters
@firebase/firestore:         âœ” == and > on different fields
@firebase/firestore:         âœ” >=, ==, and <= filters on the same field
@firebase/firestore:         âœ” not-in and >= on the same field
@firebase/firestore:       query with multiple order-bys
@firebase/firestore:         âœ” order by fff, bar desc, __name__
@firebase/firestore:         âœ” order by foo, bar, __name__ desc
@firebase/firestore:       query with equality and different order-by
@firebase/firestore:         âœ” filter on foo and bar, order by qux
@firebase/firestore:         âœ” filter on aaa, qqq, ccc, order by fff, bbb
@firebase/firestore:       query with in and order-by
@firebase/firestore:         âœ” on different fields
@firebase/firestore:         âœ” on the same field
@firebase/firestore:       query with multiple inequality
@firebase/firestore:         âœ” returns null
@firebase/firestore:   Values
@firebase/firestore:     âœ” compares values for equality
@firebase/firestore:     âœ” normalizes values for equality
@firebase/firestore:     âœ” orders types correctly
@firebase/firestore:     âœ” normalizes values for comparison
@firebase/firestore:     âœ” estimates size correctly for fixed sized values
@firebase/firestore:     âœ” estimates size correctly for relatively sized values
@firebase/firestore:     âœ” computes lower bound
@firebase/firestore:     âœ” computes upper bound
@firebase/firestore:     âœ” canonicalizes values
@firebase/firestore:     âœ” canonical IDs ignore sort order
@firebase/firestore:     âœ” clones properties without normalization
@firebase/firestore:   BloomFilter
@firebase/firestore:     âœ” can instantiate an empty bloom filter
@firebase/firestore:     âœ” should throw error if empty bloom filter inputs are invalid
@firebase/firestore:     âœ” can instantiate a non empty bloom filter
@firebase/firestore:     âœ” should throw error if padding is invalid
@firebase/firestore:     âœ” should throw error if hash count is negative
@firebase/firestore:     âœ” should throw error if hash count is 0 for non empty bloom filter
@firebase/firestore:     âœ” should be able to process non standard characters
@firebase/firestore:     âœ” mightContain in empty bloom filter should always return false
@firebase/firestore:     âœ” mightContain on empty string might return false positive result
@firebase/firestore:     BloomFilter golden tests
@firebase/firestore:       âœ” mightContain result for 1 document with 1 false positive rate
@firebase/firestore:       âœ” mightContain result for 1 document with 0.01 false positive rate
@firebase/firestore:       âœ” mightContain result for 1 document with 0.0001 false positive rate
@firebase/firestore:       âœ” mightContain result for 500 documents with 1 false positive rate
@firebase/firestore:       âœ” mightContain result for 500 documents with 0.01 false positive rate
@firebase/firestore:       âœ” mightContain result for 500 document with 0.0001 false positive rate
@firebase/firestore:       âœ” mightContain result for 5000 documents with 1 false positive rate
@firebase/firestore:       âœ” mightContain result for 5000 documents with 0.01 false positive rate
@firebase/firestore:       âœ” mightContain result for 5000 documents with 0.0001 false positive rate
@firebase/firestore:       âœ– mightContain result for 50000 documents with 1 false positive rate (skipped)
@firebase/firestore:       âœ– mightContain result for 50000 documents with 0.01 false positive rate (skipped)
@firebase/firestore:       âœ– mightContain result for 50000 documents with 0.0001 false positive rate (skipped)
@firebase/firestore:   Datastore
@firebase/firestore:     âœ” newDatastore() returns an an instance of Datastore
@firebase/firestore:     âœ” DatastoreImpl.invokeRPC() fails if terminated
@firebase/firestore:     âœ” Connection.terminate() invoked if Datastore terminated
@firebase/firestore:     âœ” DatastoreImpl.invokeRPC() rethrows a FirestoreError
@firebase/firestore:     âœ” DatastoreImpl.invokeRPC() wraps unknown exceptions in a FirestoreError
@firebase/firestore:     âœ” DatastoreImpl.invokeRPC() invalidates the token if unauthenticated
@firebase/firestore:     âœ” DatastoreImpl.invokeStreamingRPC() fails if terminated
@firebase/firestore:     âœ” DatastoreImpl.invokeStreamingRPC() rethrows a FirestoreError
@firebase/firestore:     âœ” DatastoreImpl.invokeStreamingRPC() wraps unknown exceptions in a FirestoreError
@firebase/firestore:     âœ” DatastoreImpl.invokeStreamingRPC() invalidates the token if unauthenticated
@firebase/firestore:   RemoteEvent
@firebase/firestore:     âœ” will accumulate document added and removed events
@firebase/firestore:     âœ” will ignore events for pending targets
@firebase/firestore:     âœ” will ignore events for removed targets
@firebase/firestore:     âœ” will keep reset mapping even with updates
@firebase/firestore:     âœ” will handle single reset
@firebase/firestore:     âœ” will handle target add and removal in same batch
@firebase/firestore:     âœ” target current change will mark the target current
@firebase/firestore:     âœ” target added change will reset previous state
@firebase/firestore:     âœ” no change will still mark the affected targets
@firebase/firestore:     âœ” existence filters clears target mapping
@firebase/firestore:     âœ” existence filters removes current changes
@firebase/firestore:     âœ” handles document update
@firebase/firestore:     âœ” only raises events for updated targets
@firebase/firestore:     âœ” synthesizes deletes
@firebase/firestore:     âœ” doesn't synthesize deletes in the wrong state
@firebase/firestore:     âœ” separates document updates
@firebase/firestore:     âœ” tracks limbo documents
@firebase/firestore:   RestConnection
@firebase/firestore:     âœ” url uses from path
@firebase/firestore:     âœ” merges headers
@firebase/firestore:     âœ” empty app check token is not added to headers
@firebase/firestore:     âœ” returns success
@firebase/firestore: WARN: '[2025-03-04T22:53:34.350Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'RunQuery' 0x61946e97 failed with error: ', '{"code":"unknown","name":"FirebaseError"}', 'url: ', 'http://example.com/v1/projects/testproject/databases/(default)/documents/coll:runQuery', 'request:', '{}'
@firebase/firestore: WARN: '[2025-03-04T22:53:34.350Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'RunQuery' 0x61946e97 failed with error: ', '{"code":"unknown","name":"FirebaseError"}', 'url: ', 'http://example.com/v1/projects/testproject/databases/(default)/documents/coll:runQuery', 'request:', '{}'
@firebase/firestore:     âœ” returns error
@firebase/firestore:   Serializer
@firebase/firestore:     âœ” toDocument() / fromDocument
@firebase/firestore:     âœ” encodes listen request labels
@firebase/firestore:     converts value
@firebase/firestore:       âœ” converts NullValue
@firebase/firestore:       âœ” converts BooleanValue
@firebase/firestore:       âœ” converts IntegerValue
@firebase/firestore:       âœ” converts DoubleValue
@firebase/firestore:       âœ” converts NaN
@firebase/firestore:       âœ” converts Infinity
@firebase/firestore:       âœ” converts StringValue
@firebase/firestore:       âœ” converts TimestampValue from proto
@firebase/firestore:       âœ” converts TimestampValue from string
@firebase/firestore:       âœ” converts TimestampValue to string (useProto3Json=true)
@firebase/firestore:       âœ” converts GeoPointValue
@firebase/firestore:       âœ” converts BlobValue
@firebase/firestore:       âœ” converts ArrayValue
@firebase/firestore:       âœ” converts empty ArrayValue
@firebase/firestore:       âœ” converts empty ObjectValue
@firebase/firestore:       âœ” converts nested ObjectValues
@firebase/firestore:       âœ” converts RefValue
@firebase/firestore:       âœ” converts VectorValue
@firebase/firestore:     toKey
@firebase/firestore:       âœ” converts an empty key
@firebase/firestore:       âœ” converts a regular key
@firebase/firestore:       âœ” converts a long key
@firebase/firestore:     fromKey
@firebase/firestore:       âœ” converts an empty key
@firebase/firestore:       âœ” converts a regular key
@firebase/firestore:       âœ” converts default-value containing key
@firebase/firestore:     toDocumentMask
@firebase/firestore:       âœ– converts a weird path (skipped)
@firebase/firestore:     fromDocumentMask
@firebase/firestore:       âœ– converts a weird path (skipped)
@firebase/firestore:     toMutation
@firebase/firestore:       âœ” converts DeleteMutation
@firebase/firestore:     toMutation / fromMutation
@firebase/firestore:       âœ” SetMutation
@firebase/firestore:       âœ” PatchMutation
@firebase/firestore:       âœ” PatchMutation without precondition
@firebase/firestore:       âœ” DeleteMutation
@firebase/firestore:       âœ” ServerTimestamp transform
@firebase/firestore:       âœ” Numeric Add transform
@firebase/firestore:       âœ” Array transforms
@firebase/firestore:       âœ” SetMutation with precondition
@firebase/firestore:       âœ” VerifyMutation
@firebase/firestore:     to/from UnaryOrFieldFilter
@firebase/firestore:       âœ” makes dotted-property names
@firebase/firestore:       âœ” converts NotEqual
@firebase/firestore:       âœ” converts LessThan
@firebase/firestore:       âœ” converts LessThanOrEqual
@firebase/firestore:       âœ” converts GreaterThan
@firebase/firestore:       âœ” converts GreaterThanOrEqual
@firebase/firestore:       âœ” converts key field
@firebase/firestore:       âœ” converts array-contains
@firebase/firestore:       âœ” converts IN
@firebase/firestore:       âœ” converts not-in
@firebase/firestore:       âœ” converts not-in with null
@firebase/firestore:       âœ” converts array-contains-any
@firebase/firestore:     to/from UnaryFilter
@firebase/firestore:       âœ” converts null
@firebase/firestore:       âœ” converts Nan
@firebase/firestore:       âœ” converts not null
@firebase/firestore:       âœ” converts not NaN
@firebase/firestore:     to/from CompositeFilter
@firebase/firestore:       âœ” converts deep collections
@firebase/firestore:       âœ” converts deep collections 
@firebase/firestore:     toTarget
@firebase/firestore:       âœ” converts first-level key queries
@firebase/firestore:       âœ” converts first-level ancestor queries
@firebase/firestore:       âœ” converts nested ancestor queries
@firebase/firestore:       âœ” converts single filters at first-level collections
@firebase/firestore:       âœ” converts multiple filters at first-level collections
@firebase/firestore:       âœ” converts single filters on deeper collections
@firebase/firestore:       âœ” converts multi-layer composite filters with OR at the first layer
@firebase/firestore:       âœ” converts multi-layer composite filters with AND at the first layer
@firebase/firestore:       âœ” converts order bys
@firebase/firestore:       âœ” converts limits
@firebase/firestore:       âœ” converts startAt/endAt
@firebase/firestore:       âœ” converts resume tokens
@firebase/firestore:     to/from OperatorName
@firebase/firestore:       âœ” contains all Operators
@firebase/firestore:     to/from Direction
@firebase/firestore:       âœ” contains all Directions
@firebase/firestore:     to/from PropertyOrder
@firebase/firestore:       âœ” renders ascending
@firebase/firestore:       âœ” renders descending
@firebase/firestore:     fromWatchChange
@firebase/firestore:       âœ” converts target change with added
@firebase/firestore:       âœ” converts target change with removed
@firebase/firestore:       âœ” converts target change with no_change
@firebase/firestore:       âœ” converts target change with no_change (omitted in JSON)
@firebase/firestore:       âœ” converts target change with snapshot version
@firebase/firestore:       âœ” converts document change with target ids
@firebase/firestore:       âœ” converts document change with removed target ids
@firebase/firestore:       âœ” converts document change with deletions
@firebase/firestore:       âœ” converts document removes
@firebase/firestore:   Bundles:
@firebase/firestore:     âœ” (Persistence) Newer docs from bundles should overwrite cache
@firebase/firestore:     âœ” (Memory) Newer docs from bundles should overwrite cache
@firebase/firestore:     âœ” (Persistence) Newer deleted docs from bundles should delete cached docs
@firebase/firestore:     âœ” (Memory) Newer deleted docs from bundles should delete cached docs
@firebase/firestore:     âœ” (Persistence) Older deleted docs from bundles should do nothing
@firebase/firestore:     âœ” (Memory) Older deleted docs from bundles should do nothing
@firebase/firestore:     âœ” (Persistence) Newer docs from bundles should raise snapshot only when Watch catches up with acknowledged writes
@firebase/firestore:     âœ” (Memory) Newer docs from bundles should raise snapshot only when Watch catches up with acknowledged writes
@firebase/firestore:     âœ” (Persistence) Newer docs from bundles should keep not raise snapshot if there are unacknowledged writes
@firebase/firestore:     âœ” (Memory) Newer docs from bundles should keep not raise snapshot if there are unacknowledged writes
@firebase/firestore:     âœ” (Persistence) Newer docs from bundles might lead to limbo doc
@firebase/firestore:     âœ” (Memory) Newer docs from bundles might lead to limbo doc
@firebase/firestore:     âœ” (Persistence) Bundles query can be resumed from same query.
@firebase/firestore:     âœ” (Memory) Bundles query can be resumed from same query.
@firebase/firestore:     âœ” (Persistence) Bundles query can be loaded and resumed from different tabs
@firebase/firestore:     âœ– (Memory) Bundles query can be loaded and resumed from different tabs (skipped)
@firebase/firestore:     âœ” (Persistence) Load from secondary clients and observe from primary
@firebase/firestore:     âœ– (Memory) Load from secondary clients and observe from primary (skipped)
@firebase/firestore:     âœ” (Persistence) Load and observe from same secondary client
@firebase/firestore:     âœ– (Memory) Load and observe from same secondary client (skipped)
@firebase/firestore:     âœ” (Persistence) Load from primary client and observe from secondary
@firebase/firestore:     âœ– (Memory) Load from primary client and observe from secondary (skipped)
@firebase/firestore:   Collections:
@firebase/firestore:     âœ” (Persistence) Events are raised after watch ack
@firebase/firestore:     âœ” (Memory) Events are raised after watch ack
@firebase/firestore:     âœ” (Persistence) Events are raised for local sets before watch ack
@firebase/firestore:     âœ” (Memory) Events are raised for local sets before watch ack
@firebase/firestore:   Existence Filters:
@firebase/firestore:     âœ” (Persistence) Existence filter match
@firebase/firestore:     âœ” (Memory) Existence filter match
@firebase/firestore:     âœ” (Persistence) Existence filter match after pending update
@firebase/firestore:     âœ” (Memory) Existence filter match after pending update
@firebase/firestore:     âœ” (Persistence) Existence filter with empty target
@firebase/firestore:     âœ” (Memory) Existence filter with empty target
@firebase/firestore:     âœ” (Persistence) Existence filter ignored with pending target
@firebase/firestore:     âœ” (Memory) Existence filter ignored with pending target
@firebase/firestore:     âœ” (Persistence) Existence filter mismatch triggers re-run of query
@firebase/firestore:     âœ” (Memory) Existence filter mismatch triggers re-run of query
@firebase/firestore:     âœ” (Persistence) Existence filter mismatch will drop resume token
@firebase/firestore:     âœ” (Memory) Existence filter mismatch will drop resume token
@firebase/firestore:     âœ” (Persistence) Existence filter handled at global snapshot
@firebase/firestore:     âœ” (Memory) Existence filter handled at global snapshot
@firebase/firestore:     âœ” (Persistence) Existence filter synthesizes deletes
@firebase/firestore:     âœ” (Memory) Existence filter synthesizes deletes
@firebase/firestore:     âœ” (Persistence) Existence filter limbo resolution is denied
@firebase/firestore:     âœ” (Memory) Existence filter limbo resolution is denied
@firebase/firestore:     âœ” (Persistence) Existence filter clears resume token
@firebase/firestore:     âœ– (Memory) Existence filter clears resume token (skipped)
@firebase/firestore:     âœ” (Persistence) Full re-query is skipped when bloom filter can identify documents deleted
@firebase/firestore:     âœ” (Memory) Full re-query is skipped when bloom filter can identify documents deleted
@firebase/firestore:     âœ” (Persistence) Full re-query is triggered when bloom filter cannot identify documents deleted
@firebase/firestore:     âœ” (Memory) Full re-query is triggered when bloom filter cannot identify documents deleted
@firebase/firestore:     âœ” (Persistence) Bloom filter can process special characters in document name
@firebase/firestore:     âœ” (Memory) Bloom filter can process special characters in document name
@firebase/firestore: WARN: '[2025-03-04T22:53:34.677Z]  @firebase/firestore:', 'Firestore (11.3.0): BloomFilter error: ', '{"name":"BloomFilterError"}'
@firebase/firestore: WARN: '[2025-03-04T22:53:34.677Z]  @firebase/firestore:', 'Firestore (11.3.0): BloomFilter error: ', '{"name":"BloomFilterError"}'
@firebase/firestore:     âœ” (Persistence) Bloom filter fills in default values for undefined padding and hashCount
@firebase/firestore: WARN: '[2025-03-04T22:53:34.679Z]  @firebase/firestore:', 'Firestore (11.3.0): BloomFilter error: ', '{"name":"BloomFilterError"}'
@firebase/firestore: WARN: '[2025-03-04T22:53:34.679Z]  @firebase/firestore:', 'Firestore (11.3.0): BloomFilter error: ', '{"name":"BloomFilterError"}'
@firebase/firestore:     âœ” (Memory) Bloom filter fills in default values for undefined padding and hashCount
@firebase/firestore: WARN: '[2025-03-04T22:53:34.685Z]  @firebase/firestore:', 'Firestore (11.3.0): Decoding the base64 bloom filter in existence filter failed (Invalid base64 string: InvalidCharacterError: Failed to execute 'atob' on 'Window': The string to be decoded is not correctly encoded.); ignoring the bloom filter and falling back to full re-query.'
@firebase/firestore: WARN: '[2025-03-04T22:53:34.685Z]  @firebase/firestore:', 'Firestore (11.3.0): Decoding the base64 bloom filter in existence filter failed (Invalid base64 string: InvalidCharacterError: Failed to execute 'atob' on 'Window': The string to be decoded is not correctly encoded.); ignoring the bloom filter and falling back to full re-query.'
@firebase/firestore:     âœ” (Persistence) Full re-query is triggered when bloom filter bitmap is invalid
@firebase/firestore: WARN: '[2025-03-04T22:53:34.691Z]  @firebase/firestore:', 'Firestore (11.3.0): Decoding the base64 bloom filter in existence filter failed (Invalid base64 string: InvalidCharacterError: Failed to execute 'atob' on 'Window': The string to be decoded is not correctly encoded.); ignoring the bloom filter and falling back to full re-query.'
@firebase/firestore: WARN: '[2025-03-04T22:53:34.691Z]  @firebase/firestore:', 'Firestore (11.3.0): Decoding the base64 bloom filter in existence filter failed (Invalid base64 string: InvalidCharacterError: Failed to execute 'atob' on 'Window': The string to be decoded is not correctly encoded.); ignoring the bloom filter and falling back to full re-query.'
@firebase/firestore:     âœ” (Memory) Full re-query is triggered when bloom filter bitmap is invalid
@firebase/firestore: WARN: '[2025-03-04T22:53:34.697Z]  @firebase/firestore:', 'Firestore (11.3.0): BloomFilter error: ', '{"name":"BloomFilterError"}'
@firebase/firestore: WARN: '[2025-03-04T22:53:34.697Z]  @firebase/firestore:', 'Firestore (11.3.0): BloomFilter error: ', '{"name":"BloomFilterError"}'
@firebase/firestore:     âœ” (Persistence) Full re-query is triggered when bloom filter hashCount is invalid
@firebase/firestore: WARN: '[2025-03-04T22:53:34.701Z]  @firebase/firestore:', 'Firestore (11.3.0): BloomFilter error: ', '{"name":"BloomFilterError"}'
@firebase/firestore: WARN: '[2025-03-04T22:53:34.701Z]  @firebase/firestore:', 'Firestore (11.3.0): BloomFilter error: ', '{"name":"BloomFilterError"}'
@firebase/firestore:     âœ” (Memory) Full re-query is triggered when bloom filter hashCount is invalid
@firebase/firestore:     âœ” (Persistence) Full re-query is triggered when bloom filter is empty
@firebase/firestore:     âœ” (Memory) Full re-query is triggered when bloom filter is empty
@firebase/firestore:     âœ” (Persistence) Same documents can have different bloom filters
@firebase/firestore:     âœ” (Memory) Same documents can have different bloom filters
@firebase/firestore:     âœ” (Persistence) Bloom filter is handled at global snapshot
@firebase/firestore:     âœ” (Memory) Bloom filter is handled at global snapshot
@firebase/firestore:     âœ” (Persistence) Bloom filter limbo resolution is denied
@firebase/firestore:     âœ” (Memory) Bloom filter limbo resolution is denied
@firebase/firestore:     âœ” (Persistence) Bloom filter with large size works as expected
@firebase/firestore:     âœ” (Memory) Bloom filter with large size works as expected
@firebase/firestore:     âœ” (Persistence) Resume a query with bloom filter when there is no document changes
@firebase/firestore:     âœ” (Memory) Resume a query with bloom filter when there is no document changes
@firebase/firestore:     âœ” (Persistence) Resume a query with bloom filter when new documents are added
@firebase/firestore:     âœ” (Memory) Resume a query with bloom filter when new documents are added
@firebase/firestore:     âœ” (Persistence) Resume a query with bloom filter when existing docs are updated
@firebase/firestore:     âœ” (Memory) Resume a query with bloom filter when existing docs are updated
@firebase/firestore:     âœ” (Persistence) Resume a query with bloom filter when documents are updated to no longer match the query
@firebase/firestore:     âœ” (Memory) Resume a query with bloom filter when documents are updated to no longer match the query
@firebase/firestore:     âœ” (Persistence) Resume a query with bloom filter when documents are added, removed and deleted
@firebase/firestore:     âœ” (Memory) Resume a query with bloom filter when documents are added, removed and deleted
@firebase/firestore:   Garbage Collection:
@firebase/firestore:     âœ– (Persistence) Contents of query are cleared when listen is removed. (skipped)
@firebase/firestore:     âœ” (Memory) Contents of query are cleared when listen is removed.
@firebase/firestore:     âœ” (Persistence) Contents of query are kept after listen is removed.
@firebase/firestore:     âœ” (Memory) Contents of query are kept after listen is removed.
@firebase/firestore:     âœ” (Persistence) Contents of query are kept after listen is removed, and GC threshold is not reached
@firebase/firestore:     âœ” (Memory) Contents of query are kept after listen is removed, and GC threshold is not reached
@firebase/firestore:     âœ” (Persistence) Contents of query are removed after listen is removed, and GC threshold is reached
@firebase/firestore:     âœ” (Memory) Contents of query are removed after listen is removed, and GC threshold is reached
@firebase/firestore:     âœ” (Persistence) Contents of active query are kept while inactive results are removed after GC
@firebase/firestore:     âœ” (Memory) Contents of active query are kept while inactive results are removed after GC
@firebase/firestore:   Client Side Index
@firebase/firestore:     âœ” (Persistence) Index Creation visible on all clients
@firebase/firestore:     âœ– (Memory) Index Creation visible on all clients (skipped)
@firebase/firestore:     âœ” (Persistence) Index Creation succeeds even if not primary
@firebase/firestore:     âœ– (Memory) Index Creation succeeds even if not primary (skipped)
@firebase/firestore:   Limbo Documents:
@firebase/firestore:     âœ” (Persistence) Limbo documents are deleted without an existence filter
@firebase/firestore:     âœ” (Memory) Limbo documents are deleted without an existence filter
@firebase/firestore:     âœ” (Persistence) Limbo documents are deleted with an existence filter
@firebase/firestore:     âœ” (Memory) Limbo documents are deleted with an existence filter
@firebase/firestore:     âœ” (Persistence) Limbo documents are resolved with updates
@firebase/firestore:     âœ” (Memory) Limbo documents are resolved with updates
@firebase/firestore:     âœ” (Persistence) Limbo documents are resolved with updates in different snapshot than "current"
@firebase/firestore:     âœ” (Memory) Limbo documents are resolved with updates in different snapshot than "current"
@firebase/firestore:     âœ” (Persistence) Document remove message will cause docs to go in limbo
@firebase/firestore:     âœ” (Memory) Document remove message will cause docs to go in limbo
@firebase/firestore:     âœ” (Persistence) Limbo resolution handles snapshot before CURRENT
@firebase/firestore:     âœ” (Memory) Limbo resolution handles snapshot before CURRENT
@firebase/firestore:     âœ” (Persistence) Limbo resolution handles snapshot before CURRENT [no document update]
@firebase/firestore:     âœ” (Memory) Limbo resolution handles snapshot before CURRENT [no document update]
@firebase/firestore:     âœ” (Persistence) Failed limbo resolution removes document from view
@firebase/firestore:     âœ” (Memory) Failed limbo resolution removes document from view
@firebase/firestore:     âœ” (Persistence) Limbo docs are resolved by primary client
@firebase/firestore:     âœ– (Memory) Limbo docs are resolved by primary client (skipped)
@firebase/firestore:     âœ” (Persistence) Limbo documents are resolved after primary tab failover
@firebase/firestore:     âœ– (Memory) Limbo documents are resolved after primary tab failover (skipped)
@firebase/firestore:     âœ” (Persistence) Limbo documents survive primary state transitions
@firebase/firestore:     âœ– (Memory) Limbo documents survive primary state transitions (skipped)
@firebase/firestore:     âœ” (Persistence) Limbo documents stay consistent between views
@firebase/firestore:     âœ” (Memory) Limbo documents stay consistent between views
@firebase/firestore:     âœ” (Persistence) LimitToLast query from secondary results in no expected limbo doc
@firebase/firestore:     âœ– (Memory) LimitToLast query from secondary results in no expected limbo doc (skipped)
@firebase/firestore:     âœ” (Persistence) LimitToLast query from secondary results in expected limbo doc
@firebase/firestore:     âœ– (Memory) LimitToLast query from secondary results in expected limbo doc (skipped)
@firebase/firestore:     âœ” (Persistence) Limbo resolution throttling with all results at once from watch
@firebase/firestore:     âœ” (Memory) Limbo resolution throttling with all results at once from watch
@firebase/firestore:     âœ” (Persistence) Limbo resolution throttling with results one at a time from watch
@firebase/firestore:     âœ” (Memory) Limbo resolution throttling with results one at a time from watch
@firebase/firestore:     âœ” (Persistence) Limbo resolution throttling when a limbo listen is rejected.
@firebase/firestore:     âœ” (Memory) Limbo resolution throttling when a limbo listen is rejected.
@firebase/firestore:     âœ” (Persistence) Limbo resolution throttling with existence filter mismatch
@firebase/firestore:     âœ” (Memory) Limbo resolution throttling with existence filter mismatch
@firebase/firestore:     âœ” (Persistence) Limbo resolution should wait for full re-query result if there is an existence filter mismatch 
@firebase/firestore:     âœ” (Memory) Limbo resolution should wait for full re-query result if there is an existence filter mismatch 
@firebase/firestore:     âœ” (Persistence) Limbo resolution throttling with bloom filter application
@firebase/firestore:     âœ” (Memory) Limbo resolution throttling with bloom filter application
@firebase/firestore:     âœ” (Persistence) A limbo resolution for a document should not be started if one is already active
@firebase/firestore:     âœ” (Memory) A limbo resolution for a document should not be started if one is already active
@firebase/firestore:     âœ” (Persistence) A limbo resolution for a document should not be enqueued if one is already enqueued
@firebase/firestore:     âœ” (Memory) A limbo resolution for a document should not be enqueued if one is already enqueued
@firebase/firestore:     âœ” (Persistence) A limbo resolution for a document should be removed from the queue when the last query listen stops
@firebase/firestore:     âœ” (Memory) A limbo resolution for a document should be removed from the queue when the last query listen stops
@firebase/firestore:     âœ” (Persistence) Fix #8474 - Limbo resolution for document is removed even if document updates for the document occurred before documentDelete in the global snapshot window
@firebase/firestore:     âœ” (Memory) Fix #8474 - Limbo resolution for document is removed even if document updates for the document occurred before documentDelete in the global snapshot window
@firebase/firestore:     âœ” (Persistence) Fix #8474 - Limbo resolution for document is removed even if document updates for the document occurred in the global snapshot window and no document delete was received for the limbo resolution query
@firebase/firestore:     âœ” (Memory) Fix #8474 - Limbo resolution for document is removed even if document updates for the document occurred in the global snapshot window and no document delete was received for the limbo resolution query
@firebase/firestore:     âœ” (Persistence) Fix #8474 - Handles code path of no ack for limbo resolution query before global snapshot
@firebase/firestore:     âœ” (Memory) Fix #8474 - Handles code path of no ack for limbo resolution query before global snapshot
@firebase/firestore:   Limits:
@firebase/firestore:     âœ” (Persistence) Documents in limit are replaced by remote event
@firebase/firestore:     âœ” (Memory) Documents in limit are replaced by remote event
@firebase/firestore:     âœ” (Persistence) Documents outside of limit don't raise hasPendingWrites
@firebase/firestore:     âœ” (Memory) Documents outside of limit don't raise hasPendingWrites
@firebase/firestore:     âœ” (Persistence) Deleted Document in limbo in full limit query
@firebase/firestore:     âœ” (Memory) Deleted Document in limbo in full limit query
@firebase/firestore:     âœ” (Persistence) Documents in limit can handle removed messages
@firebase/firestore:     âœ” (Memory) Documents in limit can handle removed messages
@firebase/firestore:     âœ” (Persistence) Documents in limit are can handle removed messages for only one of many query
@firebase/firestore:     âœ” (Memory) Documents in limit are can handle removed messages for only one of many query
@firebase/firestore:     âœ” (Persistence) Limits are re-filled from cache
@firebase/firestore:     âœ” (Memory) Limits are re-filled from cache
@firebase/firestore:     âœ” (Persistence) Initial snapshots for limit queries are re-filled from cache (with removal)
@firebase/firestore:     âœ” (Memory) Initial snapshots for limit queries are re-filled from cache (with removal)
@firebase/firestore:     âœ” (Persistence) Initial snapshots for limit queries are re-filled from cache (with latency-compensated edit)
@firebase/firestore:     âœ” (Memory) Initial snapshots for limit queries are re-filled from cache (with latency-compensated edit)
@firebase/firestore:     âœ” (Persistence) Initial snapshots for limit queries are re-filled from cache (with update from backend)
@firebase/firestore:     âœ” (Memory) Initial snapshots for limit queries are re-filled from cache (with update from backend)
@firebase/firestore:     âœ” (Persistence) Resumed limit queries exclude deleted documents 
@firebase/firestore:     âœ– (Memory) Resumed limit queries exclude deleted documents  (skipped)
@firebase/firestore:     âœ” (Persistence) Resumed limit queries use updated documents 
@firebase/firestore:     âœ” (Memory) Resumed limit queries use updated documents 
@firebase/firestore:     âœ” (Persistence) Multiple docs in limbo in full limit query
@firebase/firestore:     âœ” (Memory) Multiple docs in limbo in full limit query
@firebase/firestore:     âœ” (Persistence) Limit query is refilled by primary client
@firebase/firestore:     âœ– (Memory) Limit query is refilled by primary client (skipped)
@firebase/firestore:     âœ” (Persistence) Limit query includes write from secondary client 
@firebase/firestore:     âœ– (Memory) Limit query includes write from secondary client  (skipped)
@firebase/firestore:   Listens source options:
@firebase/firestore:     âœ– (Persistence) Contents of query are cleared when listen is removed. (skipped)
@firebase/firestore:     âœ” (Memory) Contents of query are cleared when listen is removed.
@firebase/firestore:     âœ– (Persistence) Documents are cleared when listen is removed. (skipped)
@firebase/firestore:     âœ” (Memory) Documents are cleared when listen is removed.
@firebase/firestore:     âœ” (Persistence) Doesn't include unknown documents in cached result
@firebase/firestore:     âœ” (Memory) Doesn't include unknown documents in cached result
@firebase/firestore:     âœ” (Persistence) Doesn't raise 'hasPendingWrites' for deletes
@firebase/firestore:     âœ” (Memory) Doesn't raise 'hasPendingWrites' for deletes
@firebase/firestore:     âœ” (Persistence) onSnapshotsInSync fires for multiple listeners
@firebase/firestore:     âœ” (Memory) onSnapshotsInSync fires for multiple listeners
@firebase/firestore:     âœ” (Persistence) Empty initial snapshot is raised from cache
@firebase/firestore:     âœ” (Memory) Empty initial snapshot is raised from cache
@firebase/firestore:     âœ” (Persistence) Empty-due-to-delete initial snapshot is raised from cache
@firebase/firestore:     âœ” (Memory) Empty-due-to-delete initial snapshot is raised from cache
@firebase/firestore:     âœ” (Persistence) Newer docs from bundles should overwrite cache
@firebase/firestore:     âœ” (Memory) Newer docs from bundles should overwrite cache
@firebase/firestore:     âœ” (Persistence) Newer deleted docs from bundles should delete cached docs
@firebase/firestore:     âœ” (Memory) Newer deleted docs from bundles should delete cached docs
@firebase/firestore:     âœ” (Persistence) Older deleted docs from bundles should do nothing
@firebase/firestore:     âœ” (Memory) Older deleted docs from bundles should do nothing
@firebase/firestore:     âœ” (Persistence) Newer docs from bundles should keep not raise snapshot if there are unacknowledged writes
@firebase/firestore:     âœ” (Memory) Newer docs from bundles should keep not raise snapshot if there are unacknowledged writes
@firebase/firestore:     âœ” (Persistence) Newer docs from bundles should raise snapshot only when Watch catches up with acknowledged writes
@firebase/firestore:     âœ” (Memory) Newer docs from bundles should raise snapshot only when Watch catches up with acknowledged writes
@firebase/firestore:     âœ” (Persistence) Primary client should not invoke watch request while all clients are listening to cache
@firebase/firestore:     âœ– (Memory) Primary client should not invoke watch request while all clients are listening to cache (skipped)
@firebase/firestore:     âœ” (Persistence) Local mutations notifies listeners sourced from cache in all tabs
@firebase/firestore:     âœ– (Memory) Local mutations notifies listeners sourced from cache in all tabs (skipped)
@firebase/firestore:     âœ” (Persistence) Listeners with different source shares watch changes between primary and secondary clients
@firebase/firestore:     âœ– (Memory) Listeners with different source shares watch changes between primary and secondary clients (skipped)
@firebase/firestore:     âœ” (Persistence) Clients can have multiple listeners with different sources
@firebase/firestore:     âœ– (Memory) Clients can have multiple listeners with different sources (skipped)
@firebase/firestore:     âœ” (Persistence) Query is executed by primary client even if primary client only has listeners sourced from cache
@firebase/firestore:     âœ– (Memory) Query is executed by primary client even if primary client only has listeners sourced from cache (skipped)
@firebase/firestore:     âœ” (Persistence) Query only raises events in participating clients
@firebase/firestore:     âœ– (Memory) Query only raises events in participating clients (skipped)
@firebase/firestore:     âœ” (Persistence) Mirror queries being listened in different clients sourced from cache 
@firebase/firestore:     âœ– (Memory) Mirror queries being listened in different clients sourced from cache  (skipped)
@firebase/firestore:     âœ” (Persistence) Mirror queries being listened in the same secondary client sourced from cache
@firebase/firestore:     âœ– (Memory) Mirror queries being listened in the same secondary client sourced from cache (skipped)
@firebase/firestore:     âœ” (Persistence) Mirror queries being listened from different sources while listening to server in primary tab
@firebase/firestore:     âœ– (Memory) Mirror queries being listened from different sources while listening to server in primary tab (skipped)
@firebase/firestore:     âœ” (Persistence) Mirror queries from different sources while listening to server in secondary tab
@firebase/firestore:     âœ– (Memory) Mirror queries from different sources while listening to server in secondary tab (skipped)
@firebase/firestore:     âœ” (Persistence) Un-listen to listeners from different source
@firebase/firestore:     âœ– (Memory) Un-listen to listeners from different source (skipped)
@firebase/firestore:   Listens:
@firebase/firestore:     âœ– (Persistence) Contents of query are cleared when listen is removed. (skipped)
@firebase/firestore:     âœ” (Memory) Contents of query are cleared when listen is removed.
@firebase/firestore:     âœ– (Persistence) Documents outside of view are cleared when listen is removed. (skipped)
@firebase/firestore:     âœ” (Memory) Documents outside of view are cleared when listen is removed.
@firebase/firestore:     âœ” (Persistence) Contents of query update when new data is received.
@firebase/firestore:     âœ” (Memory) Contents of query update when new data is received.
@firebase/firestore:     âœ” (Persistence) Doesn't raise events for empty target
@firebase/firestore:     âœ” (Memory) Doesn't raise events for empty target
@firebase/firestore:     âœ” (Persistence) Doesn't include unknown documents in cached result
@firebase/firestore:     âœ” (Memory) Doesn't include unknown documents in cached result
@firebase/firestore:     âœ” (Persistence) Doesn't raise 'hasPendingWrites' for deletes
@firebase/firestore:     âœ” (Memory) Doesn't raise 'hasPendingWrites' for deletes
@firebase/firestore:     âœ” (Persistence) Ensure correct query results with latency-compensated deletes
@firebase/firestore:     âœ” (Memory) Ensure correct query results with latency-compensated deletes
@firebase/firestore:     âœ” (Persistence) Does not raise event for initial document delete
@firebase/firestore:     âœ” (Memory) Does not raise event for initial document delete
@firebase/firestore:     âœ” (Persistence) Will process removals without waiting for a consistent snapshot
@firebase/firestore:     âœ” (Memory) Will process removals without waiting for a consistent snapshot
@firebase/firestore:     âœ” (Persistence) Will re-issue listen for errored target
@firebase/firestore:     âœ” (Memory) Will re-issue listen for errored target
@firebase/firestore:     âœ” (Persistence) Will gracefully process failed targets
@firebase/firestore:     âœ” (Memory) Will gracefully process failed targets
@firebase/firestore:     âœ” (Persistence) Will gracefully handle watch stream reverting snapshots
@firebase/firestore:     âœ” (Memory) Will gracefully handle watch stream reverting snapshots
@firebase/firestore:     âœ” (Persistence) Will gracefully handle watch stream reverting snapshots (with restart)
@firebase/firestore:     âœ– (Memory) Will gracefully handle watch stream reverting snapshots (with restart) (skipped)
@firebase/firestore:     âœ” (Persistence) Individual documents cannot revert
@firebase/firestore:     âœ” (Memory) Individual documents cannot revert
@firebase/firestore:     âœ” (Persistence) Individual (deleted) documents cannot revert
@firebase/firestore:     âœ” (Memory) Individual (deleted) documents cannot revert
@firebase/firestore:     âœ” (Persistence) Waits until Watch catches up to local deletes 
@firebase/firestore:     âœ” (Memory) Waits until Watch catches up to local deletes 
@firebase/firestore:     âœ” (Persistence) Listens are reestablished after network disconnect
@firebase/firestore:     âœ” (Memory) Listens are reestablished after network disconnect
@firebase/firestore:     âœ” (Persistence) Synthesizes deletes for missing document
@firebase/firestore:     âœ” (Memory) Synthesizes deletes for missing document
@firebase/firestore:     âœ” (Persistence) Re-opens target without existence filter
@firebase/firestore:     âœ” (Memory) Re-opens target without existence filter
@firebase/firestore:     âœ” (Persistence) Ignores update from inactive target
@firebase/firestore:     âœ” (Memory) Ignores update from inactive target
@firebase/firestore:     âœ” (Persistence) Does not synthesize deletes for previously acked documents
@firebase/firestore:     âœ” (Memory) Does not synthesize deletes for previously acked documents
@firebase/firestore:     âœ” (Persistence) Query is rejected and re-listened to
@firebase/firestore:     âœ” (Memory) Query is rejected and re-listened to
@firebase/firestore:     âœ” (Persistence) Persists resume token sent with target
@firebase/firestore:     âœ” (Memory) Persists resume token sent with target
@firebase/firestore:     âœ” (Persistence) Array-contains queries support resuming
@firebase/firestore:     âœ” (Memory) Array-contains queries support resuming
@firebase/firestore:     âœ” (Persistence) Persists global resume tokens on unlisten
@firebase/firestore:     âœ” (Memory) Persists global resume tokens on unlisten
@firebase/firestore:     âœ” (Persistence) Omits global resume tokens for a short while
@firebase/firestore:     âœ– (Memory) Omits global resume tokens for a short while (skipped)
@firebase/firestore:     âœ” (Persistence) Persists global resume tokens if the snapshot is old enough
@firebase/firestore:     âœ– (Memory) Persists global resume tokens if the snapshot is old enough (skipped)
@firebase/firestore:     âœ” (Persistence) Query is executed by primary client
@firebase/firestore:     âœ– (Memory) Query is executed by primary client (skipped)
@firebase/firestore:     âœ” (Persistence) Query is shared between primary and secondary client
@firebase/firestore:     âœ– (Memory) Query is shared between primary and secondary client (skipped)
@firebase/firestore:     âœ” (Persistence) Query is joined by primary client
@firebase/firestore:     âœ– (Memory) Query is joined by primary client (skipped)
@firebase/firestore:     âœ” (Persistence) Query only raises events in participating clients
@firebase/firestore:     âœ– (Memory) Query only raises events in participating clients (skipped)
@firebase/firestore:     âœ” (Persistence) Query is unlistened to by primary client
@firebase/firestore:     âœ– (Memory) Query is unlistened to by primary client (skipped)
@firebase/firestore:     âœ” (Persistence) Query is resumed by secondary client
@firebase/firestore:     âœ– (Memory) Query is resumed by secondary client (skipped)
@firebase/firestore:     âœ” (Persistence) Query is rejected by primary client
@firebase/firestore:     âœ– (Memory) Query is rejected by primary client (skipped)
@firebase/firestore:     âœ” (Persistence) Query is rejected and re-listened to by secondary client
@firebase/firestore:     âœ– (Memory) Query is rejected and re-listened to by secondary client (skipped)
@firebase/firestore:     âœ” (Persistence) Secondary client raises latency compensated snapshot from primary mutation
@firebase/firestore:     âœ– (Memory) Secondary client raises latency compensated snapshot from primary mutation (skipped)
@firebase/firestore:     âœ– (Persistence) Secondary client advances query state with global snapshot from primary (skipped)
@firebase/firestore:     âœ– (Memory) Secondary client advances query state with global snapshot from primary (skipped)
@firebase/firestore:     âœ” (Persistence) Mirror queries from same secondary client
@firebase/firestore:     âœ– (Memory) Mirror queries from same secondary client (skipped)
@firebase/firestore:     âœ” (Persistence) Mirror queries from different secondary client
@firebase/firestore:     âœ– (Memory) Mirror queries from different secondary client (skipped)
@firebase/firestore:     âœ” (Persistence) Mirror queries from primary and secondary client
@firebase/firestore:     âœ– (Memory) Mirror queries from primary and secondary client (skipped)
@firebase/firestore:     âœ” (Persistence) Can listen/unlisten to mirror queries.
@firebase/firestore:     âœ” (Memory) Can listen/unlisten to mirror queries.
@firebase/firestore:     âœ” (Persistence) Secondary client uses primary client's online state
@firebase/firestore:     âœ– (Memory) Secondary client uses primary client's online state (skipped)
@firebase/firestore:     âœ” (Persistence) New client uses existing online state
@firebase/firestore:     âœ– (Memory) New client uses existing online state (skipped)
@firebase/firestore:     âœ” (Persistence) New client becomes primary if no client has its network enabled
@firebase/firestore:     âœ– (Memory) New client becomes primary if no client has its network enabled (skipped)
@firebase/firestore:     âœ” (Persistence) Secondary client's online state is ignored
@firebase/firestore:     âœ– (Memory) Secondary client's online state is ignored (skipped)
@firebase/firestore:     âœ” (Persistence) Offline state doesn't persist if primary is shut down
@firebase/firestore:     âœ– (Memory) Offline state doesn't persist if primary is shut down (skipped)
@firebase/firestore:     âœ” (Persistence) Listen is re-listened to after primary tab failover
@firebase/firestore:     âœ– (Memory) Listen is re-listened to after primary tab failover (skipped)
@firebase/firestore:     âœ” (Persistence) Listen is established in new primary tab
@firebase/firestore:     âœ– (Memory) Listen is established in new primary tab (skipped)
@firebase/firestore:     âœ” (Persistence) Query recovers after primary takeover
@firebase/firestore:     âœ– (Memory) Query recovers after primary takeover (skipped)
@firebase/firestore: ERROR: '[2025-03-04T22:53:36.323Z]  @firebase/firestore:', 'Firestore (11.3.0): Failed to obtain primary lease for action 'Release target'.'
@firebase/firestore: ERROR: '[2025-03-04T22:53:36.323Z]  @firebase/firestore:', 'Firestore (11.3.0): Failed to obtain primary lease for action 'Release target'.'
@firebase/firestore:     âœ” (Persistence) Query bounces between primaries
@firebase/firestore:     âœ– (Memory) Query bounces between primaries (skipped)
@firebase/firestore: ERROR: '[2025-03-04T22:53:36.339Z]  @firebase/firestore:', 'Firestore (11.3.0): Failed to obtain primary lease for action 'Apply remote event'.'
@firebase/firestore: ERROR: '[2025-03-04T22:53:36.339Z]  @firebase/firestore:', 'Firestore (11.3.0): Failed to obtain primary lease for action 'Apply remote event'.'
@firebase/firestore:     âœ” (Persistence) Unresponsive primary ignores watch update
@firebase/firestore:     âœ– (Memory) Unresponsive primary ignores watch update (skipped)
@firebase/firestore:     âœ” (Persistence) Listen is established in newly started primary
@firebase/firestore:     âœ– (Memory) Listen is established in newly started primary (skipped)
@firebase/firestore:     âœ” (Persistence) Previous primary immediately regains primary lease
@firebase/firestore:     âœ– (Memory) Previous primary immediately regains primary lease (skipped)
@firebase/firestore:     âœ” (Persistence) onSnapshotsInSync should not fire for doc changes if there are no listeners
@firebase/firestore:     âœ” (Memory) onSnapshotsInSync should not fire for doc changes if there are no listeners
@firebase/firestore:     âœ” (Persistence) onSnapshotsInSync fires when called even if there are no local listeners
@firebase/firestore:     âœ” (Memory) onSnapshotsInSync fires when called even if there are no local listeners
@firebase/firestore:     âœ” (Persistence) onSnapshotsInSync fires for metadata changes
@firebase/firestore:     âœ” (Memory) onSnapshotsInSync fires for metadata changes
@firebase/firestore:     âœ” (Persistence) onSnapshotsInSync fires once for multiple event snapshots
@firebase/firestore:     âœ” (Memory) onSnapshotsInSync fires once for multiple event snapshots
@firebase/firestore:     âœ” (Persistence) onSnapshotsInSync fires for multiple listeners
@firebase/firestore:     âœ” (Memory) onSnapshotsInSync fires for multiple listeners
@firebase/firestore:     âœ” (Persistence) Empty initial snapshot is raised from cache
@firebase/firestore:     âœ” (Memory) Empty initial snapshot is raised from cache
@firebase/firestore:     âœ” (Persistence) Empty-due-to-delete initial snapshot is raised from cache
@firebase/firestore:     âœ” (Memory) Empty-due-to-delete initial snapshot is raised from cache
@firebase/firestore:     âœ” (Persistence) Empty initial snapshot is raised from cache in multiple tabs
@firebase/firestore:     âœ– (Memory) Empty initial snapshot is raised from cache in multiple tabs (skipped)
@firebase/firestore:     âœ” (Persistence) Empty-due-to-delete initial snapshot is raised from cache in multiple tabs
@firebase/firestore:     âœ– (Memory) Empty-due-to-delete initial snapshot is raised from cache in multiple tabs (skipped)
@firebase/firestore:     âœ” (Persistence) Resuming a query should specify expectedCount when adding the target
@firebase/firestore:     âœ” (Memory) Resuming a query should specify expectedCount when adding the target
@firebase/firestore:     âœ” (Persistence) Resuming a query should specify expectedCount that does not include pending mutations
@firebase/firestore:     âœ” (Memory) Resuming a query should specify expectedCount that does not include pending mutations
@firebase/firestore:     âœ” (Persistence) ExpectedCount in listen request should work after coming back online
@firebase/firestore:     âœ” (Memory) ExpectedCount in listen request should work after coming back online
@firebase/firestore:     âœ” (Persistence) Global snapshots would not alter query state if there is no changes
@firebase/firestore:     âœ– (Memory) Global snapshots would not alter query state if there is no changes (skipped)
@firebase/firestore: ERROR: '[2025-03-04T22:53:36.513Z]  @firebase/firestore:', 'Firestore (11.3.0): Could not reach Cloud Firestore backend. Connection failed 1 times. Most recent error: FirebaseError: [code=unavailable]: Simulated Backend Error
@firebase/firestore: This typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.'
@firebase/firestore: ERROR: '[2025-03-04T22:53:36.513Z]  @firebase/firestore:', 'Firestore (11.3.0): Could not reach Cloud Firestore backend. Connection failed 1 times. Most recent error: FirebaseError: [code=unavailable]: Simulated Backend Error
@firebase/firestore: This typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.'
@firebase/firestore:   Offline:
@firebase/firestore:     âœ” (Persistence) Empty queries are resolved if client goes offline
@firebase/firestore: ERROR: '[2025-03-04T22:53:36.515Z]  @firebase/firestore:', 'Firestore (11.3.0): Could not reach Cloud Firestore backend. Connection failed 1 times. Most recent error: FirebaseError: [code=unavailable]: Simulated Backend Error
@firebase/firestore: This typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.'
@firebase/firestore: ERROR: '[2025-03-04T22:53:36.515Z]  @firebase/firestore:', 'Firestore (11.3.0): Could not reach Cloud Firestore backend. Connection failed 1 times. Most recent error: FirebaseError: [code=unavailable]: Simulated Backend Error
@firebase/firestore: This typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.'
@firebase/firestore:     âœ” (Memory) Empty queries are resolved if client goes offline
@firebase/firestore:     âœ” (Persistence) A successful message delays offline status
@firebase/firestore:     âœ” (Memory) A successful message delays offline status
@firebase/firestore:     âœ– (Persistence) Removing all listeners delays "Offline" status on next listen (skipped)
@firebase/firestore: ERROR: '[2025-03-04T22:53:36.523Z]  @firebase/firestore:', 'Firestore (11.3.0): Could not reach Cloud Firestore backend. Connection failed 1 times. Most recent error: FirebaseError: [code=unavailable]: Simulated Backend Error
@firebase/firestore: This typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.'
@firebase/firestore: ERROR: '[2025-03-04T22:53:36.523Z]  @firebase/firestore:', 'Firestore (11.3.0): Could not reach Cloud Firestore backend. Connection failed 1 times. Most recent error: FirebaseError: [code=unavailable]: Simulated Backend Error
@firebase/firestore: This typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.'
@firebase/firestore:     âœ” (Memory) Removing all listeners delays "Offline" status on next listen
@firebase/firestore:     âœ” (Persistence) Queries revert to fromCache=true when offline.
@firebase/firestore:     âœ” (Memory) Queries revert to fromCache=true when offline.
@firebase/firestore:     âœ” (Persistence) Queries with limbo documents handle going offline.
@firebase/firestore:     âœ” (Memory) Queries with limbo documents handle going offline.
@firebase/firestore: ERROR: '[2025-03-04T22:53:36.551Z]  @firebase/firestore:', 'Firestore (11.3.0): Could not reach Cloud Firestore backend. Backend didn't respond within 10 seconds.
@firebase/firestore: This typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.'
@firebase/firestore: ERROR: '[2025-03-04T22:53:36.551Z]  @firebase/firestore:', 'Firestore (11.3.0): Could not reach Cloud Firestore backend. Backend didn't respond within 10 seconds.
@firebase/firestore: This typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.'
@firebase/firestore:     âœ” (Persistence) OnlineState timeout triggers offline behavior
@firebase/firestore: ERROR: '[2025-03-04T22:53:36.557Z]  @firebase/firestore:', 'Firestore (11.3.0): Could not reach Cloud Firestore backend. Backend didn't respond within 10 seconds.
@firebase/firestore: This typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.'
@firebase/firestore: ERROR: '[2025-03-04T22:53:36.557Z]  @firebase/firestore:', 'Firestore (11.3.0): Could not reach Cloud Firestore backend. Backend didn't respond within 10 seconds.
@firebase/firestore: This typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.'
@firebase/firestore:     âœ” (Memory) OnlineState timeout triggers offline behavior
@firebase/firestore: ERROR: '[2025-03-04T22:53:36.563Z]  @firebase/firestore:', 'Firestore (11.3.0): Could not reach Cloud Firestore backend. Connection failed 1 times. Most recent error: FirebaseError: [code=unavailable]: Simulated Backend Error
@firebase/firestore: This typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.'
@firebase/firestore: ERROR: '[2025-03-04T22:53:36.563Z]  @firebase/firestore:', 'Firestore (11.3.0): Could not reach Cloud Firestore backend. Connection failed 1 times. Most recent error: FirebaseError: [code=unavailable]: Simulated Backend Error
@firebase/firestore: This typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.'
@firebase/firestore:     âœ” (Persistence) New queries return immediately with fromCache=true when offline due to stream failures.
@firebase/firestore: ERROR: '[2025-03-04T22:53:36.566Z]  @firebase/firestore:', 'Firestore (11.3.0): Could not reach Cloud Firestore backend. Connection failed 1 times. Most recent error: FirebaseError: [code=unavailable]: Simulated Backend Error
@firebase/firestore: This typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.'
@firebase/firestore: ERROR: '[2025-03-04T22:53:36.566Z]  @firebase/firestore:', 'Firestore (11.3.0): Could not reach Cloud Firestore backend. Connection failed 1 times. Most recent error: FirebaseError: [code=unavailable]: Simulated Backend Error
@firebase/firestore: This typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.'
@firebase/firestore:     âœ” (Memory) New queries return immediately with fromCache=true when offline due to stream failures.
@firebase/firestore: ERROR: '[2025-03-04T22:53:36.574Z]  @firebase/firestore:', 'Firestore (11.3.0): Could not reach Cloud Firestore backend. Backend didn't respond within 10 seconds.
@firebase/firestore: This typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.'
@firebase/firestore: ERROR: '[2025-03-04T22:53:36.574Z]  @firebase/firestore:', 'Firestore (11.3.0): Could not reach Cloud Firestore backend. Backend didn't respond within 10 seconds.
@firebase/firestore: This typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.'
@firebase/firestore:     âœ” (Persistence) New queries return immediately with fromCache=true when offline due to OnlineState timeout.
@firebase/firestore: ERROR: '[2025-03-04T22:53:36.577Z]  @firebase/firestore:', 'Firestore (11.3.0): Could not reach Cloud Firestore backend. Backend didn't respond within 10 seconds.
@firebase/firestore: This typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.'
@firebase/firestore: ERROR: '[2025-03-04T22:53:36.577Z]  @firebase/firestore:', 'Firestore (11.3.0): Could not reach Cloud Firestore backend. Backend didn't respond within 10 seconds.
@firebase/firestore: This typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.'
@firebase/firestore:     âœ” (Memory) New queries return immediately with fromCache=true when offline due to OnlineState timeout.
@firebase/firestore:     âœ– (Persistence) Queries return from cache when network disabled (skipped)
@firebase/firestore:     âœ” (Memory) Queries return from cache when network disabled
@firebase/firestore:     âœ” (Persistence) Client stays offline during credential change
@firebase/firestore:     âœ” (Memory) Client stays offline during credential change
@firebase/firestore:   OrderBy:
@firebase/firestore:     âœ” (Persistence) orderBy applies filtering based on local state
@firebase/firestore:     âœ” (Memory) orderBy applies filtering based on local state
@firebase/firestore:     âœ” (Persistence) orderBy applies to existing documents
@firebase/firestore:     âœ” (Memory) orderBy applies to existing documents
@firebase/firestore:   Performance Tests [10 iterations]:
@firebase/firestore:     âœ– (Persistence) Insert a new document (skipped)
@firebase/firestore:     âœ– (Memory) Insert a new document (skipped)
@firebase/firestore:     âœ– (Persistence) Start a listen, write a document, ack the write, handle watch snapshot, unlisten (skipped)
@firebase/firestore:     âœ– (Memory) Start a listen, write a document, ack the write, handle watch snapshot, unlisten (skipped)
@firebase/firestore:     âœ– (Persistence) Write 100 documents and raise a snapshot (skipped)
@firebase/firestore:     âœ– (Memory) Write 100 documents and raise a snapshot (skipped)
@firebase/firestore:     âœ– (Persistence) Update a single document (skipped)
@firebase/firestore:     âœ– (Memory) Update a single document (skipped)
@firebase/firestore:     âœ– (Persistence) Update a document and wait for snapshot with existing listen (skipped)
@firebase/firestore:     âœ– (Memory) Update a document and wait for snapshot with existing listen (skipped)
@firebase/firestore:     âœ– (Persistence) Process 100 documents from Watch and wait for snapshot (skipped)
@firebase/firestore:     âœ– (Memory) Process 100 documents from Watch and wait for snapshot (skipped)
@firebase/firestore:     âœ– (Persistence) Process 100 documents from Watch and wait for snapshot, then unlisten and wait for a cached snapshot (skipped)
@firebase/firestore:     âœ– (Memory) Process 100 documents from Watch and wait for snapshot, then unlisten and wait for a cached snapshot (skipped)
@firebase/firestore:     âœ– (Persistence) Process 25 target updates and wait for snapshot (skipped)
@firebase/firestore:     âœ– (Memory) Process 25 target updates and wait for snapshot (skipped)
@firebase/firestore:     âœ– (Persistence) Add 500 documents, issue 10 queries that return 10 documents each, unlisten (skipped)
@firebase/firestore:     âœ– (Memory) Add 500 documents, issue 10 queries that return 10 documents each, unlisten (skipped)
@firebase/firestore:   Persistence:
@firebase/firestore:     âœ” (Persistence) Local mutations are persisted and re-sent
@firebase/firestore:     âœ– (Memory) Local mutations are persisted and re-sent (skipped)
@firebase/firestore:     âœ” (Persistence) Persisted local mutations are visible to listeners
@firebase/firestore:     âœ– (Memory) Persisted local mutations are visible to listeners (skipped)
@firebase/firestore:     âœ” (Persistence) Remote documents are persisted
@firebase/firestore:     âœ– (Memory) Remote documents are persisted (skipped)
@firebase/firestore:     âœ” (Persistence) Remote documents from watch are not GC'd
@firebase/firestore:     âœ” (Memory) Remote documents from watch are not GC'd
@firebase/firestore:     âœ” (Persistence) Remote documents from user sets are not GC'd
@firebase/firestore:     âœ” (Memory) Remote documents from user sets are not GC'd
@firebase/firestore:     âœ” (Persistence) Mutation Queue is persisted across uid switches
@firebase/firestore:     âœ” (Memory) Mutation Queue is persisted across uid switches
@firebase/firestore:     âœ” (Persistence) Mutation Queue is persisted across uid switches (with restarts)
@firebase/firestore:     âœ– (Memory) Mutation Queue is persisted across uid switches (with restarts) (skipped)
@firebase/firestore:     âœ” (Persistence) Visible mutations reflect uid switches
@firebase/firestore:     âœ” (Memory) Visible mutations reflect uid switches
@firebase/firestore:     âœ” (Persistence) Detects all active clients
@firebase/firestore:     âœ– (Memory) Detects all active clients (skipped)
@firebase/firestore:     âœ” (Persistence) Single tab acquires primary lease
@firebase/firestore:     âœ– (Memory) Single tab acquires primary lease (skipped)
@firebase/firestore:     âœ” (Persistence) Foreground tab acquires primary lease
@firebase/firestore:     âœ– (Memory) Foreground tab acquires primary lease (skipped)
@firebase/firestore:     âœ” (Persistence) Primary lease bound to network state
@firebase/firestore:     âœ– (Memory) Primary lease bound to network state (skipped)
@firebase/firestore:     âœ” (Persistence) clearPersistence() shuts down other clients
@firebase/firestore:     âœ– (Memory) clearPersistence() shuts down other clients (skipped)
@firebase/firestore:   Queries:
@firebase/firestore:     âœ” (Persistence) Collection Group query
@firebase/firestore:     âœ” (Memory) Collection Group query
@firebase/firestore:     âœ” (Persistence) Collection Group query with mutations
@firebase/firestore:     âœ” (Memory) Collection Group query with mutations
@firebase/firestore:     âœ” (Persistence) Latency-compensated updates are included in query results
@firebase/firestore:     âœ” (Memory) Latency-compensated updates are included in query results
@firebase/firestore:     âœ” (Persistence) Queries in different tabs will not interfere
@firebase/firestore:     âœ– (Memory) Queries in different tabs will not interfere (skipped)
@firebase/firestore:   Persistence Recovery
@firebase/firestore:     âœ” (Persistence) Write is acknowledged by primary client (with recovery)
@firebase/firestore:     âœ– (Memory) Write is acknowledged by primary client (with recovery) (skipped)
@firebase/firestore:     âœ” (Persistence) Clients fail to lookup mutations (with recovery)
@firebase/firestore:     âœ– (Memory) Clients fail to lookup mutations (with recovery) (skipped)
@firebase/firestore:     âœ” (Persistence) Query raises events in secondary client (with recovery)
@firebase/firestore:     âœ– (Memory) Query raises events in secondary client (with recovery) (skipped)
@firebase/firestore:     âœ” (Persistence) Query is listened to by primary (with recovery)
@firebase/firestore:     âœ– (Memory) Query is listened to by primary (with recovery) (skipped)
@firebase/firestore:     âœ” (Persistence) Query with active view recovers after primary tab failover (with recovery)
@firebase/firestore:     âœ– (Memory) Query with active view recovers after primary tab failover (with recovery) (skipped)
@firebase/firestore:     âœ” (Persistence) Query without active view recovers after primary tab failover (with recovery)
@firebase/firestore:     âœ– (Memory) Query without active view recovers after primary tab failover (with recovery) (skipped)
@firebase/firestore:     âœ” (Persistence) Ignores intermittent lease refresh failures (with recovery)
@firebase/firestore:     âœ– (Memory) Ignores intermittent lease refresh failures (with recovery) (skipped)
@firebase/firestore: ERROR: '[2025-03-04T22:53:36.895Z]  @firebase/firestore:', 'Firestore (11.3.0): AsyncQueue', 'Failed to persist write: IndexedDbTransactionError: [code=unavailable]: IndexedDB transaction 'Simulated error' failed: Error: Simulated retryable error: Locally write mutations'
@firebase/firestore: ERROR: '[2025-03-04T22:53:36.895Z]  @firebase/firestore:', 'Firestore (11.3.0): AsyncQueue', 'Failed to persist write: IndexedDbTransactionError: [code=unavailable]: IndexedDB transaction 'Simulated error' failed: Error: Simulated retryable error: Locally write mutations'
@firebase/firestore:     âœ” (Persistence) Recovers when write cannot be persisted
@firebase/firestore: ERROR: '[2025-03-04T22:53:36.901Z]  @firebase/firestore:', 'Firestore (11.3.0): AsyncQueue', 'Failed to persist write: IndexedDbTransactionError: [code=unavailable]: IndexedDB transaction 'Simulated error' failed: Error: Simulated retryable error: Locally write mutations'
@firebase/firestore: ERROR: '[2025-03-04T22:53:36.901Z]  @firebase/firestore:', 'Firestore (11.3.0): AsyncQueue', 'Failed to persist write: IndexedDbTransactionError: [code=unavailable]: IndexedDB transaction 'Simulated error' failed: Error: Simulated retryable error: Locally write mutations'
@firebase/firestore:     âœ” (Memory) Recovers when write cannot be persisted
@firebase/firestore: ERROR: '[2025-03-04T22:53:36.907Z]  @firebase/firestore:', 'Firestore (11.3.0): AsyncQueue', 'Failed to persist write: IndexedDbTransactionError: [code=unavailable]: IndexedDB transaction 'Simulated error' failed: Error: Simulated retryable error: Locally write mutations'
@firebase/firestore: ERROR: '[2025-03-04T22:53:36.907Z]  @firebase/firestore:', 'Firestore (11.3.0): AsyncQueue', 'Failed to persist write: IndexedDbTransactionError: [code=unavailable]: IndexedDB transaction 'Simulated error' failed: Error: Simulated retryable error: Locally write mutations'
@firebase/firestore:     âœ” (Persistence) Does not surface non-persisted writes
@firebase/firestore: ERROR: '[2025-03-04T22:53:36.914Z]  @firebase/firestore:', 'Firestore (11.3.0): AsyncQueue', 'Failed to persist write: IndexedDbTransactionError: [code=unavailable]: IndexedDB transaction 'Simulated error' failed: Error: Simulated retryable error: Locally write mutations'
@firebase/firestore: ERROR: '[2025-03-04T22:53:36.914Z]  @firebase/firestore:', 'Firestore (11.3.0): AsyncQueue', 'Failed to persist write: IndexedDbTransactionError: [code=unavailable]: IndexedDB transaction 'Simulated error' failed: Error: Simulated retryable error: Locally write mutations'
@firebase/firestore:     âœ” (Memory) Does not surface non-persisted writes
@firebase/firestore:     âœ” (Persistence) Recovers when write acknowledgment cannot be persisted
@firebase/firestore:     âœ” (Memory) Recovers when write acknowledgment cannot be persisted
@firebase/firestore:     âœ” (Persistence) Recovers when write rejection cannot be persisted
@firebase/firestore:     âœ” (Memory) Recovers when write rejection cannot be persisted
@firebase/firestore:     âœ” (Persistence) Recovers when write acknowledgment cannot be persisted (with restart)
@firebase/firestore:     âœ– (Memory) Recovers when write acknowledgment cannot be persisted (with restart) (skipped)
@firebase/firestore:     âœ” (Persistence) Writes are pending until acknowledgement is persisted
@firebase/firestore:     âœ” (Memory) Writes are pending until acknowledgement is persisted
@firebase/firestore: ERROR: '[2025-03-04T22:53:36.971Z]  @firebase/firestore:', 'Firestore (11.3.0): Could not reach Cloud Firestore backend. Backend didn't respond within 10 seconds.
@firebase/firestore: This typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.'
@firebase/firestore: ERROR: '[2025-03-04T22:53:36.971Z]  @firebase/firestore:', 'Firestore (11.3.0): Could not reach Cloud Firestore backend. Backend didn't respond within 10 seconds.
@firebase/firestore: This typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.'
@firebase/firestore:     âœ” (Persistence) Surfaces local documents if notifyLocalViewChanges fails
@firebase/firestore: ERROR: '[2025-03-04T22:53:36.976Z]  @firebase/firestore:', 'Firestore (11.3.0): Could not reach Cloud Firestore backend. Backend didn't respond within 10 seconds.
@firebase/firestore: This typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.'
@firebase/firestore: ERROR: '[2025-03-04T22:53:36.976Z]  @firebase/firestore:', 'Firestore (11.3.0): Could not reach Cloud Firestore backend. Backend didn't respond within 10 seconds.
@firebase/firestore: This typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.'
@firebase/firestore:     âœ” (Memory) Surfaces local documents if notifyLocalViewChanges fails
@firebase/firestore:     âœ” (Persistence) Excludes documents from future queries even if notifyLocalViewChanges fails
@firebase/firestore:     âœ” (Memory) Excludes documents from future queries even if notifyLocalViewChanges fails
@firebase/firestore: ERROR: '[2025-03-04T22:53:36.994Z]  @firebase/firestore:', 'Firestore (11.3.0): AsyncQueue', 'Initialization of query 'Query(target=Target(collection2, orderBy: [__name__ (asc)]); limitType=F)' failed: IndexedDbTransactionError: [code=unavailable]: IndexedDB transaction 'Simulated error' failed: Error: Simulated retryable error: Allocate target'
@firebase/firestore: ERROR: '[2025-03-04T22:53:36.994Z]  @firebase/firestore:', 'Firestore (11.3.0): AsyncQueue', 'Initialization of query 'Query(target=Target(collection2, orderBy: [__name__ (asc)]); limitType=F)' failed: IndexedDbTransactionError: [code=unavailable]: IndexedDB transaction 'Simulated error' failed: Error: Simulated retryable error: Allocate target'
@firebase/firestore:     âœ” (Persistence) Fails targets that cannot be allocated
@firebase/firestore: ERROR: '[2025-03-04T22:53:37.000Z]  @firebase/firestore:', 'Firestore (11.3.0): AsyncQueue', 'Initialization of query 'Query(target=Target(collection2, orderBy: [__name__ (asc)]); limitType=F)' failed: IndexedDbTransactionError: [code=unavailable]: IndexedDB transaction 'Simulated error' failed: Error: Simulated retryable error: Allocate target'
@firebase/firestore: ERROR: '[2025-03-04T22:53:37.000Z]  @firebase/firestore:', 'Firestore (11.3.0): AsyncQueue', 'Initialization of query 'Query(target=Target(collection2, orderBy: [__name__ (asc)]); limitType=F)' failed: IndexedDbTransactionError: [code=unavailable]: IndexedDB transaction 'Simulated error' failed: Error: Simulated retryable error: Allocate target'
@firebase/firestore:     âœ” (Memory) Fails targets that cannot be allocated
@firebase/firestore: ERROR: '[2025-03-04T22:53:37.006Z]  @firebase/firestore:', 'Firestore (11.3.0): AsyncQueue', 'Initialization of query 'Query(target=Target(collection2, orderBy: [__name__ (asc)]); limitType=F)' failed: IndexedDbTransactionError: [code=unavailable]: IndexedDB transaction 'Simulated error' failed: Error: Simulated retryable error: Allocate target'
@firebase/firestore: ERROR: '[2025-03-04T22:53:37.006Z]  @firebase/firestore:', 'Firestore (11.3.0): AsyncQueue', 'Initialization of query 'Query(target=Target(collection2, orderBy: [__name__ (asc)]); limitType=F)' failed: IndexedDbTransactionError: [code=unavailable]: IndexedDB transaction 'Simulated error' failed: Error: Simulated retryable error: Allocate target'
@firebase/firestore:     âœ” (Persistence) Can re-add failed target
@firebase/firestore: ERROR: '[2025-03-04T22:53:37.010Z]  @firebase/firestore:', 'Firestore (11.3.0): AsyncQueue', 'Initialization of query 'Query(target=Target(collection2, orderBy: [__name__ (asc)]); limitType=F)' failed: IndexedDbTransactionError: [code=unavailable]: IndexedDB transaction 'Simulated error' failed: Error: Simulated retryable error: Allocate target'
@firebase/firestore: ERROR: '[2025-03-04T22:53:37.010Z]  @firebase/firestore:', 'Firestore (11.3.0): AsyncQueue', 'Initialization of query 'Query(target=Target(collection2, orderBy: [__name__ (asc)]); limitType=F)' failed: IndexedDbTransactionError: [code=unavailable]: IndexedDB transaction 'Simulated error' failed: Error: Simulated retryable error: Allocate target'
@firebase/firestore:     âœ” (Memory) Can re-add failed target
@firebase/firestore:     âœ” (Persistence) Recovers when watch update cannot be persisted
@firebase/firestore:     âœ” (Memory) Recovers when watch update cannot be persisted
@firebase/firestore:     âœ” (Persistence) Handles rejections that cannot be persisted
@firebase/firestore:     âœ” (Memory) Handles rejections that cannot be persisted
@firebase/firestore:     âœ” (Persistence) Recovers when Limbo acknowledgement cannot be persisted
@firebase/firestore:     âœ” (Memory) Recovers when Limbo acknowledgement cannot be persisted
@firebase/firestore:     âœ” (Persistence) Recovers when Limbo rejection cannot be persisted
@firebase/firestore:     âœ” (Memory) Recovers when Limbo rejection cannot be persisted
@firebase/firestore:     âœ” (Persistence) User change handles transaction failures (with recovery)
@firebase/firestore:     âœ– (Memory) User change handles transaction failures (with recovery) (skipped)
@firebase/firestore:     âœ” (Persistence) Multiple user changes during transaction failure (with recovery)
@firebase/firestore:     âœ– (Memory) Multiple user changes during transaction failure (with recovery) (skipped)
@firebase/firestore:     âœ” (Persistence) Unlisten succeeds when target release fails
@firebase/firestore:     âœ” (Memory) Unlisten succeeds when target release fails
@firebase/firestore:     âœ” (Persistence) Can re-listen to query when unlisten fails
@firebase/firestore:     âœ” (Memory) Can re-listen to query when unlisten fails
@firebase/firestore:   Remote store:
@firebase/firestore:     âœ” (Persistence) Waits for watch to remove targets
@firebase/firestore:     âœ” (Memory) Waits for watch to remove targets
@firebase/firestore:     âœ” (Persistence) Waits for watch to ack last target add
@firebase/firestore:     âœ” (Memory) Waits for watch to ack last target add
@firebase/firestore: ERROR: '[2025-03-04T22:53:37.136Z]  @firebase/firestore:', 'Firestore (11.3.0): Could not reach Cloud Firestore backend. Connection failed 1 times. Most recent error: FirebaseError: [code=unavailable]: Simulated Backend Error
@firebase/firestore: This typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.'
@firebase/firestore: ERROR: '[2025-03-04T22:53:37.136Z]  @firebase/firestore:', 'Firestore (11.3.0): Could not reach Cloud Firestore backend. Connection failed 1 times. Most recent error: FirebaseError: [code=unavailable]: Simulated Backend Error
@firebase/firestore: This typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.'
@firebase/firestore:     âœ” (Persistence) Cleans up watch state correctly
@firebase/firestore: ERROR: '[2025-03-04T22:53:37.139Z]  @firebase/firestore:', 'Firestore (11.3.0): Could not reach Cloud Firestore backend. Connection failed 1 times. Most recent error: FirebaseError: [code=unavailable]: Simulated Backend Error
@firebase/firestore: This typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.'
@firebase/firestore: ERROR: '[2025-03-04T22:53:37.139Z]  @firebase/firestore:', 'Firestore (11.3.0): Could not reach Cloud Firestore backend. Connection failed 1 times. Most recent error: FirebaseError: [code=unavailable]: Simulated Backend Error
@firebase/firestore: This typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.'
@firebase/firestore:     âœ” (Memory) Cleans up watch state correctly
@firebase/firestore: ERROR: '[2025-03-04T22:53:37.144Z]  @firebase/firestore:', 'Firestore (11.3.0): Could not reach Cloud Firestore backend. Connection failed 1 times. Most recent error: FirebaseError: [code=unavailable]: Simulated Backend Error
@firebase/firestore: This typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.'
@firebase/firestore: ERROR: '[2025-03-04T22:53:37.144Z]  @firebase/firestore:', 'Firestore (11.3.0): Could not reach Cloud Firestore backend. Connection failed 1 times. Most recent error: FirebaseError: [code=unavailable]: Simulated Backend Error
@firebase/firestore: This typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.'
@firebase/firestore:     âœ” (Persistence) Handles user changes while offline (b/74749605).
@firebase/firestore: ERROR: '[2025-03-04T22:53:37.147Z]  @firebase/firestore:', 'Firestore (11.3.0): Could not reach Cloud Firestore backend. Connection failed 1 times. Most recent error: FirebaseError: [code=unavailable]: Simulated Backend Error
@firebase/firestore: This typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.'
@firebase/firestore: ERROR: '[2025-03-04T22:53:37.147Z]  @firebase/firestore:', 'Firestore (11.3.0): Could not reach Cloud Firestore backend. Connection failed 1 times. Most recent error: FirebaseError: [code=unavailable]: Simulated Backend Error
@firebase/firestore: This typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.'
@firebase/firestore:     âœ” (Memory) Handles user changes while offline (b/74749605).
@firebase/firestore:   Resume tokens:
@firebase/firestore:     âœ” (Persistence) Resume tokens are sent after watch stream restarts
@firebase/firestore:     âœ” (Memory) Resume tokens are sent after watch stream restarts
@firebase/firestore:     âœ” (Persistence) Resume tokens are used across new listens
@firebase/firestore:     âœ” (Memory) Resume tokens are used across new listens
@firebase/firestore:   Writes:
@firebase/firestore:     âœ” (Persistence) Two sequential writes to different documents smoke test.
@firebase/firestore:     âœ” (Memory) Two sequential writes to different documents smoke test.
@firebase/firestore:     âœ” (Persistence) Event is raised for a local set before and after the write ack
@firebase/firestore:     âœ” (Memory) Event is raised for a local set before and after the write ack
@firebase/firestore:     âœ” (Persistence) Raises snapshot with 'hasPendingWrites' for unacknowledged write
@firebase/firestore:     âœ” (Memory) Raises snapshot with 'hasPendingWrites' for unacknowledged write
@firebase/firestore:     âœ” (Persistence) Doesn't raise 'hasPendingWrites' for committed write and new listen
@firebase/firestore:     âœ” (Memory) Doesn't raise 'hasPendingWrites' for committed write and new listen
@firebase/firestore:     âœ” (Persistence) Doesn't raise event for document with pending patch
@firebase/firestore:     âœ” (Memory) Doesn't raise event for document with pending patch
@firebase/firestore:     âœ” (Persistence) Cache will not keep data for an outdated write ack
@firebase/firestore:     âœ” (Memory) Cache will not keep data for an outdated write ack
@firebase/firestore:     âœ” (Persistence) Cache raises correct event if write is acked before watch delivers it
@firebase/firestore:     âœ” (Memory) Cache raises correct event if write is acked before watch delivers it
@firebase/firestore:     âœ” (Persistence) Cache will hold local write until watch catches up
@firebase/firestore:     âœ” (Memory) Cache will hold local write until watch catches up
@firebase/firestore:     âœ” (Persistence) Local patch is applied to query until watch catches up
@firebase/firestore:     âœ” (Memory) Local patch is applied to query until watch catches up
@firebase/firestore:     âœ” (Persistence) Writes are pipelined
@firebase/firestore:     âœ” (Memory) Writes are pipelined
@firebase/firestore:     âœ” (Persistence) Pipelined writes can fail
@firebase/firestore:     âœ” (Memory) Pipelined writes can fail
@firebase/firestore:     âœ” (Persistence) Failed writes are released immediately.
@firebase/firestore:     âœ” (Memory) Failed writes are released immediately.
@firebase/firestore:     âœ” (Persistence) Writes are not re-sent.
@firebase/firestore:     âœ” (Memory) Writes are not re-sent.
@firebase/firestore:     âœ” (Persistence) Writes are not re-sent after disable/enable network.
@firebase/firestore:     âœ” (Memory) Writes are not re-sent after disable/enable network.
@firebase/firestore:     âœ– (Persistence) Writes are released when there are no queries left (skipped)
@firebase/firestore:     âœ” (Memory) Writes are released when there are no queries left
@firebase/firestore:     âœ” (Persistence) Writes that fail with code invalid-argument are rejected
@firebase/firestore:     âœ” (Memory) Writes that fail with code invalid-argument are rejected
@firebase/firestore:     âœ” (Persistence) Writes that fail with code not-found are rejected
@firebase/firestore:     âœ” (Memory) Writes that fail with code not-found are rejected
@firebase/firestore:     âœ” (Persistence) Writes that fail with code already-exists are rejected
@firebase/firestore:     âœ” (Memory) Writes that fail with code already-exists are rejected
@firebase/firestore:     âœ” (Persistence) Writes that fail with code permission-denied are rejected
@firebase/firestore:     âœ” (Memory) Writes that fail with code permission-denied are rejected
@firebase/firestore:     âœ” (Persistence) Writes that fail with code failed-precondition are rejected
@firebase/firestore:     âœ” (Memory) Writes that fail with code failed-precondition are rejected
@firebase/firestore:     âœ” (Persistence) Writes that fail with code out-of-range are rejected
@firebase/firestore:     âœ” (Memory) Writes that fail with code out-of-range are rejected
@firebase/firestore:     âœ” (Persistence) Writes that fail with code unimplemented are rejected
@firebase/firestore:     âœ” (Memory) Writes that fail with code unimplemented are rejected
@firebase/firestore:     âœ” (Persistence) Writes that fail with code data-loss are rejected
@firebase/firestore:     âœ” (Memory) Writes that fail with code data-loss are rejected
@firebase/firestore: ERROR: '[2025-03-04T22:53:37.514Z]  @firebase/firestore:', 'Firestore (11.3.0): FirebaseError: [code=resource-exhausted]: transient error'
@firebase/firestore: ERROR: '[2025-03-04T22:53:37.514Z]  @firebase/firestore:', 'Firestore (11.3.0): FirebaseError: [code=resource-exhausted]: transient error'
@firebase/firestore: ERROR: '[2025-03-04T22:53:37.514Z]  @firebase/firestore:', 'Firestore (11.3.0): Using maximum backoff delay to prevent overloading the backend.'
@firebase/firestore: ERROR: '[2025-03-04T22:53:37.514Z]  @firebase/firestore:', 'Firestore (11.3.0): Using maximum backoff delay to prevent overloading the backend.'
@firebase/firestore:     âœ” (Persistence) Writes that fail with code resource_exhausted are not rejected
@firebase/firestore: ERROR: '[2025-03-04T22:53:37.515Z]  @firebase/firestore:', 'Firestore (11.3.0): FirebaseError: [code=resource-exhausted]: transient error'
@firebase/firestore: ERROR: '[2025-03-04T22:53:37.515Z]  @firebase/firestore:', 'Firestore (11.3.0): FirebaseError: [code=resource-exhausted]: transient error'
@firebase/firestore: ERROR: '[2025-03-04T22:53:37.516Z]  @firebase/firestore:', 'Firestore (11.3.0): Using maximum backoff delay to prevent overloading the backend.'
@firebase/firestore: ERROR: '[2025-03-04T22:53:37.516Z]  @firebase/firestore:', 'Firestore (11.3.0): Using maximum backoff delay to prevent overloading the backend.'
@firebase/firestore:     âœ” (Memory) Writes that fail with code resource_exhausted are not rejected
@firebase/firestore:     âœ” (Persistence) Writes that fail with code aborted are retried
@firebase/firestore:     âœ” (Memory) Writes that fail with code aborted are retried
@firebase/firestore:     âœ” (Persistence) Writes that fail with code cancelled are retried
@firebase/firestore:     âœ” (Memory) Writes that fail with code cancelled are retried
@firebase/firestore:     âœ” (Persistence) Writes that fail with code unknown are retried
@firebase/firestore:     âœ” (Memory) Writes that fail with code unknown are retried
@firebase/firestore:     âœ” (Persistence) Writes that fail with code deadline-exceeded are retried
@firebase/firestore:     âœ” (Memory) Writes that fail with code deadline-exceeded are retried
@firebase/firestore:     âœ” (Persistence) Writes that fail with code internal are retried
@firebase/firestore:     âœ” (Memory) Writes that fail with code internal are retried
@firebase/firestore:     âœ” (Persistence) Writes that fail with code unavailable are retried
@firebase/firestore:     âœ” (Memory) Writes that fail with code unavailable are retried
@firebase/firestore:     âœ” (Persistence) Writes that fail with code unauthenticated are retried
@firebase/firestore:     âœ” (Memory) Writes that fail with code unauthenticated are retried
@firebase/firestore:     âœ” (Persistence) Ensure correct events after patching a doc (including a delete) and getting watcher events.
@firebase/firestore:     âœ” (Memory) Ensure correct events after patching a doc (including a delete) and getting watcher events.
@firebase/firestore:     âœ” (Persistence) Writes are resent after network disconnect
@firebase/firestore:     âœ” (Memory) Writes are resent after network disconnect
@firebase/firestore:     âœ” (Persistence) New writes are sent after write failure
@firebase/firestore:     âœ” (Memory) New writes are sent after write failure
@firebase/firestore:     âœ” (Persistence) Primary client acknowledges write
@firebase/firestore:     âœ– (Memory) Primary client acknowledges write (skipped)
@firebase/firestore:     âœ” (Persistence) Primary client rejects write
@firebase/firestore:     âœ– (Memory) Primary client rejects write (skipped)
@firebase/firestore:     âœ” (Persistence) Pending writes are shared between clients
@firebase/firestore:     âœ– (Memory) Pending writes are shared between clients (skipped)
@firebase/firestore:     âœ” (Persistence) Pending write is acknowledged by primary client
@firebase/firestore:     âœ– (Memory) Pending write is acknowledged by primary client (skipped)
@firebase/firestore:     âœ” (Persistence) Pending write is rejected by primary client
@firebase/firestore:     âœ– (Memory) Pending write is rejected by primary client (skipped)
@firebase/firestore:     âœ” (Persistence) Writes are released by primary client
@firebase/firestore:     âœ– (Memory) Writes are released by primary client (skipped)
@firebase/firestore:     âœ” (Persistence) Writes are held during primary failover
@firebase/firestore:     âœ– (Memory) Writes are held during primary failover (skipped)
@firebase/firestore:     âœ” (Persistence) Write are sequenced by multiple clients
@firebase/firestore:     âœ– (Memory) Write are sequenced by multiple clients (skipped)
@firebase/firestore:     âœ” (Persistence) Write is executed after primary tab failover
@firebase/firestore:     âœ– (Memory) Write is executed after primary tab failover (skipped)
@firebase/firestore:     âœ” (Persistence) Secondary tabs handle user change
@firebase/firestore:     âœ– (Memory) Secondary tabs handle user change (skipped)
@firebase/firestore:     âœ” (Persistence) Mutations are scoped by user
@firebase/firestore:     âœ– (Memory) Mutations are scoped by user (skipped)
@firebase/firestore:     âœ” (Persistence) Mutation recovers after primary takeover
@firebase/firestore:     âœ– (Memory) Mutation recovers after primary takeover (skipped)
@firebase/firestore:     âœ” (Persistence) Write is sent by newly started primary
@firebase/firestore:     âœ– (Memory) Write is sent by newly started primary (skipped)
@firebase/firestore: ERROR: '[2025-03-04T22:53:37.790Z]  @firebase/firestore:', 'Firestore (11.3.0): Failed to obtain primary lease for action 'Acknowledge batch'.'
@firebase/firestore: ERROR: '[2025-03-04T22:53:37.790Z]  @firebase/firestore:', 'Firestore (11.3.0): Failed to obtain primary lease for action 'Acknowledge batch'.'
@firebase/firestore:     âœ” (Persistence) Unresponsive primary ignores acknowledged write
@firebase/firestore:     âœ– (Memory) Unresponsive primary ignores acknowledged write (skipped)
@firebase/firestore: ERROR: '[2025-03-04T22:53:37.800Z]  @firebase/firestore:', 'Firestore (11.3.0): Failed to obtain primary lease for action 'Reject batch'.'
@firebase/firestore: ERROR: '[2025-03-04T22:53:37.800Z]  @firebase/firestore:', 'Firestore (11.3.0): Failed to obtain primary lease for action 'Reject batch'.'
@firebase/firestore:     âœ” (Persistence) Unresponsive primary ignores rejected write
@firebase/firestore:     âœ– (Memory) Unresponsive primary ignores rejected write (skipped)
@firebase/firestore:     âœ” (Persistence) Mutation are not sent twice after primary failover
@firebase/firestore:     âœ– (Memory) Mutation are not sent twice after primary failover (skipped)
@firebase/firestore:     âœ” (Persistence) Wait for pending writes resolves after write acknowledgment
@firebase/firestore:     âœ” (Memory) Wait for pending writes resolves after write acknowledgment
@firebase/firestore:     âœ” (Persistence) Wait for pending writes resolves with no writes
@firebase/firestore:     âœ” (Memory) Wait for pending writes resolves with no writes
@firebase/firestore:     âœ” (Persistence) Wait for pending writes resolves multiple times
@firebase/firestore:     âœ” (Memory) Wait for pending writes resolves multiple times
@firebase/firestore:     âœ” (Persistence) Wait for pending writes resolves if another write is issued
@firebase/firestore:     âœ” (Memory) Wait for pending writes resolves if another write is issued
@firebase/firestore:     âœ” (Persistence) Wait for pending writes waits after restart
@firebase/firestore:     âœ– (Memory) Wait for pending writes waits after restart (skipped)
@firebase/firestore:     âœ” (Persistence) Wait for pending writes resolves for write in secondary tab
@firebase/firestore:     âœ– (Memory) Wait for pending writes resolves for write in secondary tab (skipped)
@firebase/firestore:     âœ” (Persistence) Wait for pending writes resolves independently for different tabs
@firebase/firestore:     âœ– (Memory) Wait for pending writes resolves independently for different tabs (skipped)
@firebase/firestore:   diffArrays
@firebase/firestore:     âœ” Missing Element
@firebase/firestore:     âœ” AddedElement
@firebase/firestore:     âœ” Without Ordering
@firebase/firestore:     âœ” Empty Lists
@firebase/firestore:   AsyncQueue
@firebase/firestore:     âœ” schedules ops in right order
@firebase/firestore:     âœ” handles failures
@firebase/firestore:     âœ” can schedule ops in the future
@firebase/firestore:     âœ” Can cancel delayed operations
@firebase/firestore:     âœ” Can run all delayed operations early
@firebase/firestore:     âœ” Can run some delayed operations early
@firebase/firestore:     âœ” Retries retryable operations
@firebase/firestore: ERROR: '[2025-03-04T22:53:37.978Z]  @firebase/firestore:', 'Firestore (11.3.0): FIRESTORE (11.3.0) INTERNAL ASSERTION FAILED: Simulated test failure'
@firebase/firestore: ERROR: '[2025-03-04T22:53:37.978Z]  @firebase/firestore:', 'Firestore (11.3.0): FIRESTORE (11.3.0) INTERNAL ASSERTION FAILED: Simulated test failure'
@firebase/firestore: ERROR: '[2025-03-04T22:53:37.979Z]  @firebase/firestore:', 'Firestore (11.3.0): INTERNAL UNHANDLED ERROR: ', 'Error: FIRESTORE (11.3.0) INTERNAL ASSERTION FAILED: Simulated test failure
@firebase/firestore:     at fail (http://localhost:8089/absolutebootstrap.430169083.js?86d93d5a78723d17f3300e6e99995f0f06fe99b5:4413:7408)
@firebase/firestore:     at Array.<anonymous> (http://localhost:8089/absolutebootstrap.430169083.js?86d93d5a78723d17f3300e6e99995f0f06fe99b5:81503:37)
@firebase/firestore:     at AsyncQueueImpl.retryNextOp (http://localhost:8089/absolutebootstrap.430169083.js?86d93d5a78723d17f3300e6e99995f0f06fe99b5:4491:40360)
@firebase/firestore:     at http://localhost:8089/absolutebootstrap.430169083.js?86d93d5a78723d17f3300e6e99995f0f06fe99b5:4491:40078
@firebase/firestore:     at http://localhost:8089/absolutebootstrap.430169083.js?86d93d5a78723d17f3300e6e99995f0f06fe99b5:4491:39715
@firebase/firestore:     at http://localhost:8089/absolutebootstrap.430169083.js?86d93d5a78723d17f3300e6e99995f0f06fe99b5:4491:41177'
@firebase/firestore: ERROR: '[2025-03-04T22:53:37.979Z]  @firebase/firestore:', 'Firestore (11.3.0): INTERNAL UNHANDLED ERROR: ', 'Error: FIRESTORE (11.3.0) INTERNAL ASSERTION FAILED: Simulated test failure
@firebase/firestore:     at fail (http://localhost:8089/absolutebootstrap.430169083.js?86d93d5a78723d17f3300e6e99995f0f06fe99b5:4413:7408)
@firebase/firestore:     at Array.<anonymous> (http://localhost:8089/absolutebootstrap.430169083.js?86d93d5a78723d17f3300e6e99995f0f06fe99b5:81503:37)
@firebase/firestore:     at AsyncQueueImpl.retryNextOp (http://localhost:8089/absolutebootstrap.430169083.js?86d93d5a78723d17f3300e6e99995f0f06fe99b5:4491:40360)
@firebase/firestore:     at http://localhost:8089/absolutebootstrap.430169083.js?86d93d5a78723d17f3300e6e99995f0f06fe99b5:4491:40078
@firebase/firestore:     at http://localhost:8089/absolutebootstrap.430169083.js?86d93d5a78723d17f3300e6e99995f0f06fe99b5:4491:39715
@firebase/firestore:     at http://localhost:8089/absolutebootstrap.430169083.js?86d93d5a78723d17f3300e6e99995f0f06fe99b5:4491:41177'
@firebase/firestore:     âœ” Doesn't retry internal exceptions
@firebase/firestore:     âœ” Schedules first retryable attempt with no delay
@firebase/firestore:     âœ” Retries retryable operations with backoff
@firebase/firestore:     âœ” Retries retryable operations in order
@firebase/firestore:     âœ” Does not delay retryable operations that succeed
@firebase/firestore:     âœ” Catches up when retryable operation fails
@firebase/firestore:     âœ” Can drain (non-delayed) operations
@firebase/firestore:     âœ” Schedules operations with respect to shut down
@firebase/firestore:     âœ” Does not run existing operations if opted out
@firebase/firestore:   atob
@firebase/firestore:     âœ” decodes with native support
@firebase/firestore:     âœ” roundtrips with native support
@firebase/firestore:     âœ” decodes with polyfill
@firebase/firestore:     âœ” roundtrips with polyfill
@firebase/firestore:   btoa
@firebase/firestore:     âœ” encodes with native support
@firebase/firestore:     âœ” roundtrips with native support
@firebase/firestore:     âœ” encodes with polyfill
@firebase/firestore:     âœ” roundtrips with polyfill
@firebase/firestore:   byteStreamReaderFromString()
@firebase/firestore:     âœ” returns a reader stepping readable stream
@firebase/firestore:   Bundle 
@firebase/firestore:     âœ” reads with query and doc with bytesPerRead 1
@firebase/firestore:     âœ” reads with unexpected orders with bytesPerRead 1
@firebase/firestore:     âœ” reads without named query with bytesPerRead 1
@firebase/firestore:     âœ” reads with deleted doc with bytesPerRead 1
@firebase/firestore:     âœ” reads without documents or query with bytesPerRead 1
@firebase/firestore:     âœ” throws with ill-formatted bundle with bytesPerRead 1
@firebase/firestore:     âœ” reads with query and doc with bytesPerRead 4
@firebase/firestore:     âœ” reads with unexpected orders with bytesPerRead 4
@firebase/firestore:     âœ” reads without named query with bytesPerRead 4
@firebase/firestore:     âœ” reads with deleted doc with bytesPerRead 4
@firebase/firestore:     âœ” reads without documents or query with bytesPerRead 4
@firebase/firestore:     âœ” throws with ill-formatted bundle with bytesPerRead 4
@firebase/firestore:     âœ” reads with query and doc with bytesPerRead 64
@firebase/firestore:     âœ” reads with unexpected orders with bytesPerRead 64
@firebase/firestore:     âœ” reads without named query with bytesPerRead 64
@firebase/firestore:     âœ” reads with deleted doc with bytesPerRead 64
@firebase/firestore:     âœ” reads without documents or query with bytesPerRead 64
@firebase/firestore:     âœ” throws with ill-formatted bundle with bytesPerRead 64
@firebase/firestore:     âœ” reads with query and doc with bytesPerRead 1024
@firebase/firestore:     âœ” reads with unexpected orders with bytesPerRead 1024
@firebase/firestore:     âœ” reads without named query with bytesPerRead 1024
@firebase/firestore:     âœ” reads with deleted doc with bytesPerRead 1024
@firebase/firestore:     âœ” reads without documents or query with bytesPerRead 1024
@firebase/firestore:     âœ” throws with ill-formatted bundle with bytesPerRead 1024
@firebase/firestore:   LogicUtils
@firebase/firestore:     âœ” implements field filter associativity
@firebase/firestore:     âœ” implements composite filter associativity
@firebase/firestore:     âœ” implements field filter distribution over field filter
@firebase/firestore:     âœ” implements field filter distribution over and filter
@firebase/firestore:     âœ” implements field filter distribution over or filter
@firebase/firestore:     âœ” implements in expansion for field filters
@firebase/firestore:     âœ” implements in expansion for composite filters
@firebase/firestore:     âœ” implements field filter distribution over or filter 
@firebase/firestore:     âœ” implements and filter distribution with and filter
@firebase/firestore:     âœ” implements and filter distribution with or filter
@firebase/firestore:     âœ” implements or filter distribution with and filter
@firebase/firestore:     âœ” implements or filter distribution with or filter
@firebase/firestore:     âœ” implements field filter compute DNF
@firebase/firestore:     âœ” implements compute dnf flat AND filter
@firebase/firestore:     âœ” implements compute dnf flat OR filter
@firebase/firestore:     âœ” compute DNF1
@firebase/firestore:     âœ” compute DNF2
@firebase/firestore:     âœ” compute DNF3
@firebase/firestore:     âœ” compute DNF4
@firebase/firestore:     âœ” compute DNF5
@firebase/firestore:     âœ” compute DNF6
@firebase/firestore:     âœ” compute DNF7
@firebase/firestore:     âœ” compute DNF8
@firebase/firestore:   immediateSuccessor
@firebase/firestore:     âœ” generates the correct immediate successors
@firebase/firestore:   typeCast
@firebase/firestore:     âœ” can cast types
@firebase/firestore: ERROR: '[2025-03-04T22:53:38.177Z]  @firebase/firestore:', 'Firestore (11.3.0): FIRESTORE (11.3.0) INTERNAL ASSERTION FAILED: Expected type 'Bar', but was 'Foo''
@firebase/firestore: ERROR: '[2025-03-04T22:53:38.177Z]  @firebase/firestore:', 'Firestore (11.3.0): FIRESTORE (11.3.0) INTERNAL ASSERTION FAILED: Expected type 'Bar', but was 'Foo''
@firebase/firestore:     âœ” validates types
@firebase/firestore: ERROR: '[2025-03-04T22:53:38.177Z]  @firebase/firestore:', 'Firestore (11.3.0): FIRESTORE (11.3.0) INTERNAL ASSERTION FAILED: FieldMask contains field that is not unique: a'
@firebase/firestore: ERROR: '[2025-03-04T22:53:38.177Z]  @firebase/firestore:', 'Firestore (11.3.0): FIRESTORE (11.3.0) INTERNAL ASSERTION FAILED: FieldMask contains field that is not unique: a'
@firebase/firestore:   FieldMask
@firebase/firestore:     âœ” cannot contain duplicate fields
@firebase/firestore:   CompareUtf8Strings
@firebase/firestore:     âœ” compareUtf8Strings should return correct results
@firebase/firestore:   ObjectMap
@firebase/firestore:     âœ” can get/put/delete values
@firebase/firestore:     âœ” can handle collisions
@firebase/firestore:   SortedMap Tests
@firebase/firestore:     âœ” Create node
@firebase/firestore:     âœ” You can search a map for a specific key
@firebase/firestore:     âœ” You can insert a new key/value pair into the tree
@firebase/firestore:     âœ” You can remove a key/value pair from the map
@firebase/firestore:     âœ” More removals
@firebase/firestore:     âœ” Removal bug
@firebase/firestore:     âœ” Test increasing
@firebase/firestore:     âœ” The structure should be valid after insertion (1)
@firebase/firestore:     âœ” The structure should be valid after insertion (2)
@firebase/firestore:     âœ” Rotate left leaves the tree in a valid state
@firebase/firestore:     âœ” Rotate right leaves the tree in a valid state
@firebase/firestore:     âœ” The structure should be valid after insertion (3)
@firebase/firestore:     âœ” you can overwrite a value
@firebase/firestore:     âœ” removing the last element returns an empty map
@firebase/firestore:     âœ” empty .get()
@firebase/firestore:     âœ” empty .size
@firebase/firestore:     âœ” empty .remove()
@firebase/firestore:     âœ” .reverseTraversal() works.
@firebase/firestore:     âœ” insertion and removal of 100 items in random order.
@firebase/firestore:     âœ– Perf (skipped)
@firebase/firestore:     âœ– Perf: Insertion and removal with various # of items. (skipped)
@firebase/firestore:     âœ– Perf: Comparison with {}: Insertion and removal with various # of items. (skipped)
@firebase/firestore: ERROR: '[2025-03-04T22:53:46.115Z]  @firebase/firestore:', 'Firestore (11.3.0): FIRESTORE (11.3.0) INTERNAL ASSERTION FAILED: getNext() called on iterator when hasNext() is false.'
@firebase/firestore: ERROR: '[2025-03-04T22:53:46.115Z]  @firebase/firestore:', 'Firestore (11.3.0): FIRESTORE (11.3.0) INTERNAL ASSERTION FAILED: getNext() called on iterator when hasNext() is false.'
@firebase/firestore:     âœ” SortedMapIterator empty test.
@firebase/firestore:     âœ” forward iterator without start key
@firebase/firestore:     âœ” forward iterator with start key.
@firebase/firestore: ERROR: '[2025-03-04T22:53:46.115Z]  @firebase/firestore:', 'Firestore (11.3.0): FIRESTORE (11.3.0) INTERNAL ASSERTION FAILED: getNext() called on iterator when hasNext() is false.'
@firebase/firestore: ERROR: '[2025-03-04T22:53:46.115Z]  @firebase/firestore:', 'Firestore (11.3.0): FIRESTORE (11.3.0) INTERNAL ASSERTION FAILED: getNext() called on iterator when hasNext() is false.'
@firebase/firestore:     âœ” forward iterator with start key larger than max key
@firebase/firestore:     âœ” forward iterator with start key smaller than min key
@firebase/firestore:     âœ” reverse iterator without start key
@firebase/firestore:     âœ” reverse iterator with start key.
@firebase/firestore: ERROR: '[2025-03-04T22:53:46.115Z]  @firebase/firestore:', 'Firestore (11.3.0): FIRESTORE (11.3.0) INTERNAL ASSERTION FAILED: getNext() called on iterator when hasNext() is false.'
@firebase/firestore: ERROR: '[2025-03-04T22:53:46.115Z]  @firebase/firestore:', 'Firestore (11.3.0): FIRESTORE (11.3.0) INTERNAL ASSERTION FAILED: getNext() called on iterator when hasNext() is false.'
@firebase/firestore:     âœ” reverse iterator with start key smaller than min key
@firebase/firestore:     âœ” reverse iterator with start key larger than max key
@firebase/firestore:     âœ” SortedMap.indexOf returns index.
@firebase/firestore:   SortedSet
@firebase/firestore:     âœ” keeps elements in the right order
@firebase/firestore:     âœ” adds and deletes elements
@firebase/firestore:     âœ” updates elements
@firebase/firestore:     âœ” can iterate over all elements within a range
@firebase/firestore:     âœ” can iterate over all elements while condition
@firebase/firestore:     âœ” can find element equal or greater to provided.
@firebase/firestore:     âœ” can unionWith another set.
@firebase/firestore:     âœ” returns indexes of elements
@firebase/firestore:     âœ” diff sorted sets with missing element
@firebase/firestore:     âœ” diff sorted sets with added element
@firebase/firestore:     âœ” diff sorted sets with empty sets
@firebase/firestore:   (Persistence=memory_lru_gc) Count queries
@firebase/firestore:     âœ” can run count query getCountFromServer
@firebase/firestore:     âœ” can run count query getCountFromServer with special chars in the document path: so!@#$%^&*()_+special/sub
@firebase/firestore:     âœ” can run count query getCountFromServer with special chars in the document path: b1/so!@#$%^&*()_+special
@firebase/firestore:     âœ” count query doesn't use converter
@firebase/firestore:     âœ” count query supports collection groups
@firebase/firestore:     âœ” getCountFromServer fails if firestore is terminated
@firebase/firestore:     âœ” terminate doesn't crash when there is count query in flight
@firebase/firestore:     âœ– getCountFromServer fails if user is offline (skipped)
@firebase/firestore: WARN: '[2025-03-04T22:53:48.875Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'RunAggregationQuery' 0x4e6f8865 failed with error: ', '{"code":"failed-precondition","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:runAggregationQuery', 'request:', '{"structuredAggregationQuery":{"aggregations":[{"alias":"aggregate_0","count":{}}],"structuredQuery":{"from":[{"collectionId":"b8yb4xXvADAaJw4HJ8Tg"}],"where":{"compositeFilter":{"op":"AND","filters":[{"fieldFilter":{"field":{"fieldPath":"key1"},"op":"EQUAL","value":{"integerValue":"42"}}},{"fieldFilter":{"field":{"fieldPath":"key2"},"op":"LESS_THAN","value":{"integerValue":"42"}}}]}}}}}'
@firebase/firestore: WARN: '[2025-03-04T22:53:48.875Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'RunAggregationQuery' 0x4e6f8865 failed with error: ', '{"code":"failed-precondition","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:runAggregationQuery', 'request:', '{"structuredAggregationQuery":{"aggregations":[{"alias":"aggregate_0","count":{}}],"structuredQuery":{"from":[{"collectionId":"b8yb4xXvADAaJw4HJ8Tg"}],"where":{"compositeFilter":{"op":"AND","filters":[{"fieldFilter":{"field":{"fieldPath":"key1"},"op":"EQUAL","value":{"integerValue":"42"}}},{"fieldFilter":{"field":{"fieldPath":"key2"},"op":"LESS_THAN","value":{"integerValue":"42"}}}]}}}}}'
@firebase/firestore:     âœ” getCountFromServer error message contains console link if missing index
@firebase/firestore:   (Persistence=indexeddb) Count queries
@firebase/firestore:     âœ” can run count query getCountFromServer
@firebase/firestore:     âœ” can run count query getCountFromServer with special chars in the document path: so!@#$%^&*()_+special/sub
@firebase/firestore:     âœ” can run count query getCountFromServer with special chars in the document path: b1/so!@#$%^&*()_+special
@firebase/firestore:     âœ” count query doesn't use converter
@firebase/firestore:     âœ” count query supports collection groups
@firebase/firestore:     âœ” getCountFromServer fails if firestore is terminated
@firebase/firestore:     âœ” terminate doesn't crash when there is count query in flight
@firebase/firestore:     âœ– getCountFromServer fails if user is offline (skipped)
@firebase/firestore: WARN: '[2025-03-04T22:53:51.405Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'RunAggregationQuery' 0x4e6f8878 failed with error: ', '{"code":"failed-precondition","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:runAggregationQuery', 'request:', '{"structuredAggregationQuery":{"aggregations":[{"alias":"aggregate_0","count":{}}],"structuredQuery":{"from":[{"collectionId":"38js5z0e8tcJmg5y2T5f"}],"where":{"compositeFilter":{"op":"AND","filters":[{"fieldFilter":{"field":{"fieldPath":"key1"},"op":"EQUAL","value":{"integerValue":"42"}}},{"fieldFilter":{"field":{"fieldPath":"key2"},"op":"LESS_THAN","value":{"integerValue":"42"}}}]}}}}}'
@firebase/firestore: WARN: '[2025-03-04T22:53:51.405Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'RunAggregationQuery' 0x4e6f8878 failed with error: ', '{"code":"failed-precondition","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:runAggregationQuery', 'request:', '{"structuredAggregationQuery":{"aggregations":[{"alias":"aggregate_0","count":{}}],"structuredQuery":{"from":[{"collectionId":"38js5z0e8tcJmg5y2T5f"}],"where":{"compositeFilter":{"op":"AND","filters":[{"fieldFilter":{"field":{"fieldPath":"key1"},"op":"EQUAL","value":{"integerValue":"42"}}},{"fieldFilter":{"field":{"fieldPath":"key2"},"op":"LESS_THAN","value":{"integerValue":"42"}}}]}}}}}'
@firebase/firestore:     âœ” getCountFromServer error message contains console link if missing index
@firebase/firestore:   (Persistence=memory_lru_gc) Aggregation queries
@firebase/firestore:     âœ” can run count query getAggregationFromServer
@firebase/firestore:     âœ” can alias aggregations using getAggregationFromServer
@firebase/firestore:     âœ” allows special chars in aliases when using getAggregationFromServer
@firebase/firestore:     âœ” allows backticks in aliases when using getAggregationFromServer
@firebase/firestore:     âœ” allows backslash in aliases when using getAggregationFromServer
@firebase/firestore:     âœ” allows aliases with length greater than 1500 bytes
@firebase/firestore:     âœ” can get duplicate aggregations using getAggregationFromServer
@firebase/firestore:     âœ” getAggregationFromServer doesn't use converter
@firebase/firestore:     âœ” aggregate query supports collection groups
@firebase/firestore:     âœ” getAggregateFromServer fails if firestore is terminated
@firebase/firestore:     âœ” terminate doesn't crash when there is aggregate query in flight
@firebase/firestore:     âœ– getAggregateFromServer fails if user is offline (skipped)
@firebase/firestore: WARN: '[2025-03-04T22:53:55.145Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'RunAggregationQuery' 0x4e6f8897 failed with error: ', '{"code":"failed-precondition","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:runAggregationQuery', 'request:', '{"structuredAggregationQuery":{"aggregations":[{"alias":"aggregate_0","count":{}}],"structuredQuery":{"from":[{"collectionId":"MOwX2eJZXVaZExDYwARv"}],"where":{"compositeFilter":{"op":"AND","filters":[{"fieldFilter":{"field":{"fieldPath":"key1"},"op":"EQUAL","value":{"integerValue":"42"}}},{"fieldFilter":{"field":{"fieldPath":"key2"},"op":"LESS_THAN","value":{"integerValue":"42"}}}]}}}}}'
@firebase/firestore: WARN: '[2025-03-04T22:53:55.145Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'RunAggregationQuery' 0x4e6f8897 failed with error: ', '{"code":"failed-precondition","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:runAggregationQuery', 'request:', '{"structuredAggregationQuery":{"aggregations":[{"alias":"aggregate_0","count":{}}],"structuredQuery":{"from":[{"collectionId":"MOwX2eJZXVaZExDYwARv"}],"where":{"compositeFilter":{"op":"AND","filters":[{"fieldFilter":{"field":{"fieldPath":"key1"},"op":"EQUAL","value":{"integerValue":"42"}}},{"fieldFilter":{"field":{"fieldPath":"key2"},"op":"LESS_THAN","value":{"integerValue":"42"}}}]}}}}}'
@firebase/firestore:     âœ” getAggregateFromServer error message contains console link good if missing index
@firebase/firestore:   (Persistence=indexeddb) Aggregation queries
@firebase/firestore:     âœ” can run count query getAggregationFromServer
@firebase/firestore:     âœ” can alias aggregations using getAggregationFromServer
@firebase/firestore:     âœ” allows special chars in aliases when using getAggregationFromServer
@firebase/firestore:     âœ” allows backticks in aliases when using getAggregationFromServer
@firebase/firestore:     âœ” allows backslash in aliases when using getAggregationFromServer
@firebase/firestore:     âœ” allows aliases with length greater than 1500 bytes
@firebase/firestore:     âœ” can get duplicate aggregations using getAggregationFromServer
@firebase/firestore:     âœ” getAggregationFromServer doesn't use converter
@firebase/firestore:     âœ” aggregate query supports collection groups
@firebase/firestore:     âœ” getAggregateFromServer fails if firestore is terminated
@firebase/firestore:     âœ” terminate doesn't crash when there is aggregate query in flight
@firebase/firestore:     âœ– getAggregateFromServer fails if user is offline (skipped)
@firebase/firestore: WARN: '[2025-03-04T22:53:59.039Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'RunAggregationQuery' 0x4e6f88b6 failed with error: ', '{"code":"failed-precondition","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:runAggregationQuery', 'request:', '{"structuredAggregationQuery":{"aggregations":[{"alias":"aggregate_0","count":{}}],"structuredQuery":{"from":[{"collectionId":"ZgSH9wENpYAwnG3C8rde"}],"where":{"compositeFilter":{"op":"AND","filters":[{"fieldFilter":{"field":{"fieldPath":"key1"},"op":"EQUAL","value":{"integerValue":"42"}}},{"fieldFilter":{"field":{"fieldPath":"key2"},"op":"LESS_THAN","value":{"integerValue":"42"}}}]}}}}}'
@firebase/firestore: WARN: '[2025-03-04T22:53:59.039Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'RunAggregationQuery' 0x4e6f88b6 failed with error: ', '{"code":"failed-precondition","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:runAggregationQuery', 'request:', '{"structuredAggregationQuery":{"aggregations":[{"alias":"aggregate_0","count":{}}],"structuredQuery":{"from":[{"collectionId":"ZgSH9wENpYAwnG3C8rde"}],"where":{"compositeFilter":{"op":"AND","filters":[{"fieldFilter":{"field":{"fieldPath":"key1"},"op":"EQUAL","value":{"integerValue":"42"}}},{"fieldFilter":{"field":{"fieldPath":"key2"},"op":"LESS_THAN","value":{"integerValue":"42"}}}]}}}}}'
@firebase/firestore:     âœ” getAggregateFromServer error message contains console link good if missing index
@firebase/firestore:   (Persistence=memory_lru_gc) Aggregation queries - sum / average
@firebase/firestore:     âœ” can run sum query getAggregationFromServer
@firebase/firestore:     âœ” can run average query getAggregationFromServer
@firebase/firestore:     âœ” can get multiple aggregations using getAggregationFromServer
@firebase/firestore:     âœ” can get duplicate aggregations using getAggregationFromServer
@firebase/firestore:     âœ” can perform max (5) aggregations using getAggregationFromServer
@firebase/firestore: WARN: '[2025-03-04T22:54:01.848Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'RunAggregationQuery' 0x4e6f88c8 failed with error: ', '{"code":"invalid-argument","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:runAggregationQuery', 'request:', '{"structuredAggregationQuery":{"aggregations":[{"alias":"aggregate_0","sum":{"field":{"fieldPath":"pages"}}},{"alias":"aggregate_1","avg":{"field":{"fieldPath":"pages"}}},{"alias":"aggregate_2","count":{}},{"alias":"aggregate_3","sum":{"field":{"fieldPath":"pages"}}},{"alias":"aggregate_4","avg":{"field":{"fieldPath":"pages"}}},{"alias":"aggregate_5","count":{}}],"structuredQuery":{"from":[{"collectionId":"JLNDGyHQRQE9OEG1gess"}]}}}'
@firebase/firestore: WARN: '[2025-03-04T22:54:01.848Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'RunAggregationQuery' 0x4e6f88c8 failed with error: ', '{"code":"invalid-argument","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:runAggregationQuery', 'request:', '{"structuredAggregationQuery":{"aggregations":[{"alias":"aggregate_0","sum":{"field":{"fieldPath":"pages"}}},{"alias":"aggregate_1","avg":{"field":{"fieldPath":"pages"}}},{"alias":"aggregate_2","count":{}},{"alias":"aggregate_3","sum":{"field":{"fieldPath":"pages"}}},{"alias":"aggregate_4","avg":{"field":{"fieldPath":"pages"}}},{"alias":"aggregate_5","count":{}}],"structuredQuery":{"from":[{"collectionId":"JLNDGyHQRQE9OEG1gess"}]}}}'
@firebase/firestore:     âœ” fails when exceeding the max (5) aggregations using getAggregationFromServer
@firebase/firestore:     âœ” returns undefined when getting the result of an unrequested aggregation
@firebase/firestore:     âœ” performs aggregates when using `in` operator getAggregationFromServer
@firebase/firestore:     âœ” performs aggregations on nested map values using getAggregationFromServer
@firebase/firestore:     âœ” performs sum that results in float using getAggregationFromServer
@firebase/firestore:     âœ” performs sum of ints and floats that results in an int using getAggregationFromServer
@firebase/firestore:     âœ” performs sum that overflows max int using getAggregationFromServer
@firebase/firestore:     âœ” performs sum that can overflow integer values during accumulation using getAggregationFromServer
@firebase/firestore:     âœ” performs sum that is negative using getAggregationFromServer
@firebase/firestore:     âœ” performs sum that is positive infinity using getAggregationFromServer
@firebase/firestore:     âœ” performs sum that is positive infinity using getAggregationFromServer v2
@firebase/firestore:     âœ” performs sum that is negative infinity using getAggregationFromServer
@firebase/firestore:     âœ” performs sum that is valid but could overflow during aggregation using getAggregationFromServer
@firebase/firestore:     âœ” performs sum that includes NaN using getAggregationFromServer
@firebase/firestore:     âœ” performs sum over a result set of zero documents using getAggregationFromServer
@firebase/firestore:     âœ” performs sum only on numeric fields using getAggregationFromServer
@firebase/firestore:     âœ” performs sum of min IEEE754 using getAggregationFromServer
@firebase/firestore:     âœ” performs average of ints that results in an int using getAggregationFromServer
@firebase/firestore:     âœ” performs average of floats that results in an int using getAggregationFromServer
@firebase/firestore:     âœ” performs average of floats and ints that results in an int using getAggregationFromServer
@firebase/firestore:     âœ” performs average of float that results in float using getAggregationFromServer
@firebase/firestore:     âœ” performs average of floats and ints that results in a float using getAggregationFromServer
@firebase/firestore:     âœ” performs average of ints that results in a float using getAggregationFromServer
@firebase/firestore:     âœ” performs average causing underflow using getAggregationFromServer
@firebase/firestore:     âœ” performs average of min IEEE754 using getAggregationFromServer
@firebase/firestore:     âœ” performs average that overflows IEEE754 during accumulation using getAggregationFromServer
@firebase/firestore:     âœ” performs average that includes NaN using getAggregationFromServer
@firebase/firestore:     âœ” performs average over a result set of zero documents using getAggregationFromServer
@firebase/firestore:     âœ” performs average only on numeric fields using getAggregationFromServer
@firebase/firestore:   (Persistence=indexeddb) Aggregation queries - sum / average
@firebase/firestore:     âœ” can run sum query getAggregationFromServer
@firebase/firestore:     âœ” can run average query getAggregationFromServer
@firebase/firestore:     âœ” can get multiple aggregations using getAggregationFromServer
@firebase/firestore:     âœ” can get duplicate aggregations using getAggregationFromServer
@firebase/firestore:     âœ” can perform max (5) aggregations using getAggregationFromServer
@firebase/firestore: WARN: '[2025-03-04T22:54:15.460Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'RunAggregationQuery' 0x4e6f892e failed with error: ', '{"code":"invalid-argument","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:runAggregationQuery', 'request:', '{"structuredAggregationQuery":{"aggregations":[{"alias":"aggregate_0","sum":{"field":{"fieldPath":"pages"}}},{"alias":"aggregate_1","avg":{"field":{"fieldPath":"pages"}}},{"alias":"aggregate_2","count":{}},{"alias":"aggregate_3","sum":{"field":{"fieldPath":"pages"}}},{"alias":"aggregate_4","avg":{"field":{"fieldPath":"pages"}}},{"alias":"aggregate_5","count":{}}],"structuredQuery":{"from":[{"collectionId":"0th8PELc4qSyQRXpNRWD"}]}}}'
@firebase/firestore: WARN: '[2025-03-04T22:54:15.460Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'RunAggregationQuery' 0x4e6f892e failed with error: ', '{"code":"invalid-argument","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:runAggregationQuery', 'request:', '{"structuredAggregationQuery":{"aggregations":[{"alias":"aggregate_0","sum":{"field":{"fieldPath":"pages"}}},{"alias":"aggregate_1","avg":{"field":{"fieldPath":"pages"}}},{"alias":"aggregate_2","count":{}},{"alias":"aggregate_3","sum":{"field":{"fieldPath":"pages"}}},{"alias":"aggregate_4","avg":{"field":{"fieldPath":"pages"}}},{"alias":"aggregate_5","count":{}}],"structuredQuery":{"from":[{"collectionId":"0th8PELc4qSyQRXpNRWD"}]}}}'
@firebase/firestore:     âœ” fails when exceeding the max (5) aggregations using getAggregationFromServer
@firebase/firestore:     âœ” returns undefined when getting the result of an unrequested aggregation
@firebase/firestore:     âœ” performs aggregates when using `in` operator getAggregationFromServer
@firebase/firestore:     âœ” performs aggregations on nested map values using getAggregationFromServer
@firebase/firestore:     âœ” performs sum that results in float using getAggregationFromServer
@firebase/firestore:     âœ” performs sum of ints and floats that results in an int using getAggregationFromServer
@firebase/firestore:     âœ” performs sum that overflows max int using getAggregationFromServer
@firebase/firestore:     âœ” performs sum that can overflow integer values during accumulation using getAggregationFromServer
@firebase/firestore:     âœ” performs sum that is negative using getAggregationFromServer
@firebase/firestore:     âœ” performs sum that is positive infinity using getAggregationFromServer
@firebase/firestore:     âœ” performs sum that is positive infinity using getAggregationFromServer v2
@firebase/firestore:     âœ” performs sum that is negative infinity using getAggregationFromServer
@firebase/firestore:     âœ” performs sum that is valid but could overflow during aggregation using getAggregationFromServer
@firebase/firestore:     âœ” performs sum that includes NaN using getAggregationFromServer
@firebase/firestore:     âœ” performs sum over a result set of zero documents using getAggregationFromServer
@firebase/firestore:     âœ” performs sum only on numeric fields using getAggregationFromServer
@firebase/firestore:     âœ” performs sum of min IEEE754 using getAggregationFromServer
@firebase/firestore:     âœ” performs average of ints that results in an int using getAggregationFromServer
@firebase/firestore:     âœ” performs average of floats that results in an int using getAggregationFromServer
@firebase/firestore:     âœ” performs average of floats and ints that results in an int using getAggregationFromServer
@firebase/firestore:     âœ” performs average of float that results in float using getAggregationFromServer
@firebase/firestore:     âœ” performs average of floats and ints that results in a float using getAggregationFromServer
@firebase/firestore:     âœ” performs average of ints that results in a float using getAggregationFromServer
@firebase/firestore:     âœ” performs average causing underflow using getAggregationFromServer
@firebase/firestore:     âœ” performs average of min IEEE754 using getAggregationFromServer
@firebase/firestore:     âœ” performs average that overflows IEEE754 during accumulation using getAggregationFromServer
@firebase/firestore:     âœ” performs average that includes NaN using getAggregationFromServer
@firebase/firestore:     âœ” performs average over a result set of zero documents using getAggregationFromServer
@firebase/firestore:     âœ” performs average only on numeric fields using getAggregationFromServer
@firebase/firestore:   (Persistence=memory_lru_gc) Array Transforms:
@firebase/firestore:     âœ” create document with arrayUnion()
@firebase/firestore:     âœ” append to array via update()
@firebase/firestore:     âœ” append to array via set(..., {merge: true})
@firebase/firestore:     âœ” append object to array via update()
@firebase/firestore:     âœ” remove from array via update()
@firebase/firestore:     âœ” remove from array via set(..., {merge: true})
@firebase/firestore:     âœ” remove object from array via update()
@firebase/firestore:     âœ” arrayUnion() supports DocumentReference
@firebase/firestore:     Server Application: 
@firebase/firestore:       âœ” set() with no cached base doc
@firebase/firestore:       âœ” update() with no cached base doc
@firebase/firestore:       âœ” set(..., {merge}) with no cached based doc
@firebase/firestore:       âœ” update() with cached base doc using arrayUnion()
@firebase/firestore:       âœ” update() with cached base doc using arrayRemove()
@firebase/firestore:   (Persistence=indexeddb) Array Transforms:
@firebase/firestore:     âœ” create document with arrayUnion()
@firebase/firestore:     âœ” append to array via update()
@firebase/firestore:     âœ” append to array via set(..., {merge: true})
@firebase/firestore:     âœ” append object to array via update()
@firebase/firestore:     âœ” remove from array via update()
@firebase/firestore:     âœ” remove from array via set(..., {merge: true})
@firebase/firestore:     âœ” remove object from array via update()
@firebase/firestore:     âœ” arrayUnion() supports DocumentReference
@firebase/firestore:     Server Application: 
@firebase/firestore:       âœ” set() with no cached base doc
@firebase/firestore:       âœ” update() with no cached base doc
@firebase/firestore:       âœ” set(..., {merge}) with no cached based doc
@firebase/firestore:       âœ” update() with cached base doc using arrayUnion()
@firebase/firestore:       âœ” update() with cached base doc using arrayRemove()
@firebase/firestore:   (Persistence=memory_lru_gc) Database batch writes
@firebase/firestore:     âœ” supports empty batches
@firebase/firestore:     âœ” can set documents
@firebase/firestore:     âœ” can set documents with merge
@firebase/firestore:     âœ” can update documents
@firebase/firestore:     âœ” can update nested fields
@firebase/firestore:     âœ” can delete documents
@firebase/firestore:     âœ” commit atomically, raising correct events
@firebase/firestore:     âœ” fail atomically, raising correct events
@firebase/firestore:     âœ” write the same server timestamp across writes
@firebase/firestore:     âœ” can write the same document multiple times
@firebase/firestore:     (Persistence=memory_lru_gc) withConverter() support
@firebase/firestore:       âœ” for WriteBatch.set<T>()
@firebase/firestore:     (Persistence=indexeddb) withConverter() support
@firebase/firestore:       âœ” for WriteBatch.set<T>()
@firebase/firestore:   (Persistence=indexeddb) Database batch writes
@firebase/firestore:     âœ” supports empty batches
@firebase/firestore:     âœ” can set documents
@firebase/firestore:     âœ” can set documents with merge
@firebase/firestore:     âœ” can update documents
@firebase/firestore:     âœ” can update nested fields
@firebase/firestore:     âœ” can delete documents
@firebase/firestore:     âœ” commit atomically, raising correct events
@firebase/firestore:     âœ” fail atomically, raising correct events
@firebase/firestore:     âœ” write the same server timestamp across writes
@firebase/firestore:     âœ” can write the same document multiple times
@firebase/firestore:     (Persistence=memory_lru_gc) withConverter() support
@firebase/firestore:       âœ” for WriteBatch.set<T>()
@firebase/firestore:     (Persistence=indexeddb) withConverter() support
@firebase/firestore:       âœ” for WriteBatch.set<T>()
@firebase/firestore:   (Persistence=memory_lru_gc) Bundles
@firebase/firestore:     âœ” load with documents only with on progress and promise interface
@firebase/firestore:     âœ” load with documents and queries with promise interface
@firebase/firestore:     âœ” load for a second time skips
@firebase/firestore: ERROR: '[2025-03-04T22:54:51.696Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T22:54:51.696Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:     âœ” load with documents already pulled from backend
@firebase/firestore:     âœ” loaded documents should not be GC-ed right away
@firebase/firestore: WARN: '[2025-03-04T22:54:51.717Z]  @firebase/firestore:', 'Firestore (11.3.0): SyncEngine', 'Loading bundle failed with FirebaseError: [code=invalid-argument]: Tried to deserialize key from different project: jscore-sandbox-141b5 vs test-db2'
@firebase/firestore: WARN: '[2025-03-04T22:54:51.717Z]  @firebase/firestore:', 'Firestore (11.3.0): SyncEngine', 'Loading bundle failed with FirebaseError: [code=invalid-argument]: Tried to deserialize key from different project: jscore-sandbox-141b5 vs test-db2'
@firebase/firestore:     âœ” load with documents from other projects fails
@firebase/firestore:   (Persistence=indexeddb) Bundles
@firebase/firestore:     âœ” load with documents only with on progress and promise interface
@firebase/firestore:     âœ” load with documents and queries with promise interface
@firebase/firestore:     âœ” load for a second time skips
@firebase/firestore: ERROR: '[2025-03-04T22:54:52.497Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T22:54:52.497Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:     âœ” load with documents already pulled from backend
@firebase/firestore:     âœ” loaded documents should not be GC-ed right away
@firebase/firestore: WARN: '[2025-03-04T22:54:52.523Z]  @firebase/firestore:', 'Firestore (11.3.0): SyncEngine', 'Loading bundle failed with FirebaseError: [code=invalid-argument]: Tried to deserialize key from different project: jscore-sandbox-141b5 vs test-db2'
@firebase/firestore: WARN: '[2025-03-04T22:54:52.523Z]  @firebase/firestore:', 'Firestore (11.3.0): SyncEngine', 'Loading bundle failed with FirebaseError: [code=invalid-argument]: Tried to deserialize key from different project: jscore-sandbox-141b5 vs test-db2'
@firebase/firestore:     âœ” load with documents from other projects fails
@firebase/firestore:   (Persistence=memory_lru_gc) Composite Index Queries
@firebase/firestore:     OR Queries
@firebase/firestore:       âœ” can use query overloads
@firebase/firestore:       âœ” can use or queries
@firebase/firestore:     Aggregation queries - sum / average
@firebase/firestore:       âœ” aggregate query supports collection groups - multi-aggregate
@firebase/firestore:       âœ” performs aggregations on documents with all aggregated fields using getAggregationFromServer
@firebase/firestore:       âœ” performs aggregates on multiple fields where one aggregate could cause short-circuit due to NaN using getAggregationFromServer
@firebase/firestore:       âœ” performs aggregates when using `array-contains-any` operator getAggregationFromServer
@firebase/firestore:     Multiple Inequality
@firebase/firestore:       âœ” can use multiple inequality filters
@firebase/firestore:       âœ” can use on special values
@firebase/firestore:       âœ” can use with array membership
@firebase/firestore:       âœ” can use with nested field
@firebase/firestore:       âœ” can use with nested composite filters
@firebase/firestore:       âœ” inequality fields will be implicitly ordered lexicographically
@firebase/firestore:       âœ” can use multiple explicit order by field
@firebase/firestore:       âœ” can use in aggregate query
@firebase/firestore:       âœ” can use document ID im multiple inequality query
@firebase/firestore:       âœ” can get documents while offline
@firebase/firestore:       âœ” can get same result from server and cache
@firebase/firestore:       âœ” inequality query will reject if document key is not the last orderBy field
@firebase/firestore:       âœ” inequality query will reject if document key appears only in equality filter
@firebase/firestore:   (Persistence=indexeddb) Composite Index Queries
@firebase/firestore:     OR Queries
@firebase/firestore:       âœ” can use query overloads
@firebase/firestore:       âœ” can use or queries
@firebase/firestore:     Aggregation queries - sum / average
@firebase/firestore:       âœ” aggregate query supports collection groups - multi-aggregate
@firebase/firestore:       âœ” performs aggregations on documents with all aggregated fields using getAggregationFromServer
@firebase/firestore:       âœ” performs aggregates on multiple fields where one aggregate could cause short-circuit due to NaN using getAggregationFromServer
@firebase/firestore:       âœ” performs aggregates when using `array-contains-any` operator getAggregationFromServer
@firebase/firestore:     Multiple Inequality
@firebase/firestore:       âœ” can use multiple inequality filters
@firebase/firestore:       âœ” can use on special values
@firebase/firestore:       âœ” can use with array membership
@firebase/firestore:       âœ” can use with nested field
@firebase/firestore:       âœ” can use with nested composite filters
@firebase/firestore:       âœ” inequality fields will be implicitly ordered lexicographically
@firebase/firestore:       âœ” can use multiple explicit order by field
@firebase/firestore:       âœ” can use in aggregate query
@firebase/firestore:       âœ” can use document ID im multiple inequality query
@firebase/firestore:       âœ” can get documents while offline
@firebase/firestore:       âœ” can get same result from server and cache
@firebase/firestore:       âœ” inequality query will reject if document key is not the last orderBy field
@firebase/firestore:       âœ” inequality query will reject if document key appears only in equality filter
@firebase/firestore:   (Persistence=memory_lru_gc) Cursors
@firebase/firestore:     âœ” can page through items
@firebase/firestore:     âœ” can be created from documents
@firebase/firestore:     âœ” can be created from values
@firebase/firestore:     âœ” can be created using document id
@firebase/firestore:     âœ” can be used with reference values
@firebase/firestore:     âœ” can be used in descending queries
@firebase/firestore:     âœ” can accept Timestamps as bounds
@firebase/firestore:     âœ” can accept Timestamps in where clause
@firebase/firestore:     âœ” truncate Timestamps
@firebase/firestore:   (Persistence=indexeddb) Cursors
@firebase/firestore:     âœ” can page through items
@firebase/firestore:     âœ” can be created from documents
@firebase/firestore:     âœ” can be created from values
@firebase/firestore:     âœ” can be created using document id
@firebase/firestore:     âœ” can be used with reference values
@firebase/firestore:     âœ” can be used in descending queries
@firebase/firestore:     âœ” can accept Timestamps as bounds
@firebase/firestore:     âœ” can accept Timestamps in where clause
@firebase/firestore:     âœ” truncate Timestamps
@firebase/firestore:   (Persistence=memory_lru_gc) Database
@firebase/firestore:     âœ” can set a document
@firebase/firestore:     âœ” doc() will auto generate an ID
@firebase/firestore:     âœ” can delete a document
@firebase/firestore:     âœ” can update existing document
@firebase/firestore:     âœ” can retrieve document that does not exist
@firebase/firestore:     âœ” can update an unknown document
@firebase/firestore:     âœ” can merge data with an existing document using set
@firebase/firestore:     âœ” can merge server timestamps
@firebase/firestore:     âœ” can merge empty object
@firebase/firestore:     âœ” update with empty object replaces all fields
@firebase/firestore:     âœ” merge with empty object replaces all fields
@firebase/firestore:     âœ” can delete field using merge
@firebase/firestore:     âœ” can delete field using mergeFields
@firebase/firestore:     âœ” can set server timestamps using mergeFields
@firebase/firestore:     âœ” can replace an array by merging using set
@firebase/firestore:     âœ” can't specify a field mask for a missing field using set
@firebase/firestore:     âœ” can set a subset of fields using a field mask
@firebase/firestore:     âœ” doesn't apply field delete outside of mask
@firebase/firestore:     âœ” doesn't apply field transform outside of mask
@firebase/firestore:     âœ” can set an empty field mask
@firebase/firestore:     âœ” can specify fields multiple times in a field mask
@firebase/firestore:     âœ” cannot update nonexistent document
@firebase/firestore:     âœ” can delete a field with an update
@firebase/firestore:     âœ” can update nested fields
@firebase/firestore:     âœ” can specify updated field multiple times
@firebase/firestore:     âœ” CollectionRef.add() resolves with resulting DocumentRef.
@firebase/firestore: ERROR: '[2025-03-04T22:55:43.383Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T22:55:43.383Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:     âœ” onSnapshotsInSync fires after listeners are in sync
@firebase/firestore: ERROR: '[2025-03-04T22:55:43.526Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T22:55:43.526Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:     âœ” DocumentSnapshot events for nonexistent document
@firebase/firestore: ERROR: '[2025-03-04T22:55:43.976Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T22:55:43.976Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:     âœ” DocumentSnapshot events for add data to document
@firebase/firestore: ERROR: '[2025-03-04T22:55:44.718Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T22:55:44.718Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:     âœ” DocumentSnapshot events for change data in document
@firebase/firestore: ERROR: '[2025-03-04T22:55:45.413Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T22:55:45.413Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:     âœ” DocumentSnapshot events for delete data in document
@firebase/firestore: ERROR: '[2025-03-04T22:55:45.689Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T22:55:45.689Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T22:55:45.689Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T22:55:45.689Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:     âœ” Listen can be called multiple times
@firebase/firestore:     âœ” Metadata only changes are not fired when no options provided
@firebase/firestore:     âœ” exposes "firestore" on document references.
@firebase/firestore:     âœ” exposes "firestore" on query references.
@firebase/firestore:     âœ” can compare DocumentReference instances with isEqual().
@firebase/firestore:     âœ” can compare Query instances with isEqual().
@firebase/firestore:     âœ” can compare multiple inequality Query instances with isEqual().
@firebase/firestore:     âœ” can traverse collections and documents.
@firebase/firestore:     âœ” can traverse collection and document parents.
@firebase/firestore:     âœ” can queue writes while offline
@firebase/firestore:     âœ– offline writes are sent after restart (skipped)
@firebase/firestore:     âœ” rejects subsequent method calls after terminate() is called
@firebase/firestore:     âœ” can call terminate() multiple times
@firebase/firestore:     âœ– maintains persistence after restarting app (skipped)
@firebase/firestore:     âœ– can clear persistence if the client has been terminated (skipped)
@firebase/firestore:     âœ– can clear persistence if the client has not been initialized (skipped)
@firebase/firestore:     âœ– cannot clear persistence if the client has been initialized (skipped)
@firebase/firestore:     âœ” can get documents while offline
@firebase/firestore:     âœ” can enable and disable networking
@firebase/firestore:     âœ” can start a new instance after shut down
@firebase/firestore:     âœ” new operation after termination should throw
@firebase/firestore:     âœ” calling terminate multiple times should proceed
@firebase/firestore: ERROR: '[2025-03-04T22:55:47.447Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T22:55:47.447Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:     âœ” can unlisten queries after termination
@firebase/firestore:     âœ” can query after firestore restart
@firebase/firestore:     âœ” query listener throws error on termination
@firebase/firestore:     âœ” can wait for pending writes
@firebase/firestore:     âœ” waiting for pending writes resolves immediately when offline and no pending writes
@firebase/firestore:     âœ– can set and get data with auto detect long polling enabled (skipped)
@firebase/firestore:     âœ” can keep docs separate with multi-db when online
@firebase/firestore:     âœ” can keep docs separate with multi-db when offline
@firebase/firestore:     âœ” Cannot get document from cache with eager GC enabled.
@firebase/firestore:     âœ” Can get document from cache with Lru GC enabled.
@firebase/firestore:     âœ” Lru GC is enabled by default.
@firebase/firestore:     vector embeddings
@firebase/firestore:       âœ” can write and read vector embeddings
@firebase/firestore:       âœ” can listen to documents with vectors
@firebase/firestore:       âœ” SDK orders vector field same way as backend
@firebase/firestore:       From Cache
@firebase/firestore:         âœ” SDK orders vector field the same way online and offline
@firebase/firestore:     documents: 
@firebase/firestore:       âœ” set/update should reject: undefined
@firebase/firestore:       âœ” set/update should reject: null
@firebase/firestore:       âœ” set/update should reject: 0
@firebase/firestore:       âœ” set/update should reject: foo
@firebase/firestore:       âœ” set/update should reject: a
@firebase/firestore:       âœ” set/update should reject: Tue Mar 04 2025 14:53:29 GMT-0800 (Pacific Standard Time)
@firebase/firestore:     (Persistence=memory_lru_gc) Queries are validated client-side
@firebase/firestore:       âœ” same inequality fields works
@firebase/firestore:       âœ” inequality and equality on different fields works
@firebase/firestore:       âœ” inequality on multiple fields works
@firebase/firestore:       âœ” inequality with key fields works
@firebase/firestore:       âœ” inequality and array-contains on different fields works
@firebase/firestore:       âœ” inequality and array-contains-any on different fields works
@firebase/firestore:       âœ” multiple inequality and array-contains on different fields works
@firebase/firestore:       âœ” multiple inequality and array-contains-any on different fields works
@firebase/firestore:       âœ” inequality and IN on different fields works
@firebase/firestore:       âœ” multiple inequality and IN on different fields works
@firebase/firestore:       âœ” inequality and NOT IN on different fields works
@firebase/firestore:       âœ” multiple inequality and NOT IN on different fields works
@firebase/firestore:       âœ” inequality same as orderBy works.
@firebase/firestore:       âœ” != same as orderBy works.
@firebase/firestore:       âœ” equality different than orderBy works
@firebase/firestore:       âœ” inequality different than orderBy works.
@firebase/firestore:       âœ” multiple inequality different from orderBy works.
@firebase/firestore:       âœ” array-contains different than orderBy works
@firebase/firestore:       âœ” IN different than orderBy works
@firebase/firestore:       âœ” array-contains-any different than orderBy works
@firebase/firestore:     (Persistence=indexeddb) Queries are validated client-side
@firebase/firestore:       âœ” same inequality fields works
@firebase/firestore:       âœ” inequality and equality on different fields works
@firebase/firestore:       âœ” inequality on multiple fields works
@firebase/firestore:       âœ” inequality with key fields works
@firebase/firestore:       âœ” inequality and array-contains on different fields works
@firebase/firestore:       âœ” inequality and array-contains-any on different fields works
@firebase/firestore:       âœ” multiple inequality and array-contains on different fields works
@firebase/firestore:       âœ” multiple inequality and array-contains-any on different fields works
@firebase/firestore:       âœ” inequality and IN on different fields works
@firebase/firestore:       âœ” multiple inequality and IN on different fields works
@firebase/firestore:       âœ” inequality and NOT IN on different fields works
@firebase/firestore:       âœ” multiple inequality and NOT IN on different fields works
@firebase/firestore:       âœ” inequality same as orderBy works.
@firebase/firestore:       âœ” != same as orderBy works.
@firebase/firestore:       âœ” equality different than orderBy works
@firebase/firestore:       âœ” inequality different than orderBy works.
@firebase/firestore:       âœ” multiple inequality different from orderBy works.
@firebase/firestore:       âœ” array-contains different than orderBy works
@firebase/firestore:       âœ” IN different than orderBy works
@firebase/firestore:       âœ” array-contains-any different than orderBy works
@firebase/firestore:     Listens are rejected remotely:
@firebase/firestore:       âœ” will reject listens
@firebase/firestore:       âœ” will reject same listens twice in a row
@firebase/firestore:       âœ” will reject gets
@firebase/firestore:       âœ” will reject gets twice in a row
@firebase/firestore:     (Persistence=memory_lru_gc) withConverter() support
@firebase/firestore:       âœ” for DocumentReference.withConverter()
@firebase/firestore:       âœ” for DocumentReference.withConverter(null) 
@firebase/firestore:       âœ” for CollectionReference.withConverter()
@firebase/firestore:       âœ” for CollectionReference.withConverter(null)
@firebase/firestore:       âœ” for Query.withConverter()
@firebase/firestore:       âœ” for Query.withConverter(null)
@firebase/firestore:       âœ” requires the correct converter for Partial usage
@firebase/firestore:       âœ” WriteBatch.set() supports partials with merge
@firebase/firestore:       âœ” WriteBatch.set() supports partials with mergeFields
@firebase/firestore:       âœ” Transaction.set() supports partials with merge
@firebase/firestore:       âœ” Transaction.set() supports partials with mergeFields
@firebase/firestore:       âœ” DocumentReference.set() supports partials with merge
@firebase/firestore:       âœ” DocumentReference.set() supports partials with mergeFields
@firebase/firestore:       âœ” calls DocumentSnapshot.data() with specified SnapshotOptions
@firebase/firestore:       âœ” drops the converter when calling CollectionReference<T>.parent()
@firebase/firestore:       âœ” checks converter when comparing with isEqual()
@firebase/firestore:       âœ” Correct snapshot specified to fromFirestore() when registered with DocumentReference
@firebase/firestore:       âœ” Correct snapshot specified to fromFirestore() when registered with CollectionReference
@firebase/firestore:       âœ” Correct snapshot specified to fromFirestore() when registered with Query
@firebase/firestore:       âœ” DocumentReference.withConverter() default DbModelType
@firebase/firestore:       âœ” CollectionReference.withConverter() default DbModelType
@firebase/firestore:       âœ” Query.withConverter() default DbModelType
@firebase/firestore:     (Persistence=indexeddb) withConverter() support
@firebase/firestore:       âœ” for DocumentReference.withConverter()
@firebase/firestore:       âœ” for DocumentReference.withConverter(null) 
@firebase/firestore:       âœ” for CollectionReference.withConverter()
@firebase/firestore:       âœ” for CollectionReference.withConverter(null)
@firebase/firestore:       âœ” for Query.withConverter()
@firebase/firestore:       âœ” for Query.withConverter(null)
@firebase/firestore:       âœ” requires the correct converter for Partial usage
@firebase/firestore:       âœ” WriteBatch.set() supports partials with merge
@firebase/firestore:       âœ” WriteBatch.set() supports partials with mergeFields
@firebase/firestore:       âœ” Transaction.set() supports partials with merge
@firebase/firestore:       âœ” Transaction.set() supports partials with mergeFields
@firebase/firestore:       âœ” DocumentReference.set() supports partials with merge
@firebase/firestore:       âœ” DocumentReference.set() supports partials with mergeFields
@firebase/firestore:       âœ” calls DocumentSnapshot.data() with specified SnapshotOptions
@firebase/firestore:       âœ” drops the converter when calling CollectionReference<T>.parent()
@firebase/firestore:       âœ” checks converter when comparing with isEqual()
@firebase/firestore:       âœ” Correct snapshot specified to fromFirestore() when registered with DocumentReference
@firebase/firestore:       âœ” Correct snapshot specified to fromFirestore() when registered with CollectionReference
@firebase/firestore:       âœ” Correct snapshot specified to fromFirestore() when registered with Query
@firebase/firestore:       âœ” DocumentReference.withConverter() default DbModelType
@firebase/firestore:       âœ” CollectionReference.withConverter() default DbModelType
@firebase/firestore:       âœ” Query.withConverter() default DbModelType
@firebase/firestore:     sort documents by DocumentId
@firebase/firestore:       âœ” snapshot listener sorts query by DocumentId same way as get query
@firebase/firestore:       âœ” snapshot listener sorts filtered query by DocumentId same way as get query
@firebase/firestore:       offline
@firebase/firestore:         âœ” SDK orders query the same way online and offline
@firebase/firestore:     Sort unicode strings
@firebase/firestore:       âœ” snapshot listener sorts unicode strings the same as server
@firebase/firestore:       âœ” snapshot listener sorts unicode strings in array the same  as server
@firebase/firestore:       âœ” snapshot listener sorts unicode strings in map the same as server
@firebase/firestore:       âœ” snapshot listener sorts unicode strings in map key the same as server
@firebase/firestore:       âœ” snapshot listener sorts unicode strings in document key the same as server
@firebase/firestore:       âœ” snapshot listener sorts unicode strings in document key the same as server with persistence
@firebase/firestore:   (Persistence=indexeddb) Database
@firebase/firestore:     âœ” can set a document
@firebase/firestore:     âœ” doc() will auto generate an ID
@firebase/firestore:     âœ” can delete a document
@firebase/firestore:     âœ” can update existing document
@firebase/firestore:     âœ” can retrieve document that does not exist
@firebase/firestore:     âœ” can update an unknown document
@firebase/firestore:     âœ” can merge data with an existing document using set
@firebase/firestore:     âœ” can merge server timestamps
@firebase/firestore:     âœ” can merge empty object
@firebase/firestore:     âœ” update with empty object replaces all fields
@firebase/firestore:     âœ” merge with empty object replaces all fields
@firebase/firestore:     âœ” can delete field using merge
@firebase/firestore:     âœ” can delete field using mergeFields
@firebase/firestore:     âœ” can set server timestamps using mergeFields
@firebase/firestore:     âœ” can replace an array by merging using set
@firebase/firestore:     âœ” can't specify a field mask for a missing field using set
@firebase/firestore:     âœ” can set a subset of fields using a field mask
@firebase/firestore:     âœ” doesn't apply field delete outside of mask
@firebase/firestore:     âœ” doesn't apply field transform outside of mask
@firebase/firestore:     âœ” can set an empty field mask
@firebase/firestore:     âœ” can specify fields multiple times in a field mask
@firebase/firestore:     âœ” cannot update nonexistent document
@firebase/firestore:     âœ” can delete a field with an update
@firebase/firestore:     âœ” can update nested fields
@firebase/firestore:     âœ” can specify updated field multiple times
@firebase/firestore:     âœ” CollectionRef.add() resolves with resulting DocumentRef.
@firebase/firestore: ERROR: '[2025-03-04T22:56:29.198Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T22:56:29.198Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:     âœ” onSnapshotsInSync fires after listeners are in sync
@firebase/firestore: ERROR: '[2025-03-04T22:56:29.362Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T22:56:29.362Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:     âœ” DocumentSnapshot events for nonexistent document
@firebase/firestore: ERROR: '[2025-03-04T22:56:29.784Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T22:56:29.784Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:     âœ” DocumentSnapshot events for add data to document
@firebase/firestore: ERROR: '[2025-03-04T22:56:30.481Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T22:56:30.481Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:     âœ” DocumentSnapshot events for change data in document
@firebase/firestore: ERROR: '[2025-03-04T22:56:31.226Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T22:56:31.226Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:     âœ” DocumentSnapshot events for delete data in document
@firebase/firestore: ERROR: '[2025-03-04T22:56:31.519Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T22:56:31.519Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T22:56:31.519Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T22:56:31.519Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:     âœ” Listen can be called multiple times
@firebase/firestore:     âœ” Metadata only changes are not fired when no options provided
@firebase/firestore:     âœ” exposes "firestore" on document references.
@firebase/firestore:     âœ” exposes "firestore" on query references.
@firebase/firestore:     âœ” can compare DocumentReference instances with isEqual().
@firebase/firestore:     âœ” can compare Query instances with isEqual().
@firebase/firestore:     âœ” can compare multiple inequality Query instances with isEqual().
@firebase/firestore:     âœ” can traverse collections and documents.
@firebase/firestore:     âœ” can traverse collection and document parents.
@firebase/firestore:     âœ” can queue writes while offline
@firebase/firestore: WARN: '[2025-03-04T22:56:32.301Z]  @firebase/firestore:', 'Firestore (11.3.0): enableIndexedDbPersistence() will be deprecated in the future, you can use `FirestoreSettings.cache` instead.'
@firebase/firestore: WARN: '[2025-03-04T22:56:32.301Z]  @firebase/firestore:', 'Firestore (11.3.0): enableIndexedDbPersistence() will be deprecated in the future, you can use `FirestoreSettings.cache` instead.'
@firebase/firestore:     âœ” offline writes are sent after restart
@firebase/firestore:     âœ” rejects subsequent method calls after terminate() is called
@firebase/firestore:     âœ” can call terminate() multiple times
@firebase/firestore: WARN: '[2025-03-04T22:56:33.009Z]  @firebase/firestore:', 'Firestore (11.3.0): enableIndexedDbPersistence() will be deprecated in the future, you can use `FirestoreSettings.cache` instead.'
@firebase/firestore: WARN: '[2025-03-04T22:56:33.009Z]  @firebase/firestore:', 'Firestore (11.3.0): enableIndexedDbPersistence() will be deprecated in the future, you can use `FirestoreSettings.cache` instead.'
@firebase/firestore:     âœ” maintains persistence after restarting app
@firebase/firestore: WARN: '[2025-03-04T22:56:33.293Z]  @firebase/firestore:', 'Firestore (11.3.0): enableIndexedDbPersistence() will be deprecated in the future, you can use `FirestoreSettings.cache` instead.'
@firebase/firestore: WARN: '[2025-03-04T22:56:33.293Z]  @firebase/firestore:', 'Firestore (11.3.0): enableIndexedDbPersistence() will be deprecated in the future, you can use `FirestoreSettings.cache` instead.'
@firebase/firestore:     âœ” can clear persistence if the client has been terminated
@firebase/firestore: WARN: '[2025-03-04T22:56:33.564Z]  @firebase/firestore:', 'Firestore (11.3.0): enableIndexedDbPersistence() will be deprecated in the future, you can use `FirestoreSettings.cache` instead.'
@firebase/firestore: WARN: '[2025-03-04T22:56:33.564Z]  @firebase/firestore:', 'Firestore (11.3.0): enableIndexedDbPersistence() will be deprecated in the future, you can use `FirestoreSettings.cache` instead.'
@firebase/firestore:     âœ” can clear persistence if the client has not been initialized
@firebase/firestore:     âœ” cannot clear persistence if the client has been initialized
@firebase/firestore:     âœ” can get documents while offline
@firebase/firestore:     âœ” can enable and disable networking
@firebase/firestore:     âœ” can start a new instance after shut down
@firebase/firestore:     âœ” new operation after termination should throw
@firebase/firestore:     âœ” calling terminate multiple times should proceed
@firebase/firestore: ERROR: '[2025-03-04T22:56:34.841Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T22:56:34.841Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:     âœ” can unlisten queries after termination
@firebase/firestore:     âœ” can query after firestore restart
@firebase/firestore:     âœ” query listener throws error on termination
@firebase/firestore:     âœ” can wait for pending writes
@firebase/firestore:     âœ” waiting for pending writes resolves immediately when offline and no pending writes
@firebase/firestore:     âœ– can set and get data with auto detect long polling enabled (skipped)
@firebase/firestore:     âœ” can keep docs separate with multi-db when online
@firebase/firestore:     âœ” can keep docs separate with multi-db when offline
@firebase/firestore:     âœ” Cannot get document from cache with eager GC enabled.
@firebase/firestore:     âœ” Can get document from cache with Lru GC enabled.
@firebase/firestore:     âœ” Lru GC is enabled by default.
@firebase/firestore:     vector embeddings
@firebase/firestore:       âœ” can write and read vector embeddings
@firebase/firestore:       âœ” can listen to documents with vectors
@firebase/firestore:       âœ” SDK orders vector field same way as backend
@firebase/firestore:       From Cache
@firebase/firestore:         âœ” SDK orders vector field the same way online and offline
@firebase/firestore:     documents: 
@firebase/firestore:       âœ” set/update should reject: undefined
@firebase/firestore:       âœ” set/update should reject: null
@firebase/firestore:       âœ” set/update should reject: 0
@firebase/firestore:       âœ” set/update should reject: foo
@firebase/firestore:       âœ” set/update should reject: a
@firebase/firestore:       âœ” set/update should reject: Tue Mar 04 2025 14:53:29 GMT-0800 (Pacific Standard Time)
@firebase/firestore:     (Persistence=memory_lru_gc) Queries are validated client-side
@firebase/firestore:       âœ” same inequality fields works
@firebase/firestore:       âœ” inequality and equality on different fields works
@firebase/firestore:       âœ” inequality on multiple fields works
@firebase/firestore:       âœ” inequality with key fields works
@firebase/firestore:       âœ” inequality and array-contains on different fields works
@firebase/firestore:       âœ” inequality and array-contains-any on different fields works
@firebase/firestore:       âœ” multiple inequality and array-contains on different fields works
@firebase/firestore:       âœ” multiple inequality and array-contains-any on different fields works
@firebase/firestore:       âœ” inequality and IN on different fields works
@firebase/firestore:       âœ” multiple inequality and IN on different fields works
@firebase/firestore:       âœ” inequality and NOT IN on different fields works
@firebase/firestore:       âœ” multiple inequality and NOT IN on different fields works
@firebase/firestore:       âœ” inequality same as orderBy works.
@firebase/firestore:       âœ” != same as orderBy works.
@firebase/firestore:       âœ” equality different than orderBy works
@firebase/firestore:       âœ” inequality different than orderBy works.
@firebase/firestore:       âœ” multiple inequality different from orderBy works.
@firebase/firestore:       âœ” array-contains different than orderBy works
@firebase/firestore:       âœ” IN different than orderBy works
@firebase/firestore:       âœ” array-contains-any different than orderBy works
@firebase/firestore:     (Persistence=indexeddb) Queries are validated client-side
@firebase/firestore:       âœ” same inequality fields works
@firebase/firestore:       âœ” inequality and equality on different fields works
@firebase/firestore:       âœ” inequality on multiple fields works
@firebase/firestore:       âœ” inequality with key fields works
@firebase/firestore:       âœ” inequality and array-contains on different fields works
@firebase/firestore:       âœ” inequality and array-contains-any on different fields works
@firebase/firestore:       âœ” multiple inequality and array-contains on different fields works
@firebase/firestore:       âœ” multiple inequality and array-contains-any on different fields works
@firebase/firestore:       âœ” inequality and IN on different fields works
@firebase/firestore:       âœ” multiple inequality and IN on different fields works
@firebase/firestore:       âœ” inequality and NOT IN on different fields works
@firebase/firestore:       âœ” multiple inequality and NOT IN on different fields works
@firebase/firestore:       âœ” inequality same as orderBy works.
@firebase/firestore:       âœ” != same as orderBy works.
@firebase/firestore:       âœ” equality different than orderBy works
@firebase/firestore:       âœ” inequality different than orderBy works.
@firebase/firestore:       âœ” multiple inequality different from orderBy works.
@firebase/firestore:       âœ” array-contains different than orderBy works
@firebase/firestore:       âœ” IN different than orderBy works
@firebase/firestore:       âœ” array-contains-any different than orderBy works
@firebase/firestore:     Listens are rejected remotely:
@firebase/firestore:       âœ” will reject listens
@firebase/firestore:       âœ” will reject same listens twice in a row
@firebase/firestore:       âœ” will reject gets
@firebase/firestore:       âœ” will reject gets twice in a row
@firebase/firestore:     (Persistence=memory_lru_gc) withConverter() support
@firebase/firestore:       âœ” for DocumentReference.withConverter()
@firebase/firestore:       âœ” for DocumentReference.withConverter(null) 
@firebase/firestore:       âœ” for CollectionReference.withConverter()
@firebase/firestore:       âœ” for CollectionReference.withConverter(null)
@firebase/firestore:       âœ” for Query.withConverter()
@firebase/firestore:       âœ” for Query.withConverter(null)
@firebase/firestore:       âœ” requires the correct converter for Partial usage
@firebase/firestore:       âœ” WriteBatch.set() supports partials with merge
@firebase/firestore:       âœ” WriteBatch.set() supports partials with mergeFields
@firebase/firestore:       âœ” Transaction.set() supports partials with merge
@firebase/firestore:       âœ” Transaction.set() supports partials with mergeFields
@firebase/firestore:       âœ” DocumentReference.set() supports partials with merge
@firebase/firestore:       âœ” DocumentReference.set() supports partials with mergeFields
@firebase/firestore:       âœ” calls DocumentSnapshot.data() with specified SnapshotOptions
@firebase/firestore:       âœ” drops the converter when calling CollectionReference<T>.parent()
@firebase/firestore:       âœ” checks converter when comparing with isEqual()
@firebase/firestore:       âœ” Correct snapshot specified to fromFirestore() when registered with DocumentReference
@firebase/firestore:       âœ” Correct snapshot specified to fromFirestore() when registered with CollectionReference
@firebase/firestore:       âœ” Correct snapshot specified to fromFirestore() when registered with Query
@firebase/firestore:       âœ” DocumentReference.withConverter() default DbModelType
@firebase/firestore:       âœ” CollectionReference.withConverter() default DbModelType
@firebase/firestore:       âœ” Query.withConverter() default DbModelType
@firebase/firestore:     (Persistence=indexeddb) withConverter() support
@firebase/firestore:       âœ” for DocumentReference.withConverter()
@firebase/firestore:       âœ” for DocumentReference.withConverter(null) 
@firebase/firestore:       âœ” for CollectionReference.withConverter()
@firebase/firestore:       âœ” for CollectionReference.withConverter(null)
@firebase/firestore:       âœ” for Query.withConverter()
@firebase/firestore:       âœ” for Query.withConverter(null)
@firebase/firestore:       âœ” requires the correct converter for Partial usage
@firebase/firestore:       âœ” WriteBatch.set() supports partials with merge
@firebase/firestore:       âœ” WriteBatch.set() supports partials with mergeFields
@firebase/firestore:       âœ” Transaction.set() supports partials with merge
@firebase/firestore:       âœ” Transaction.set() supports partials with mergeFields
@firebase/firestore:       âœ” DocumentReference.set() supports partials with merge
@firebase/firestore:       âœ” DocumentReference.set() supports partials with mergeFields
@firebase/firestore:       âœ” calls DocumentSnapshot.data() with specified SnapshotOptions
@firebase/firestore:       âœ” drops the converter when calling CollectionReference<T>.parent()
@firebase/firestore:       âœ” checks converter when comparing with isEqual()
@firebase/firestore:       âœ” Correct snapshot specified to fromFirestore() when registered with DocumentReference
@firebase/firestore:       âœ” Correct snapshot specified to fromFirestore() when registered with CollectionReference
@firebase/firestore:       âœ” Correct snapshot specified to fromFirestore() when registered with Query
@firebase/firestore:       âœ” DocumentReference.withConverter() default DbModelType
@firebase/firestore:       âœ” CollectionReference.withConverter() default DbModelType
@firebase/firestore:       âœ” Query.withConverter() default DbModelType
@firebase/firestore:     sort documents by DocumentId
@firebase/firestore:       âœ” snapshot listener sorts query by DocumentId same way as get query
@firebase/firestore:       âœ” snapshot listener sorts filtered query by DocumentId same way as get query
@firebase/firestore:       offline
@firebase/firestore:         âœ” SDK orders query the same way online and offline
@firebase/firestore:     Sort unicode strings
@firebase/firestore:       âœ” snapshot listener sorts unicode strings the same as server
@firebase/firestore:       âœ” snapshot listener sorts unicode strings in array the same  as server
@firebase/firestore:       âœ” snapshot listener sorts unicode strings in map the same as server
@firebase/firestore:       âœ” snapshot listener sorts unicode strings in map key the same as server
@firebase/firestore:       âœ” snapshot listener sorts unicode strings in document key the same as server
@firebase/firestore:       âœ– snapshot listener sorts unicode strings in document key the same as server with persistence (skipped)
@firebase/firestore:   (Persistence=memory_lru_gc) Nested Fields
@firebase/firestore:     âœ” can be written with set()
@firebase/firestore:     âœ” can be read directly with .get(<string>)
@firebase/firestore:     âœ” can be read directly with .get(<FieldPath>)
@firebase/firestore:     âœ” can be updated with update(<string>)
@firebase/firestore:     âœ” can be updated with update(<FieldPath>)
@firebase/firestore:     âœ” can be used with query.where(<string>).
@firebase/firestore:     âœ” can be used with query.where(<FieldPath>).
@firebase/firestore:     âœ” can be used with query.orderBy(<string>).
@firebase/firestore:     âœ” can be used with query.orderBy(<FieldPath>).
@firebase/firestore:   (Persistence=indexeddb) Nested Fields
@firebase/firestore:     âœ” can be written with set()
@firebase/firestore:     âœ” can be read directly with .get(<string>)
@firebase/firestore:     âœ” can be read directly with .get(<FieldPath>)
@firebase/firestore:     âœ” can be updated with update(<string>)
@firebase/firestore:     âœ” can be updated with update(<FieldPath>)
@firebase/firestore:     âœ” can be used with query.where(<string>).
@firebase/firestore:     âœ” can be used with query.where(<FieldPath>).
@firebase/firestore:     âœ” can be used with query.orderBy(<string>).
@firebase/firestore:     âœ” can be used with query.orderBy(<FieldPath>).
@firebase/firestore:   (Persistence=memory_lru_gc) Fields with special characters
@firebase/firestore:     âœ” can be written with set()
@firebase/firestore:     âœ” can be read directly with .data(<field>)
@firebase/firestore:     âœ” can be updated with update()
@firebase/firestore:     âœ” can be used in query filters.
@firebase/firestore:     âœ” can be used in a query orderBy.
@firebase/firestore:   (Persistence=indexeddb) Fields with special characters
@firebase/firestore:     âœ” can be written with set()
@firebase/firestore:     âœ” can be read directly with .data(<field>)
@firebase/firestore:     âœ” can be updated with update()
@firebase/firestore:     âœ” can be used in query filters.
@firebase/firestore:     âœ” can be used in a query orderBy.
@firebase/firestore:   (Persistence=memory_lru_gc) Timestamp Fields in snapshots
@firebase/firestore:     âœ” are returned as Timestamps
@firebase/firestore:   (Persistence=indexeddb) Timestamp Fields in snapshots
@firebase/firestore:     âœ” are returned as Timestamps
@firebase/firestore:   (Persistence=memory_lru_gc) `undefined` properties
@firebase/firestore:     âœ” are ignored in set()
@firebase/firestore:     âœ” are ignored in set({ merge: true })
@firebase/firestore:     âœ” are ignored in update()
@firebase/firestore:     âœ” are ignored in Query.where()
@firebase/firestore:     âœ” are ignored in Query.startAt()
@firebase/firestore:   (Persistence=indexeddb) `undefined` properties
@firebase/firestore:     âœ” are ignored in set()
@firebase/firestore:     âœ” are ignored in set({ merge: true })
@firebase/firestore:     âœ” are ignored in update()
@firebase/firestore:     âœ” are ignored in Query.where()
@firebase/firestore:     âœ” are ignored in Query.startAt()
@firebase/firestore:   (Persistence=memory_lru_gc) GetOptions
@firebase/firestore:     âœ” get document while online with default get options
@firebase/firestore:     âœ” get collection while online with default get options
@firebase/firestore:     âœ” get document while offline with default get options
@firebase/firestore: ERROR: '[2025-03-04T22:57:23.704Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T22:57:23.704Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:     âœ” get collection while offline with default get options
@firebase/firestore: ERROR: '[2025-03-04T22:57:24.097Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T22:57:24.097Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:     âœ” get document while online with source=cache
@firebase/firestore: ERROR: '[2025-03-04T22:57:24.522Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T22:57:24.522Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:     âœ” get collection while online with source=cache
@firebase/firestore: ERROR: '[2025-03-04T22:57:24.937Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T22:57:24.937Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:     âœ” get document while offline with source=cache
@firebase/firestore: ERROR: '[2025-03-04T22:57:25.360Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T22:57:25.360Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:     âœ” get collection while offline with source=cache
@firebase/firestore:     âœ” get document while online with source=server
@firebase/firestore:     âœ” get collection while online with source=server
@firebase/firestore:     âœ” get document while offline with source=server
@firebase/firestore:     âœ” get collection while offline with source=server
@firebase/firestore: ERROR: '[2025-03-04T22:57:27.461Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T22:57:27.461Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:     âœ” get document while offline with different get options
@firebase/firestore: ERROR: '[2025-03-04T22:57:27.888Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T22:57:27.888Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:     âœ” get collection while offline with different get options
@firebase/firestore:     âœ” get nonexistent doc while online with default get options
@firebase/firestore:     âœ” get nonexistent collection while online with default get options
@firebase/firestore:     âœ” get nonexistent doc while offline with default get options
@firebase/firestore:     âœ– get deleted doc while offline with default get options (skipped)
@firebase/firestore:     âœ” get nonexistent collection while offline with default get options
@firebase/firestore:     âœ” get nonexistent doc while online with source=cache
@firebase/firestore:     âœ” get nonexistent collection while online with source=cache
@firebase/firestore:     âœ” get nonexistent doc while offline with source=cache
@firebase/firestore:     âœ” get deleted doc while offline with source=cache
@firebase/firestore:     âœ” get nonexistent collection while offline with source=cache
@firebase/firestore:     âœ” get nonexistent doc while online with source=server
@firebase/firestore:     âœ” get nonexistent collection while online with source=server
@firebase/firestore:     âœ” get nonexistent doc while offline with source=server
@firebase/firestore:     âœ” get nonexistent collection while offline with source=server
@firebase/firestore:   (Persistence=indexeddb) GetOptions
@firebase/firestore:     âœ” get document while online with default get options
@firebase/firestore:     âœ” get collection while online with default get options
@firebase/firestore:     âœ” get document while offline with default get options
@firebase/firestore: ERROR: '[2025-03-04T22:57:30.491Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T22:57:30.491Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:     âœ” get collection while offline with default get options
@firebase/firestore: ERROR: '[2025-03-04T22:57:30.922Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T22:57:30.922Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:     âœ” get document while online with source=cache
@firebase/firestore: ERROR: '[2025-03-04T22:57:31.350Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T22:57:31.350Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:     âœ” get collection while online with source=cache
@firebase/firestore: ERROR: '[2025-03-04T22:57:31.770Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T22:57:31.770Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:     âœ” get document while offline with source=cache
@firebase/firestore: ERROR: '[2025-03-04T22:57:32.209Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T22:57:32.209Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:     âœ” get collection while offline with source=cache
@firebase/firestore:     âœ” get document while online with source=server
@firebase/firestore:     âœ” get collection while online with source=server
@firebase/firestore:     âœ” get document while offline with source=server
@firebase/firestore:     âœ” get collection while offline with source=server
@firebase/firestore: ERROR: '[2025-03-04T22:57:34.335Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T22:57:34.335Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:     âœ” get document while offline with different get options
@firebase/firestore: ERROR: '[2025-03-04T22:57:34.795Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T22:57:34.795Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:     âœ” get collection while offline with different get options
@firebase/firestore:     âœ” get nonexistent doc while online with default get options
@firebase/firestore:     âœ” get nonexistent collection while online with default get options
@firebase/firestore:     âœ” get nonexistent doc while offline with default get options
@firebase/firestore:     âœ– get deleted doc while offline with default get options (skipped)
@firebase/firestore:     âœ” get nonexistent collection while offline with default get options
@firebase/firestore:     âœ” get nonexistent doc while online with source=cache
@firebase/firestore:     âœ” get nonexistent collection while online with source=cache
@firebase/firestore:     âœ” get nonexistent doc while offline with source=cache
@firebase/firestore:     âœ” get deleted doc while offline with source=cache
@firebase/firestore:     âœ” get nonexistent collection while offline with source=cache
@firebase/firestore:     âœ” get nonexistent doc while online with source=server
@firebase/firestore:     âœ” get nonexistent collection while online with source=server
@firebase/firestore:     âœ” get nonexistent doc while offline with source=server
@firebase/firestore:     âœ” get nonexistent collection while offline with source=server
@firebase/firestore: WARN: '[2025-03-04T22:57:35.725Z]  @firebase/firestore:', 'Firestore (11.3.0): Cannot enable indexes when persistence is disabled'
@firebase/firestore: WARN: '[2025-03-04T22:57:35.725Z]  @firebase/firestore:', 'Firestore (11.3.0): Cannot enable indexes when persistence is disabled'
@firebase/firestore:   (Persistence=memory_lru_gc) Index Configuration:
@firebase/firestore:     âœ” supports JSON
@firebase/firestore: WARN: '[2025-03-04T22:57:35.725Z]  @firebase/firestore:', 'Firestore (11.3.0): Cannot enable indexes when persistence is disabled'
@firebase/firestore: WARN: '[2025-03-04T22:57:35.725Z]  @firebase/firestore:', 'Firestore (11.3.0): Cannot enable indexes when persistence is disabled'
@firebase/firestore:     âœ” supports schema
@firebase/firestore: WARN: '[2025-03-04T22:57:35.730Z]  @firebase/firestore:', 'Firestore (11.3.0): Cannot enable indexes when persistence is disabled'
@firebase/firestore: WARN: '[2025-03-04T22:57:35.730Z]  @firebase/firestore:', 'Firestore (11.3.0): Cannot enable indexes when persistence is disabled'
@firebase/firestore:     âœ” bad JSON does not crash client
@firebase/firestore: WARN: '[2025-03-04T22:57:35.739Z]  @firebase/firestore:', 'Firestore (11.3.0): Cannot enable indexes when persistence is disabled'
@firebase/firestore: WARN: '[2025-03-04T22:57:35.739Z]  @firebase/firestore:', 'Firestore (11.3.0): Cannot enable indexes when persistence is disabled'
@firebase/firestore:     âœ” bad index does not crash client
@firebase/firestore:   (Persistence=indexeddb) Index Configuration:
@firebase/firestore:     âœ” supports JSON
@firebase/firestore:     âœ” supports schema
@firebase/firestore:     âœ” bad JSON does not crash client
@firebase/firestore:     âœ” bad index does not crash client
@firebase/firestore:   (Persistence=memory_lru_gc) Numeric Transforms:
@firebase/firestore:     âœ” create document with increment
@firebase/firestore:     âœ” merge on non-existing document with increment
@firebase/firestore:     âœ– increment existing integer with integer (skipped)
@firebase/firestore:     âœ” increment existing double with double
@firebase/firestore:     âœ” increment existing double with integer
@firebase/firestore:     âœ” increment existing integer with double
@firebase/firestore:     âœ” increment existing string with integer
@firebase/firestore:     âœ” increment existing string with double
@firebase/firestore:     âœ” increments with set() and merge:true
@firebase/firestore:     âœ– multiple double increments (skipped)
@firebase/firestore:     âœ” increment twice in a batch
@firebase/firestore:     âœ” increment, delete and increment in a batch
@firebase/firestore:     âœ” increment on top of ServerTimestamp
@firebase/firestore:   (Persistence=indexeddb) Numeric Transforms:
@firebase/firestore:     âœ” create document with increment
@firebase/firestore:     âœ” merge on non-existing document with increment
@firebase/firestore:     âœ– increment existing integer with integer (skipped)
@firebase/firestore:     âœ” increment existing double with double
@firebase/firestore:     âœ” increment existing double with integer
@firebase/firestore:     âœ” increment existing integer with double
@firebase/firestore:     âœ” increment existing string with integer
@firebase/firestore:     âœ” increment existing string with double
@firebase/firestore:     âœ” increments with set() and merge:true
@firebase/firestore:     âœ– multiple double increments (skipped)
@firebase/firestore:     âœ” increment twice in a batch
@firebase/firestore:     âœ” increment, delete and increment in a batch
@firebase/firestore:     âœ” increment on top of ServerTimestamp
@firebase/firestore:   (Persistence=memory_lru_gc) PersistentCacheIndexManager
@firebase/firestore:     getPersistentCacheIndexManager()
@firebase/firestore:       âœ” should return non-null if, and only if, IndexedDB persistence is enabled
@firebase/firestore:       âœ” should always return the same object
@firebase/firestore:       âœ” should fail if invoked after terminate()
@firebase/firestore:   (Persistence=indexeddb) PersistentCacheIndexManager
@firebase/firestore:     âœ” getPersistentCacheIndexManager() should return distinct instances for distinct Firestore objects
@firebase/firestore:     getPersistentCacheIndexManager()
@firebase/firestore:       âœ” should return non-null if, and only if, IndexedDB persistence is enabled
@firebase/firestore:       âœ” should always return the same object
@firebase/firestore:       âœ” should fail if invoked after terminate()
@firebase/firestore:     enable/disable persistent index auto creation
@firebase/firestore:       âœ” enable on new instance should succeed
@firebase/firestore:       âœ” disable on new instance should succeed
@firebase/firestore:       âœ” enable when already enabled should succeed
@firebase/firestore:       âœ” disable when already disabled should succeed
@firebase/firestore:       âœ” enabling after terminate() should throw
@firebase/firestore:       âœ” disabling after terminate() should throw
@firebase/firestore:       âœ” query returns correct results when index is auto-created
@firebase/firestore:     delete all persistent cache indexes
@firebase/firestore:       âœ” deleteAllPersistentCacheIndexes() on new instance should succeed
@firebase/firestore:       âœ” deleteAllPersistentCacheIndexes() should be successful when auto-indexing is enabled
@firebase/firestore:       âœ” deleteAllPersistentCacheIndexes() should be successful when auto-indexing is disabled
@firebase/firestore:       âœ” deleteAllPersistentCacheIndexes() after terminate() should throw
@firebase/firestore:       âœ” query returns correct results when auto-created index has been deleted
@firebase/firestore:   Firestore Provider
@firebase/firestore:     âœ” can provide setting
@firebase/firestore:     âœ” returns same default instance from named app
@firebase/firestore:     âœ” returns different instance from named app
@firebase/firestore:     âœ” returns same default instance from default app
@firebase/firestore:     âœ” returns different instance from different named app
@firebase/firestore:     âœ” can call initializeFirestore() twice if settings are same
@firebase/firestore: WARN: '[2025-03-04T22:57:49.720Z]  @firebase/firestore:', 'Firestore (11.3.0): enableIndexedDbPersistence() will be deprecated in the future, you can use `FirestoreSettings.cache` instead.'
@firebase/firestore: WARN: '[2025-03-04T22:57:49.720Z]  @firebase/firestore:', 'Firestore (11.3.0): enableIndexedDbPersistence() will be deprecated in the future, you can use `FirestoreSettings.cache` instead.'
@firebase/firestore:     âœ” can still use enableIndexedDbPersistence()
@firebase/firestore: WARN: '[2025-03-04T22:57:49.728Z]  @firebase/firestore:', 'Firestore (11.3.0): enableIndexedDbPersistence() will be deprecated in the future, you can use `FirestoreSettings.cache` instead.'
@firebase/firestore: WARN: '[2025-03-04T22:57:49.728Z]  @firebase/firestore:', 'Firestore (11.3.0): enableIndexedDbPersistence() will be deprecated in the future, you can use `FirestoreSettings.cache` instead.'
@firebase/firestore:     âœ” cannot mix enableIndexedDbPersistence() and settings.cache
@firebase/firestore:     âœ” cannot use once terminated
@firebase/firestore:     âœ” can call terminate() multiple times
@firebase/firestore: WARN: '[2025-03-04T22:57:49.824Z]  @firebase/firestore:', 'Firestore (11.3.0): WebChannelConnection', 'RPC 'Write' stream 0x4e6f8c9c transport errored:', jd{type: 'c', target: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, g: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, defaultPrevented: false, status: 1}
@firebase/firestore: WARN: '[2025-03-04T22:57:49.824Z]  @firebase/firestore:', 'Firestore (11.3.0): WebChannelConnection', 'RPC 'Write' stream 0x4e6f8c9c transport errored:', jd{type: 'c', target: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, g: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, defaultPrevented: false, status: 1}
@firebase/firestore: WARN: '[2025-03-04T22:57:49.902Z]  @firebase/firestore:', 'Firestore (11.3.0): WebChannelConnection', 'RPC 'Write' stream 0x4e6f8c9e transport errored:', jd{type: 'c', target: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, g: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, defaultPrevented: false, status: 1}
@firebase/firestore: WARN: '[2025-03-04T22:57:49.902Z]  @firebase/firestore:', 'Firestore (11.3.0): WebChannelConnection', 'RPC 'Write' stream 0x4e6f8c9e transport errored:', jd{type: 'c', target: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, g: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, defaultPrevented: false, status: 1}
@firebase/firestore:   (Persistence=memory_lru_gc) Queries
@firebase/firestore:     âœ” can issue limit queries
@firebase/firestore:     âœ” cannot issue limitToLast queries without explicit order-by
@firebase/firestore:     âœ” can issue limit queries using descending sort order
@firebase/firestore:     âœ” can issue limitToLast queries using descending sort order
@firebase/firestore: WARN: '[2025-03-04T22:57:51.314Z]  @firebase/firestore:', 'Firestore (11.3.0): WebChannelConnection', 'RPC 'Write' stream 0x4e6f8ca5 transport errored:', jd{type: 'c', target: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, g: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, defaultPrevented: false, status: 1}
@firebase/firestore: WARN: '[2025-03-04T22:57:51.314Z]  @firebase/firestore:', 'Firestore (11.3.0): WebChannelConnection', 'RPC 'Write' stream 0x4e6f8ca5 transport errored:', jd{type: 'c', target: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, g: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, defaultPrevented: false, status: 1}
@firebase/firestore: ERROR: '[2025-03-04T22:57:51.797Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T22:57:51.797Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:     âœ” can listen to limitToLast queries
@firebase/firestore: WARN: '[2025-03-04T22:57:52.374Z]  @firebase/firestore:', 'Firestore (11.3.0): WebChannelConnection', 'RPC 'Write' stream 0x4e6f8cab transport errored:', jd{type: 'c', target: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, g: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, defaultPrevented: false, status: 1}
@firebase/firestore: WARN: '[2025-03-04T22:57:52.374Z]  @firebase/firestore:', 'Firestore (11.3.0): WebChannelConnection', 'RPC 'Write' stream 0x4e6f8cab transport errored:', jd{type: 'c', target: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, g: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, defaultPrevented: false, status: 1}
@firebase/firestore: ERROR: '[2025-03-04T22:57:52.738Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T22:57:52.738Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T22:57:52.738Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T22:57:52.738Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:     âœ” can listen/unlisten/relisten to mirror queries
@firebase/firestore:     âœ” can issue limitToLast queries with cursors
@firebase/firestore:     âœ” key order is descending for descending inequality
@firebase/firestore:     âœ” can use unary filters
@firebase/firestore:     âœ” can filter on infinity
@firebase/firestore: WARN: '[2025-03-04T22:57:55.365Z]  @firebase/firestore:', 'Firestore (11.3.0): WebChannelConnection', 'RPC 'Write' stream 0x4e6f8cb5 transport errored:', jd{type: 'c', target: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, g: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, defaultPrevented: false, status: 1}
@firebase/firestore: WARN: '[2025-03-04T22:57:55.365Z]  @firebase/firestore:', 'Firestore (11.3.0): WebChannelConnection', 'RPC 'Write' stream 0x4e6f8cb5 transport errored:', jd{type: 'c', target: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, g: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, defaultPrevented: false, status: 1}
@firebase/firestore:     âœ” will not get metadata only updates
@firebase/firestore:     âœ” maintains correct DocumentChange indexes
@firebase/firestore:     âœ– can listen for the same query with different options (skipped)
@firebase/firestore:     âœ” can issue queries with Dates differing in milliseconds
@firebase/firestore:     âœ” can listen for QueryMetadata changes
@firebase/firestore:     âœ” can listen for metadata changes
@firebase/firestore:     âœ” can catch error message for missing index with error handler
@firebase/firestore:     âœ” can explicitly sort by document ID
@firebase/firestore:     âœ” can query by document ID
@firebase/firestore: WARN: '[2025-03-04T22:58:00.295Z]  @firebase/firestore:', 'Firestore (11.3.0): WebChannelConnection', 'RPC 'Write' stream 0x4e6f8cc9 transport errored:', jd{type: 'c', target: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, g: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, defaultPrevented: false, status: 1}
@firebase/firestore: WARN: '[2025-03-04T22:58:00.295Z]  @firebase/firestore:', 'Firestore (11.3.0): WebChannelConnection', 'RPC 'Write' stream 0x4e6f8cc9 transport errored:', jd{type: 'c', target: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, g: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, defaultPrevented: false, status: 1}
@firebase/firestore:     âœ” can query by document ID using refs
@firebase/firestore:     âœ” can query while reconnecting to network
@firebase/firestore:     âœ” trigger with isFromCache=true when offline
@firebase/firestore:     âœ” can use != filters
@firebase/firestore:     âœ” can use != filters by document ID
@firebase/firestore:     âœ” can use array-contains filters
@firebase/firestore: WARN: '[2025-03-04T22:58:03.705Z]  @firebase/firestore:', 'Firestore (11.3.0): WebChannelConnection', 'RPC 'Write' stream 0x4e6f8cd7 transport errored:', jd{type: 'c', target: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, g: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, defaultPrevented: false, status: 1}
@firebase/firestore: WARN: '[2025-03-04T22:58:03.705Z]  @firebase/firestore:', 'Firestore (11.3.0): WebChannelConnection', 'RPC 'Write' stream 0x4e6f8cd7 transport errored:', jd{type: 'c', target: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, g: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, defaultPrevented: false, status: 1}
@firebase/firestore:     âœ” can use IN filters
@firebase/firestore:     âœ” can use IN filters by document ID
@firebase/firestore:     âœ” can use NOT_IN filters
@firebase/firestore:     âœ” can use NOT_IN filters by document ID
@firebase/firestore: WARN: '[2025-03-04T22:58:07.549Z]  @firebase/firestore:', 'Firestore (11.3.0): WebChannelConnection', 'RPC 'Write' stream 0x4e6f8ce1 transport errored:', jd{type: 'c', target: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, g: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, defaultPrevented: false, status: 1}
@firebase/firestore: WARN: '[2025-03-04T22:58:07.549Z]  @firebase/firestore:', 'Firestore (11.3.0): WebChannelConnection', 'RPC 'Write' stream 0x4e6f8ce1 transport errored:', jd{type: 'c', target: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, g: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, defaultPrevented: false, status: 1}
@firebase/firestore:     âœ” can use array-contains-any filters
@firebase/firestore:     âœ” can query collection groups
@firebase/firestore:     âœ” can query collection groups with startAt / endAt by arbitrary documentId
@firebase/firestore:     âœ” can query collection groups with where filters on arbitrary documentId
@firebase/firestore:     âœ” can query custom types
@firebase/firestore:     âœ” can use filter with nested field
@firebase/firestore: WARN: '[2025-03-04T22:58:17.411Z]  @firebase/firestore:', 'Firestore (11.3.0): WebChannelConnection', 'RPC 'Write' stream 0x4e6f8cef transport errored:', jd{type: 'c', target: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, g: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, defaultPrevented: false, status: 1}
@firebase/firestore: WARN: '[2025-03-04T22:58:17.411Z]  @firebase/firestore:', 'Firestore (11.3.0): WebChannelConnection', 'RPC 'Write' stream 0x4e6f8cef transport errored:', jd{type: 'c', target: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, g: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, defaultPrevented: false, status: 1}
@firebase/firestore:     âœ” resuming a query should use bloom filter to avoid full requery
@firebase/firestore:     âœ” bloom filter should avert a full re-query when documents were added, deleted, removed, updated, and unchanged since the resume token
@firebase/firestore: WARN: '[2025-03-04T22:58:34.981Z]  @firebase/firestore:', 'Firestore (11.3.0): WebChannelConnection', 'RPC 'Write' stream 0x4e6f8cf6 transport errored:', jd{type: 'c', target: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, g: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, defaultPrevented: false, status: 1}
@firebase/firestore: WARN: '[2025-03-04T22:58:34.981Z]  @firebase/firestore:', 'Firestore (11.3.0): WebChannelConnection', 'RPC 'Write' stream 0x4e6f8cf6 transport errored:', jd{type: 'c', target: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, g: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, defaultPrevented: false, status: 1}
@firebase/firestore:     âœ” bloom filter should correctly encode complex Unicode characters
@firebase/firestore:     âœ” can query large documents with multi-byte character strings
@firebase/firestore:     OR Queries
@firebase/firestore:       âœ” can use query overloads
@firebase/firestore:       âœ” can use or queries
@firebase/firestore:       âœ” can use or queries with in
@firebase/firestore:       âœ” can use or queries with array membership
@firebase/firestore:       âœ” supports using in with array contains any
@firebase/firestore:       âœ” supports using in with array contains
@firebase/firestore:       âœ” supports order by equality
@firebase/firestore:       âœ” supports multiple in ops
@firebase/firestore: ERROR: '[2025-03-04T22:58:53.318Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T22:58:53.318Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:     Caching empty results
@firebase/firestore:       âœ” can raise initial snapshot from cache, even if it is empty
@firebase/firestore: ERROR: '[2025-03-04T22:58:53.723Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T22:58:53.723Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:       âœ” can raise initial snapshot from cache, even if it has become empty
@firebase/firestore:   (Persistence=indexeddb) Queries
@firebase/firestore:     âœ” can issue limit queries
@firebase/firestore:     âœ” cannot issue limitToLast queries without explicit order-by
@firebase/firestore:     âœ” can issue limit queries using descending sort order
@firebase/firestore:     âœ” can issue limitToLast queries using descending sort order
@firebase/firestore: ERROR: '[2025-03-04T22:58:55.728Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T22:58:55.728Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:     âœ” can listen to limitToLast queries
@firebase/firestore: ERROR: '[2025-03-04T22:58:56.541Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T22:58:56.541Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T22:58:56.541Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T22:58:56.541Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:     âœ” can listen/unlisten/relisten to mirror queries
@firebase/firestore: WARN: '[2025-03-04T22:58:57.281Z]  @firebase/firestore:', 'Firestore (11.3.0): WebChannelConnection', 'RPC 'Write' stream 0x4e6f8d1b transport errored:', jd{type: 'c', target: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, g: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, defaultPrevented: false, status: 1}
@firebase/firestore: WARN: '[2025-03-04T22:58:57.281Z]  @firebase/firestore:', 'Firestore (11.3.0): WebChannelConnection', 'RPC 'Write' stream 0x4e6f8d1b transport errored:', jd{type: 'c', target: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, g: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, defaultPrevented: false, status: 1}
@firebase/firestore:     âœ” can issue limitToLast queries with cursors
@firebase/firestore:     âœ” key order is descending for descending inequality
@firebase/firestore:     âœ” can use unary filters
@firebase/firestore:     âœ” can filter on infinity
@firebase/firestore:     âœ” will not get metadata only updates
@firebase/firestore:     âœ” maintains correct DocumentChange indexes
@firebase/firestore:     âœ– can listen for the same query with different options (skipped)
@firebase/firestore:     âœ” can issue queries with Dates differing in milliseconds
@firebase/firestore:     âœ” can listen for QueryMetadata changes
@firebase/firestore:     âœ” can listen for metadata changes
@firebase/firestore:     âœ” can catch error message for missing index with error handler
@firebase/firestore:     âœ” can explicitly sort by document ID
@firebase/firestore:     âœ” can query by document ID
@firebase/firestore:     âœ” can query by document ID using refs
@firebase/firestore:     âœ” can query while reconnecting to network
@firebase/firestore:     âœ” trigger with isFromCache=true when offline
@firebase/firestore:     âœ” can use != filters
@firebase/firestore:     âœ” can use != filters by document ID
@firebase/firestore:     âœ” can use array-contains filters
@firebase/firestore:     âœ” can use IN filters
@firebase/firestore:     âœ” can use IN filters by document ID
@firebase/firestore:     âœ” can use NOT_IN filters
@firebase/firestore:     âœ” can use NOT_IN filters by document ID
@firebase/firestore:     âœ” can use array-contains-any filters
@firebase/firestore:     âœ” can query collection groups
@firebase/firestore:     âœ” can query collection groups with startAt / endAt by arbitrary documentId
@firebase/firestore:     âœ” can query collection groups with where filters on arbitrary documentId
@firebase/firestore:     âœ” can query custom types
@firebase/firestore:     âœ” can use filter with nested field
@firebase/firestore:     âœ” resuming a query should use bloom filter to avoid full requery
@firebase/firestore:     âœ” bloom filter should avert a full re-query when documents were added, deleted, removed, updated, and unchanged since the resume token
@firebase/firestore: WARN: '[2025-03-04T22:59:40.393Z]  @firebase/firestore:', 'Firestore (11.3.0): WebChannelConnection', 'RPC 'Write' stream 0x4e6f8d5f transport errored:', jd{type: 'c', target: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, g: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, defaultPrevented: false, status: 1}
@firebase/firestore: WARN: '[2025-03-04T22:59:40.393Z]  @firebase/firestore:', 'Firestore (11.3.0): WebChannelConnection', 'RPC 'Write' stream 0x4e6f8d5f transport errored:', jd{type: 'c', target: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, g: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, defaultPrevented: false, status: 1}
@firebase/firestore:     âœ” bloom filter should correctly encode complex Unicode characters
@firebase/firestore:     âœ” can query large documents with multi-byte character strings
@firebase/firestore:     OR Queries
@firebase/firestore:       âœ” can use query overloads
@firebase/firestore:       âœ” can use or queries
@firebase/firestore:       âœ” can use or queries with in
@firebase/firestore:       âœ” can use or queries with array membership
@firebase/firestore:       âœ” supports using in with array contains any
@firebase/firestore:       âœ” supports using in with array contains
@firebase/firestore:       âœ” supports order by equality
@firebase/firestore:       âœ” supports multiple in ops
@firebase/firestore: ERROR: '[2025-03-04T22:59:56.969Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T22:59:56.969Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:     Caching empty results
@firebase/firestore:       âœ” can raise initial snapshot from cache, even if it is empty
@firebase/firestore: ERROR: '[2025-03-04T22:59:57.404Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T22:59:57.404Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:       âœ” can raise initial snapshot from cache, even if it has become empty
@firebase/firestore:   (Persistence=memory_lru_gc) Hanging query issue - #7652
@firebase/firestore:     âœ” iteration 0
@firebase/firestore:     âœ” iteration 1
@firebase/firestore:     âœ” iteration 2
@firebase/firestore:     âœ” iteration 3
@firebase/firestore:     âœ” iteration 4
@firebase/firestore:     âœ” iteration 5
@firebase/firestore:     âœ” iteration 6
@firebase/firestore:     âœ” iteration 7
@firebase/firestore:     âœ” iteration 8
@firebase/firestore:     âœ” iteration 9
@firebase/firestore:     âœ” iteration 10
@firebase/firestore:     âœ” iteration 11
@firebase/firestore:     âœ” iteration 12
@firebase/firestore:     âœ” iteration 13
@firebase/firestore:     âœ” iteration 14
@firebase/firestore:     âœ” iteration 15
@firebase/firestore:     âœ” iteration 16
@firebase/firestore:     âœ” iteration 17
@firebase/firestore:     âœ” iteration 18
@firebase/firestore:     âœ” iteration 19
@firebase/firestore:   (Persistence=indexeddb) Hanging query issue - #7652
@firebase/firestore:     âœ” iteration 0
@firebase/firestore:     âœ” iteration 1
@firebase/firestore:     âœ” iteration 2
@firebase/firestore:     âœ” iteration 3
@firebase/firestore:     âœ” iteration 4
@firebase/firestore:     âœ” iteration 5
@firebase/firestore:     âœ” iteration 6
@firebase/firestore:     âœ” iteration 7
@firebase/firestore:     âœ” iteration 8
@firebase/firestore:     âœ” iteration 9
@firebase/firestore:     âœ” iteration 10
@firebase/firestore:     âœ” iteration 11
@firebase/firestore:     âœ” iteration 12
@firebase/firestore:     âœ” iteration 13
@firebase/firestore:     âœ” iteration 14
@firebase/firestore:     âœ” iteration 15
@firebase/firestore:     âœ” iteration 16
@firebase/firestore:     âœ” iteration 17
@firebase/firestore:     âœ” iteration 18
@firebase/firestore:     âœ” iteration 19
@firebase/firestore:   (Persistence=memory_lru_gc) Server Timestamps
@firebase/firestore:     âœ” work via set()
@firebase/firestore:     âœ” work via update()
@firebase/firestore:     âœ” work via transaction set()
@firebase/firestore:     âœ” work via transaction update()
@firebase/firestore:     âœ” can return estimated value
@firebase/firestore:     âœ” can return previous value of different type
@firebase/firestore:     âœ” can return previous value through consecutive updates
@firebase/firestore:     âœ” uses previous value from local mutation
@firebase/firestore:     âœ” fail via update() on nonexistent document.
@firebase/firestore: WARN: '[2025-03-04T23:00:17.735Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x4e6f8dba failed with error: ', '{"code":"not-found","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/test-collection/rWK89zav5tNvJoG9Am13","fields":{"deep":{"mapValue":{"fields":{}}}}},"updateMask":{"fieldPaths":["deep"]},"updateTransforms":[{"fieldPath":"when","setToServerValue":"REQUEST_TIME"},{"fieldPath":"deep.when","setToServerValue":"REQUEST_TIME"}],"currentDocument":{"exists":true}}]}'
@firebase/firestore: WARN: '[2025-03-04T23:00:17.735Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x4e6f8dba failed with error: ', '{"code":"not-found","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/test-collection/rWK89zav5tNvJoG9Am13","fields":{"deep":{"mapValue":{"fields":{}}}}},"updateMask":{"fieldPaths":["deep"]},"updateTransforms":[{"fieldPath":"when","setToServerValue":"REQUEST_TIME"},{"fieldPath":"deep.when","setToServerValue":"REQUEST_TIME"}],"currentDocument":{"exists":true}}]}'
@firebase/firestore:     âœ” fail via transaction update() on nonexistent document.
@firebase/firestore:   (Persistence=indexeddb) Server Timestamps
@firebase/firestore:     âœ” work via set()
@firebase/firestore:     âœ” work via update()
@firebase/firestore:     âœ” work via transaction set()
@firebase/firestore:     âœ” work via transaction update()
@firebase/firestore:     âœ” can return estimated value
@firebase/firestore:     âœ” can return previous value of different type
@firebase/firestore:     âœ” can return previous value through consecutive updates
@firebase/firestore:     âœ” uses previous value from local mutation
@firebase/firestore:     âœ” fail via update() on nonexistent document.
@firebase/firestore: WARN: '[2025-03-04T23:00:23.252Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x4e6f8dd6 failed with error: ', '{"code":"not-found","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/test-collection/lCHZOgyK9XGPS4Z6D5vU","fields":{"deep":{"mapValue":{"fields":{}}}}},"updateMask":{"fieldPaths":["deep"]},"updateTransforms":[{"fieldPath":"when","setToServerValue":"REQUEST_TIME"},{"fieldPath":"deep.when","setToServerValue":"REQUEST_TIME"}],"currentDocument":{"exists":true}}]}'
@firebase/firestore: WARN: '[2025-03-04T23:00:23.252Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x4e6f8dd6 failed with error: ', '{"code":"not-found","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/test-collection/lCHZOgyK9XGPS4Z6D5vU","fields":{"deep":{"mapValue":{"fields":{}}}}},"updateMask":{"fieldPaths":["deep"]},"updateTransforms":[{"fieldPath":"when","setToServerValue":"REQUEST_TIME"},{"fieldPath":"deep.when","setToServerValue":"REQUEST_TIME"}],"currentDocument":{"exists":true}}]}'
@firebase/firestore:     âœ” fail via transaction update() on nonexistent document.
@firebase/firestore:   (Persistence=memory_lru_gc) Smoke Test
@firebase/firestore:     âœ” can write a single document
@firebase/firestore:     âœ” can read a written document
@firebase/firestore:     âœ” can read a written document with DocumentKey
@firebase/firestore:     âœ” will fire local and remote events
@firebase/firestore:     âœ” will fire value events for empty collections
@firebase/firestore:     âœ” can get collection query
@firebase/firestore:     âœ– can query by field and use order by (skipped)
@firebase/firestore:   (Persistence=indexeddb) Smoke Test
@firebase/firestore:     âœ” can write a single document
@firebase/firestore:     âœ” can read a written document
@firebase/firestore:     âœ” can read a written document with DocumentKey
@firebase/firestore:     âœ” will fire local and remote events
@firebase/firestore:     âœ” will fire value events for empty collections
@firebase/firestore:     âœ” can get collection query
@firebase/firestore:     âœ– can query by field and use order by (skipped)
@firebase/firestore:   (Persistence=memory_lru_gc) Snapshot Listener source options 
@firebase/firestore:     listen to persistence cache
@firebase/firestore:       âœ” can raise snapshot from cache for Query
@firebase/firestore:       âœ” can raise snapshot from cache for DocumentReference
@firebase/firestore:       âœ” listen to cache would not be affected by online status change
@firebase/firestore:       âœ” multiple listeners sourced from cache can work independently
@firebase/firestore:       âœ” can listen/un-listen/re-listen to mirror queries from cache
@firebase/firestore:       âœ” can listen to default source first and then cache
@firebase/firestore:       âœ” can listen to cache source first and then default
@firebase/firestore:       âœ” will not get metadata only updates if listening to cache only
@firebase/firestore:       âœ” will have synced metadata updates when listening to both cache and default source
@firebase/firestore:       âœ” can un-listen to default source while still listening to cache
@firebase/firestore:       âœ” can un-listen to cache while still listening to server
@firebase/firestore:       âœ” can listen/un-listen/re-listen to same query with different source options
@firebase/firestore:       âœ” can listen to composite index queries from cache
@firebase/firestore: ERROR: '[2025-03-04T23:00:36.425Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T23:00:36.425Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:       âœ” can raise initial snapshot from cache, even if it is empty
@firebase/firestore:       âœ” will not be triggered by transactions while listening to cache
@firebase/firestore:       âœ” share server side updates when listening to both cache and default
@firebase/firestore:   (Persistence=indexeddb) Snapshot Listener source options 
@firebase/firestore:     listen to persistence cache
@firebase/firestore:       âœ” can raise snapshot from cache for Query
@firebase/firestore:       âœ” can raise snapshot from cache for DocumentReference
@firebase/firestore:       âœ” listen to cache would not be affected by online status change
@firebase/firestore:       âœ” multiple listeners sourced from cache can work independently
@firebase/firestore:       âœ” can listen/un-listen/re-listen to mirror queries from cache
@firebase/firestore:       âœ” can listen to default source first and then cache
@firebase/firestore:       âœ” can listen to cache source first and then default
@firebase/firestore:       âœ” will not get metadata only updates if listening to cache only
@firebase/firestore:       âœ” will have synced metadata updates when listening to both cache and default source
@firebase/firestore:       âœ” can un-listen to default source while still listening to cache
@firebase/firestore:       âœ” can un-listen to cache while still listening to server
@firebase/firestore:       âœ” can listen/un-listen/re-listen to same query with different source options
@firebase/firestore:       âœ” can listen to composite index queries from cache
@firebase/firestore: ERROR: '[2025-03-04T23:00:46.730Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T23:00:46.730Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:       âœ” can raise initial snapshot from cache, even if it is empty
@firebase/firestore:       âœ” will not be triggered by transactions while listening to cache
@firebase/firestore:       âœ” share server side updates when listening to both cache and default
@firebase/firestore: WARN: '[2025-03-04T23:00:48.835Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x4e6f8e44 failed with error: ', '{"code":"invalid-argument","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"delete":"projects/jscore-sandbox-141b5/databases/(default)/documents/tester-docref/NxlHnAa2ojRgVKIsFtZE","currentDocument":{"updateTime":"2025-03-04T23:00:48.553790000Z"}},{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/tester-docref/NxlHnAa2ojRgVKIsFtZE","fields":{"foo":{"stringValue":"bar2"}}},"updateMask":{"fieldPaths":["foo"]},"currentDocument":{"exists":true}}]}'
@firebase/firestore: WARN: '[2025-03-04T23:00:48.835Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x4e6f8e44 failed with error: ', '{"code":"invalid-argument","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"delete":"projects/jscore-sandbox-141b5/databases/(default)/documents/tester-docref/NxlHnAa2ojRgVKIsFtZE","currentDocument":{"updateTime":"2025-03-04T23:00:48.553790000Z"}},{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/tester-docref/NxlHnAa2ojRgVKIsFtZE","fields":{"foo":{"stringValue":"bar2"}}},"updateMask":{"fieldPaths":["foo"]},"currentDocument":{"exists":true}}]}'
@firebase/firestore: WARN: '[2025-03-04T23:00:52.054Z]  @firebase/firestore:', 'Firestore (11.3.0): WebChannelConnection', 'RPC 'Write' stream 0x4e6f8e5e transport errored:', jd{type: 'c', target: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, g: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, defaultPrevented: false, status: 1}
@firebase/firestore: WARN: '[2025-03-04T23:00:52.054Z]  @firebase/firestore:', 'Firestore (11.3.0): WebChannelConnection', 'RPC 'Write' stream 0x4e6f8e5e transport errored:', jd{type: 'c', target: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, g: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, defaultPrevented: false, status: 1}
@firebase/firestore:   (Persistence=memory_lru_gc) Database transactions
@firebase/firestore:     âœ” runs transactions after getting existing document
@firebase/firestore: WARN: '[2025-03-04T23:00:53.409Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x4e6f8e6a failed with error: ', '{"code":"invalid-argument","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"delete":"projects/jscore-sandbox-141b5/databases/(default)/documents/tester-docref/nB7zrPFyVpiJ8Sq7t7FK","currentDocument":{"exists":false}},{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/tester-docref/nB7zrPFyVpiJ8Sq7t7FK","fields":{"foo":{"stringValue":"bar2"}}},"updateMask":{"fieldPaths":["foo"]},"currentDocument":{"exists":true}}]}'
@firebase/firestore: WARN: '[2025-03-04T23:00:53.409Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x4e6f8e6a failed with error: ', '{"code":"invalid-argument","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"delete":"projects/jscore-sandbox-141b5/databases/(default)/documents/tester-docref/nB7zrPFyVpiJ8Sq7t7FK","currentDocument":{"exists":false}},{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/tester-docref/nB7zrPFyVpiJ8Sq7t7FK","fields":{"foo":{"stringValue":"bar2"}}},"updateMask":{"fieldPaths":["foo"]},"currentDocument":{"exists":true}}]}'
@firebase/firestore:     âœ” runs transactions after getting nonexistent document
@firebase/firestore: WARN: '[2025-03-04T23:00:56.959Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x4e6f8e8a failed with error: ', '{"code":"invalid-argument","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"delete":"projects/jscore-sandbox-141b5/databases/(default)/documents/tester-docref/60oYA05c9WD2egyUXnEZ","currentDocument":{"exists":false}},{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/tester-docref/60oYA05c9WD2egyUXnEZ","fields":{"foo":{"stringValue":"bar2"}}},"updateMask":{"fieldPaths":["foo"]},"currentDocument":{"exists":true}}]}'
@firebase/firestore: WARN: '[2025-03-04T23:00:56.959Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x4e6f8e8a failed with error: ', '{"code":"invalid-argument","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"delete":"projects/jscore-sandbox-141b5/databases/(default)/documents/tester-docref/60oYA05c9WD2egyUXnEZ","currentDocument":{"exists":false}},{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/tester-docref/60oYA05c9WD2egyUXnEZ","fields":{"foo":{"stringValue":"bar2"}}},"updateMask":{"fieldPaths":["foo"]},"currentDocument":{"exists":true}}]}'
@firebase/firestore:     âœ” runs transactions after getting a deleted document
@firebase/firestore: WARN: '[2025-03-04T23:01:01.746Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x4e6f8ea6 failed with error: ', '{"code":"invalid-argument","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"delete":"projects/jscore-sandbox-141b5/databases/(default)/documents/tester-docref/XdWLx6jH6pGIWaIFJqKc"},{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/tester-docref/XdWLx6jH6pGIWaIFJqKc","fields":{"foo":{"stringValue":"bar2"}}},"updateMask":{"fieldPaths":["foo"]},"currentDocument":{"exists":true}}]}'
@firebase/firestore: WARN: '[2025-03-04T23:01:01.746Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x4e6f8ea6 failed with error: ', '{"code":"invalid-argument","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"delete":"projects/jscore-sandbox-141b5/databases/(default)/documents/tester-docref/XdWLx6jH6pGIWaIFJqKc"},{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/tester-docref/XdWLx6jH6pGIWaIFJqKc","fields":{"foo":{"stringValue":"bar2"}}},"updateMask":{"fieldPaths":["foo"]},"currentDocument":{"exists":true}}]}'
@firebase/firestore:     âœ” runs transactions on existing document
@firebase/firestore: WARN: '[2025-03-04T23:01:04.771Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x4e6f8eb9 failed with error: ', '{"code":"invalid-argument","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"delete":"projects/jscore-sandbox-141b5/databases/(default)/documents/tester-docref/vzpwAlMVRs1rZW20V5Gw"},{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/tester-docref/vzpwAlMVRs1rZW20V5Gw","fields":{"foo":{"stringValue":"bar2"}}},"updateMask":{"fieldPaths":["foo"]},"currentDocument":{"exists":true}}]}'
@firebase/firestore: WARN: '[2025-03-04T23:01:04.771Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x4e6f8eb9 failed with error: ', '{"code":"invalid-argument","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"delete":"projects/jscore-sandbox-141b5/databases/(default)/documents/tester-docref/vzpwAlMVRs1rZW20V5Gw"},{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/tester-docref/vzpwAlMVRs1rZW20V5Gw","fields":{"foo":{"stringValue":"bar2"}}},"updateMask":{"fieldPaths":["foo"]},"currentDocument":{"exists":true}}]}'
@firebase/firestore: WARN: '[2025-03-04T23:01:05.231Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x4e6f8ebd failed with error: ', '{"code":"not-found","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/tester-docref/166RqjftXKinefmY59xB","fields":{"foo":{"stringValue":"bar1"}}},"updateMask":{"fieldPaths":["foo"]},"currentDocument":{"exists":true}},{"delete":"projects/jscore-sandbox-141b5/databases/(default)/documents/tester-docref/166RqjftXKinefmY59xB"}]}'
@firebase/firestore: WARN: '[2025-03-04T23:01:05.231Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x4e6f8ebd failed with error: ', '{"code":"not-found","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/tester-docref/166RqjftXKinefmY59xB","fields":{"foo":{"stringValue":"bar1"}}},"updateMask":{"fieldPaths":["foo"]},"currentDocument":{"exists":true}},{"delete":"projects/jscore-sandbox-141b5/databases/(default)/documents/tester-docref/166RqjftXKinefmY59xB"}]}'
@firebase/firestore: WARN: '[2025-03-04T23:01:05.478Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x4e6f8ebf failed with error: ', '{"code":"not-found","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/tester-docref/467gXGTeTfy6pGy4F7p2","fields":{"foo":{"stringValue":"bar1"}}},"updateMask":{"fieldPaths":["foo"]},"currentDocument":{"exists":true}},{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/tester-docref/467gXGTeTfy6pGy4F7p2","fields":{"foo":{"stringValue":"bar2"}}},"updateMask":{"fieldPaths":["foo"]},"currentDocument":{"exists":true}}]}'
@firebase/firestore: WARN: '[2025-03-04T23:01:05.478Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x4e6f8ebf failed with error: ', '{"code":"not-found","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/tester-docref/467gXGTeTfy6pGy4F7p2","fields":{"foo":{"stringValue":"bar1"}}},"updateMask":{"fieldPaths":["foo"]},"currentDocument":{"exists":true}},{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/tester-docref/467gXGTeTfy6pGy4F7p2","fields":{"foo":{"stringValue":"bar2"}}},"updateMask":{"fieldPaths":["foo"]},"currentDocument":{"exists":true}}]}'
@firebase/firestore: WARN: '[2025-03-04T23:01:05.585Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x4e6f8ec1 failed with error: ', '{"code":"not-found","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/tester-docref/y7nn0xIYvPeTntpnP5Tw","fields":{"foo":{"stringValue":"bar1"}}},"updateMask":{"fieldPaths":["foo"]},"currentDocument":{"exists":true}},{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/tester-docref/y7nn0xIYvPeTntpnP5Tw","fields":{"foo":{"stringValue":"bar1"}}}}]}'
@firebase/firestore: WARN: '[2025-03-04T23:01:05.585Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x4e6f8ec1 failed with error: ', '{"code":"not-found","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/tester-docref/y7nn0xIYvPeTntpnP5Tw","fields":{"foo":{"stringValue":"bar1"}}},"updateMask":{"fieldPaths":["foo"]},"currentDocument":{"exists":true}},{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/tester-docref/y7nn0xIYvPeTntpnP5Tw","fields":{"foo":{"stringValue":"bar1"}}}}]}'
@firebase/firestore:     âœ” runs transactions on nonexistent document
@firebase/firestore:     âœ” set document with merge
@firebase/firestore:     âœ” can update nested fields transactionally
@firebase/firestore: WARN: '[2025-03-04T23:01:07.383Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x4e6f8ed2 failed with error: ', '{"code":"failed-precondition","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/counters/cN8vjCq0Vfp2XVhRpyH4","fields":{"count":{"integerValue":"16"}}}},{"verify":"projects/jscore-sandbox-141b5/databases/(default)/documents/counters/6FLMAaWr2Ae4K7TOskgl","currentDocument":{"updateTime":"2025-03-04T23:01:07.112539000Z"}}]}'
@firebase/firestore: WARN: '[2025-03-04T23:01:07.383Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x4e6f8ed2 failed with error: ', '{"code":"failed-precondition","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/counters/cN8vjCq0Vfp2XVhRpyH4","fields":{"count":{"integerValue":"16"}}}},{"verify":"projects/jscore-sandbox-141b5/databases/(default)/documents/counters/6FLMAaWr2Ae4K7TOskgl","currentDocument":{"updateTime":"2025-03-04T23:01:07.112539000Z"}}]}'
@firebase/firestore:     âœ” retry when a document that was read without being written changes
@firebase/firestore:     âœ” cannot read after writing and does not commit
@firebase/firestore:     âœ” cannot read after writing and does not commit, even if the user transaction does not bubble up the error
@firebase/firestore:     âœ” cannot read nonexistent document then update, even if document is written after the read
@firebase/firestore:     âœ” can have gets without mutations
@firebase/firestore:     âœ” does not retry on permanent errors
@firebase/firestore: WARN: '[2025-03-04T23:01:10.766Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x4e6f8eec failed with error: ', '{"code":"already-exists","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/nonexistent/Yzv9TWmHjap17eYMKA5y","fields":{"count":{"integerValue":"2"}}},"currentDocument":{"exists":false}}]}'
@firebase/firestore: WARN: '[2025-03-04T23:01:10.766Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x4e6f8eec failed with error: ', '{"code":"already-exists","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/nonexistent/Yzv9TWmHjap17eYMKA5y","fields":{"count":{"integerValue":"2"}}},"currentDocument":{"exists":false}}]}'
@firebase/firestore:     âœ” retries when document already exists
@firebase/firestore:     âœ” are successful with no transaction operations
@firebase/firestore:     âœ” are cancelled on rejected promise
@firebase/firestore:     âœ” are cancelled on throw
@firebase/firestore:     must return a promise:
@firebase/firestore:       âœ” undefined is rejected
@firebase/firestore:       âœ” null is rejected
@firebase/firestore:       âœ” 5 is rejected
@firebase/firestore:       âœ” [object Object] is rejected
@firebase/firestore:       âœ” [object Object] is rejected 
@firebase/firestore:       âœ” [object Object] is rejected 
@firebase/firestore:     (Persistence=memory_lru_gc) withConverter() support
@firebase/firestore:       âœ” for Transaction.set<T>() and Transaction.get<T>()
@firebase/firestore:     (Persistence=indexeddb) withConverter() support
@firebase/firestore:       âœ” for Transaction.set<T>() and Transaction.get<T>()
@firebase/firestore: WARN: '[2025-03-04T23:01:14.460Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x4e6f8f0b failed with error: ', '{"code":"invalid-argument","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"delete":"projects/jscore-sandbox-141b5/databases/(default)/documents/tester-docref/IQ1gKy3DvCZY13EOEVxj","currentDocument":{"updateTime":"2025-03-04T23:01:14.254676000Z"}},{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/tester-docref/IQ1gKy3DvCZY13EOEVxj","fields":{"foo":{"stringValue":"bar2"}}},"updateMask":{"fieldPaths":["foo"]},"currentDocument":{"exists":true}}]}'
@firebase/firestore: WARN: '[2025-03-04T23:01:14.460Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x4e6f8f0b failed with error: ', '{"code":"invalid-argument","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"delete":"projects/jscore-sandbox-141b5/databases/(default)/documents/tester-docref/IQ1gKy3DvCZY13EOEVxj","currentDocument":{"updateTime":"2025-03-04T23:01:14.254676000Z"}},{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/tester-docref/IQ1gKy3DvCZY13EOEVxj","fields":{"foo":{"stringValue":"bar2"}}},"updateMask":{"fieldPaths":["foo"]},"currentDocument":{"exists":true}}]}'
@firebase/firestore:   (Persistence=indexeddb) Database transactions
@firebase/firestore:     âœ” runs transactions after getting existing document
@firebase/firestore: WARN: '[2025-03-04T23:01:18.490Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x4e6f8f30 failed with error: ', '{"code":"invalid-argument","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"delete":"projects/jscore-sandbox-141b5/databases/(default)/documents/tester-docref/OpVPys8JhXH0hUWzmwOf","currentDocument":{"exists":false}},{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/tester-docref/OpVPys8JhXH0hUWzmwOf","fields":{"foo":{"stringValue":"bar2"}}},"updateMask":{"fieldPaths":["foo"]},"currentDocument":{"exists":true}}]}'
@firebase/firestore: WARN: '[2025-03-04T23:01:18.490Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x4e6f8f30 failed with error: ', '{"code":"invalid-argument","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"delete":"projects/jscore-sandbox-141b5/databases/(default)/documents/tester-docref/OpVPys8JhXH0hUWzmwOf","currentDocument":{"exists":false}},{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/tester-docref/OpVPys8JhXH0hUWzmwOf","fields":{"foo":{"stringValue":"bar2"}}},"updateMask":{"fieldPaths":["foo"]},"currentDocument":{"exists":true}}]}'
@firebase/firestore:     âœ” runs transactions after getting nonexistent document
@firebase/firestore: WARN: '[2025-03-04T23:01:21.824Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x4e6f8f50 failed with error: ', '{"code":"invalid-argument","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"delete":"projects/jscore-sandbox-141b5/databases/(default)/documents/tester-docref/mnpqTRIZ1gwCt4vqsoZo","currentDocument":{"exists":false}},{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/tester-docref/mnpqTRIZ1gwCt4vqsoZo","fields":{"foo":{"stringValue":"bar2"}}},"updateMask":{"fieldPaths":["foo"]},"currentDocument":{"exists":true}}]}'
@firebase/firestore: WARN: '[2025-03-04T23:01:21.824Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x4e6f8f50 failed with error: ', '{"code":"invalid-argument","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"delete":"projects/jscore-sandbox-141b5/databases/(default)/documents/tester-docref/mnpqTRIZ1gwCt4vqsoZo","currentDocument":{"exists":false}},{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/tester-docref/mnpqTRIZ1gwCt4vqsoZo","fields":{"foo":{"stringValue":"bar2"}}},"updateMask":{"fieldPaths":["foo"]},"currentDocument":{"exists":true}}]}'
@firebase/firestore:     âœ” runs transactions after getting a deleted document
@firebase/firestore: WARN: '[2025-03-04T23:01:26.233Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x4e6f8f6c failed with error: ', '{"code":"invalid-argument","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"delete":"projects/jscore-sandbox-141b5/databases/(default)/documents/tester-docref/ZBG0DuPa7WzHpHEWfSMV"},{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/tester-docref/ZBG0DuPa7WzHpHEWfSMV","fields":{"foo":{"stringValue":"bar2"}}},"updateMask":{"fieldPaths":["foo"]},"currentDocument":{"exists":true}}]}'
@firebase/firestore: WARN: '[2025-03-04T23:01:26.233Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x4e6f8f6c failed with error: ', '{"code":"invalid-argument","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"delete":"projects/jscore-sandbox-141b5/databases/(default)/documents/tester-docref/ZBG0DuPa7WzHpHEWfSMV"},{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/tester-docref/ZBG0DuPa7WzHpHEWfSMV","fields":{"foo":{"stringValue":"bar2"}}},"updateMask":{"fieldPaths":["foo"]},"currentDocument":{"exists":true}}]}'
@firebase/firestore:     âœ” runs transactions on existing document
@firebase/firestore: WARN: '[2025-03-04T23:01:29.298Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x4e6f8f7f failed with error: ', '{"code":"invalid-argument","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"delete":"projects/jscore-sandbox-141b5/databases/(default)/documents/tester-docref/Wh4DKHRwQaCvoMtcf01P"},{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/tester-docref/Wh4DKHRwQaCvoMtcf01P","fields":{"foo":{"stringValue":"bar2"}}},"updateMask":{"fieldPaths":["foo"]},"currentDocument":{"exists":true}}]}'
@firebase/firestore: WARN: '[2025-03-04T23:01:29.298Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x4e6f8f7f failed with error: ', '{"code":"invalid-argument","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"delete":"projects/jscore-sandbox-141b5/databases/(default)/documents/tester-docref/Wh4DKHRwQaCvoMtcf01P"},{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/tester-docref/Wh4DKHRwQaCvoMtcf01P","fields":{"foo":{"stringValue":"bar2"}}},"updateMask":{"fieldPaths":["foo"]},"currentDocument":{"exists":true}}]}'
@firebase/firestore: WARN: '[2025-03-04T23:01:29.602Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x4e6f8f83 failed with error: ', '{"code":"not-found","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/tester-docref/DXmYIIbG6iPmDTq5jN8G","fields":{"foo":{"stringValue":"bar1"}}},"updateMask":{"fieldPaths":["foo"]},"currentDocument":{"exists":true}},{"delete":"projects/jscore-sandbox-141b5/databases/(default)/documents/tester-docref/DXmYIIbG6iPmDTq5jN8G"}]}'
@firebase/firestore: WARN: '[2025-03-04T23:01:29.602Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x4e6f8f83 failed with error: ', '{"code":"not-found","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/tester-docref/DXmYIIbG6iPmDTq5jN8G","fields":{"foo":{"stringValue":"bar1"}}},"updateMask":{"fieldPaths":["foo"]},"currentDocument":{"exists":true}},{"delete":"projects/jscore-sandbox-141b5/databases/(default)/documents/tester-docref/DXmYIIbG6iPmDTq5jN8G"}]}'
@firebase/firestore: WARN: '[2025-03-04T23:01:29.699Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x4e6f8f85 failed with error: ', '{"code":"not-found","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/tester-docref/Wos5l4DVGmuzTGL8jm5G","fields":{"foo":{"stringValue":"bar1"}}},"updateMask":{"fieldPaths":["foo"]},"currentDocument":{"exists":true}},{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/tester-docref/Wos5l4DVGmuzTGL8jm5G","fields":{"foo":{"stringValue":"bar2"}}},"updateMask":{"fieldPaths":["foo"]},"currentDocument":{"exists":true}}]}'
@firebase/firestore: WARN: '[2025-03-04T23:01:29.699Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x4e6f8f85 failed with error: ', '{"code":"not-found","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/tester-docref/Wos5l4DVGmuzTGL8jm5G","fields":{"foo":{"stringValue":"bar1"}}},"updateMask":{"fieldPaths":["foo"]},"currentDocument":{"exists":true}},{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/tester-docref/Wos5l4DVGmuzTGL8jm5G","fields":{"foo":{"stringValue":"bar2"}}},"updateMask":{"fieldPaths":["foo"]},"currentDocument":{"exists":true}}]}'
@firebase/firestore: WARN: '[2025-03-04T23:01:29.790Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x4e6f8f87 failed with error: ', '{"code":"not-found","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/tester-docref/S9bXIVlDYkXULNt4GCp4","fields":{"foo":{"stringValue":"bar1"}}},"updateMask":{"fieldPaths":["foo"]},"currentDocument":{"exists":true}},{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/tester-docref/S9bXIVlDYkXULNt4GCp4","fields":{"foo":{"stringValue":"bar1"}}}}]}'
@firebase/firestore: WARN: '[2025-03-04T23:01:29.790Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x4e6f8f87 failed with error: ', '{"code":"not-found","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/tester-docref/S9bXIVlDYkXULNt4GCp4","fields":{"foo":{"stringValue":"bar1"}}},"updateMask":{"fieldPaths":["foo"]},"currentDocument":{"exists":true}},{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/tester-docref/S9bXIVlDYkXULNt4GCp4","fields":{"foo":{"stringValue":"bar1"}}}}]}'
@firebase/firestore:     âœ” runs transactions on nonexistent document
@firebase/firestore:     âœ” set document with merge
@firebase/firestore:     âœ” can update nested fields transactionally
@firebase/firestore: WARN: '[2025-03-04T23:01:31.700Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x4e6f8f98 failed with error: ', '{"code":"failed-precondition","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/counters/XjRv08NgO2TtogH9ztSt","fields":{"count":{"integerValue":"16"}}}},{"verify":"projects/jscore-sandbox-141b5/databases/(default)/documents/counters/vGo3KbTJuxRfFnRWgt8p","currentDocument":{"updateTime":"2025-03-04T23:01:31.399305000Z"}}]}'
@firebase/firestore: WARN: '[2025-03-04T23:01:31.700Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x4e6f8f98 failed with error: ', '{"code":"failed-precondition","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/counters/XjRv08NgO2TtogH9ztSt","fields":{"count":{"integerValue":"16"}}}},{"verify":"projects/jscore-sandbox-141b5/databases/(default)/documents/counters/vGo3KbTJuxRfFnRWgt8p","currentDocument":{"updateTime":"2025-03-04T23:01:31.399305000Z"}}]}'
@firebase/firestore:     âœ” retry when a document that was read without being written changes
@firebase/firestore:     âœ” cannot read after writing and does not commit
@firebase/firestore:     âœ” cannot read after writing and does not commit, even if the user transaction does not bubble up the error
@firebase/firestore:     âœ” cannot read nonexistent document then update, even if document is written after the read
@firebase/firestore:     âœ” can have gets without mutations
@firebase/firestore:     âœ” does not retry on permanent errors
@firebase/firestore: WARN: '[2025-03-04T23:01:35.783Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x4e6f8fb2 failed with error: ', '{"code":"already-exists","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/nonexistent/MwKEDqOD9ixCOzVF4Zjq","fields":{"count":{"integerValue":"2"}}},"currentDocument":{"exists":false}}]}'
@firebase/firestore: WARN: '[2025-03-04T23:01:35.783Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x4e6f8fb2 failed with error: ', '{"code":"already-exists","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/nonexistent/MwKEDqOD9ixCOzVF4Zjq","fields":{"count":{"integerValue":"2"}}},"currentDocument":{"exists":false}}]}'
@firebase/firestore:     âœ” retries when document already exists
@firebase/firestore:     âœ” are successful with no transaction operations
@firebase/firestore:     âœ” are cancelled on rejected promise
@firebase/firestore:     âœ” are cancelled on throw
@firebase/firestore:     must return a promise:
@firebase/firestore:       âœ” undefined is rejected
@firebase/firestore:       âœ” null is rejected
@firebase/firestore:       âœ” 5 is rejected
@firebase/firestore:       âœ” [object Object] is rejected
@firebase/firestore:       âœ” [object Object] is rejected 
@firebase/firestore:       âœ” [object Object] is rejected 
@firebase/firestore:     (Persistence=memory_lru_gc) withConverter() support
@firebase/firestore:       âœ” for Transaction.set<T>() and Transaction.get<T>()
@firebase/firestore:     (Persistence=indexeddb) withConverter() support
@firebase/firestore:       âœ” for Transaction.set<T>() and Transaction.get<T>()
@firebase/firestore:   (Persistence=memory_lru_gc) Firestore
@firebase/firestore:     âœ” can read and write null fields
@firebase/firestore:     âœ” can read and write number fields
@firebase/firestore:     âœ” can read and write array fields
@firebase/firestore:     âœ” can read and write geo point fields
@firebase/firestore:     âœ” can read and write bytes fields
@firebase/firestore:     âœ” can read and write date fields
@firebase/firestore:     âœ” can read and write timestamp fields
@firebase/firestore:     âœ” can read and write document references
@firebase/firestore:     âœ” can read and write document references in an array
@firebase/firestore: WARN: '[2025-03-04T23:01:48.321Z]  @firebase/firestore:', 'Firestore (11.3.0): WebChannelConnection', 'RPC 'Write' stream 0x4e6f9001 transport errored:', jd{type: 'c', target: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, g: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, defaultPrevented: false, status: 1}
@firebase/firestore: WARN: '[2025-03-04T23:01:48.321Z]  @firebase/firestore:', 'Firestore (11.3.0): WebChannelConnection', 'RPC 'Write' stream 0x4e6f9001 transport errored:', jd{type: 'c', target: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, g: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, defaultPrevented: false, status: 1}
@firebase/firestore:   (Persistence=indexeddb) Firestore
@firebase/firestore:     âœ” can read and write null fields
@firebase/firestore:     âœ” can read and write number fields
@firebase/firestore:     âœ” can read and write array fields
@firebase/firestore:     âœ” can read and write geo point fields
@firebase/firestore:     âœ” can read and write bytes fields
@firebase/firestore:     âœ” can read and write date fields
@firebase/firestore:     âœ” can read and write timestamp fields
@firebase/firestore:     âœ” can read and write document references
@firebase/firestore:     âœ” can read and write document references in an array
@firebase/firestore:   (Persistence=memory_lru_gc) Validation:
@firebase/firestore:     âœ” Batch writes require correct Document References
@firebase/firestore:     âœ” Transaction writes require correct Document References
@firebase/firestore:     âœ” Field paths must not have empty segments
@firebase/firestore:     âœ” Field paths must not have invalid segments
@firebase/firestore:     FirestoreSettings
@firebase/firestore:       âœ” disallows changing settings after use
@firebase/firestore:       âœ” enforces minimum cache size
@firebase/firestore:       âœ” garbage collection can be disabled
@firebase/firestore:       âœ” connectFirestoreEmulator() can set host and port
@firebase/firestore:       âœ” connectFirestoreEmulator() can set mockUserToken object
@firebase/firestore:       âœ” disallows calling connectFirestoreEmulator() for first time after use
@firebase/firestore:       âœ” allows calling connectFirestoreEmulator() after use with same config
@firebase/firestore:       âœ” disallows calling connectFirestoreEmulator() after use with different config
@firebase/firestore:       âœ” connectFirestoreEmulator() can set mockUserToken string
@firebase/firestore:       âœ” throws if sub / user_id is missing in mockUserToken
@firebase/firestore: WARN: '[2025-03-04T23:01:59.378Z]  @firebase/firestore:', 'Firestore (11.3.0): enableIndexedDbPersistence() will be deprecated in the future, you can use `FirestoreSettings.cache` instead.'
@firebase/firestore: WARN: '[2025-03-04T23:01:59.378Z]  @firebase/firestore:', 'Firestore (11.3.0): enableIndexedDbPersistence() will be deprecated in the future, you can use `FirestoreSettings.cache` instead.'
@firebase/firestore:     Firestore
@firebase/firestore:       âœ” disallows calling enableIndexedDbPersistence() after use
@firebase/firestore:       âœ” fails transaction if function doesn't return a Promise.
@firebase/firestore:     Collection paths
@firebase/firestore:       âœ” must be non-empty strings
@firebase/firestore:       âœ” must be odd-length
@firebase/firestore:       âœ” must not have empty segments
@firebase/firestore:     Document paths
@firebase/firestore:       âœ” must be strings
@firebase/firestore:       âœ” must be even-length
@firebase/firestore:     Writes
@firebase/firestore:       âœ” must be objects.
@firebase/firestore:       âœ” must not contain custom objects or functions.
@firebase/firestore:       âœ” must not contain field value transforms in arrays
@firebase/firestore:       âœ” must not contain directly nested arrays.
@firebase/firestore:       âœ” may contain indirectly nested arrays.
@firebase/firestore:       âœ” must not contain undefined.
@firebase/firestore:       âœ” must not contain references to a different database
@firebase/firestore:       âœ” must not contain reserved field names.
@firebase/firestore:       âœ” must not contain empty field names.
@firebase/firestore:       âœ” via set() must not contain deleteField()
@firebase/firestore:       âœ” via update() must not contain nested deleteField()
@firebase/firestore:     Array transforms
@firebase/firestore:       âœ” fail in queries
@firebase/firestore:       âœ” reject invalid elements
@firebase/firestore:       âœ” reject arrays
@firebase/firestore:     Numeric transforms
@firebase/firestore:       âœ” fail in queries
@firebase/firestore:     Queries
@firebase/firestore:       âœ” with non-positive limit fail
@firebase/firestore:       âœ” cannot be created from documents missing sort values
@firebase/firestore: ERROR: '[2025-03-04T23:02:04.296Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T23:02:04.296Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:       âœ” cannot be sorted by an uncommitted server timestamp
@firebase/firestore:       âœ” must not have more components than order by.
@firebase/firestore:       âœ” order-by-key bounds must be strings without slashes.
@firebase/firestore:       âœ” with more than one != query fail
@firebase/firestore:       âœ” with != and not-in filters fail
@firebase/firestore:       âœ” with multiple disjunctive filters fail
@firebase/firestore:       âœ” can have an IN filter with an array-contains filter.
@firebase/firestore:       âœ” enforce array requirements for disjunctive filters
@firebase/firestore:       âœ” must not specify starting or ending point after orderBy
@firebase/firestore:       âœ” must be non-empty strings or references when filtering by document ID
@firebase/firestore:       âœ” using IN and document id must have proper document references in array
@firebase/firestore:       âœ” cannot pass undefined as a field value
@firebase/firestore:       âœ” invalid query filters fail
@firebase/firestore:       âœ” passing non-filters to composite operators fails
@firebase/firestore:       âœ” conflicting operators inside a nested composite filter
@firebase/firestore:   (Persistence=indexeddb) Validation:
@firebase/firestore:     âœ” Batch writes require correct Document References
@firebase/firestore:     âœ” Transaction writes require correct Document References
@firebase/firestore:     âœ” Field paths must not have empty segments
@firebase/firestore:     âœ” Field paths must not have invalid segments
@firebase/firestore:     FirestoreSettings
@firebase/firestore:       âœ” disallows changing settings after use
@firebase/firestore:       âœ” enforces minimum cache size
@firebase/firestore:       âœ” garbage collection can be disabled
@firebase/firestore:       âœ” connectFirestoreEmulator() can set host and port
@firebase/firestore:       âœ” connectFirestoreEmulator() can set mockUserToken object
@firebase/firestore:       âœ” disallows calling connectFirestoreEmulator() for first time after use
@firebase/firestore:       âœ” allows calling connectFirestoreEmulator() after use with same config
@firebase/firestore:       âœ” disallows calling connectFirestoreEmulator() after use with different config
@firebase/firestore:       âœ” connectFirestoreEmulator() can set mockUserToken string
@firebase/firestore:       âœ” throws if sub / user_id is missing in mockUserToken
@firebase/firestore: WARN: '[2025-03-04T23:02:07.048Z]  @firebase/firestore:', 'Firestore (11.3.0): enableIndexedDbPersistence() will be deprecated in the future, you can use `FirestoreSettings.cache` instead.'
@firebase/firestore: WARN: '[2025-03-04T23:02:07.048Z]  @firebase/firestore:', 'Firestore (11.3.0): enableIndexedDbPersistence() will be deprecated in the future, you can use `FirestoreSettings.cache` instead.'
@firebase/firestore:     Firestore
@firebase/firestore:       âœ” disallows calling enableIndexedDbPersistence() after use
@firebase/firestore:       âœ” fails transaction if function doesn't return a Promise.
@firebase/firestore:     Collection paths
@firebase/firestore:       âœ” must be non-empty strings
@firebase/firestore:       âœ” must be odd-length
@firebase/firestore:       âœ” must not have empty segments
@firebase/firestore:     Document paths
@firebase/firestore:       âœ” must be strings
@firebase/firestore:       âœ” must be even-length
@firebase/firestore:     Writes
@firebase/firestore:       âœ” must be objects.
@firebase/firestore:       âœ” must not contain custom objects or functions.
@firebase/firestore:       âœ” must not contain field value transforms in arrays
@firebase/firestore:       âœ” must not contain directly nested arrays.
@firebase/firestore:       âœ” may contain indirectly nested arrays.
@firebase/firestore:       âœ” must not contain undefined.
@firebase/firestore:       âœ” must not contain references to a different database
@firebase/firestore:       âœ” must not contain reserved field names.
@firebase/firestore:       âœ” must not contain empty field names.
@firebase/firestore:       âœ” via set() must not contain deleteField()
@firebase/firestore:       âœ” via update() must not contain nested deleteField()
@firebase/firestore:     Array transforms
@firebase/firestore:       âœ” fail in queries
@firebase/firestore:       âœ” reject invalid elements
@firebase/firestore:       âœ” reject arrays
@firebase/firestore:     Numeric transforms
@firebase/firestore:       âœ” fail in queries
@firebase/firestore:     Queries
@firebase/firestore:       âœ” with non-positive limit fail
@firebase/firestore:       âœ” cannot be created from documents missing sort values
@firebase/firestore: ERROR: '[2025-03-04T23:02:10.838Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T23:02:10.838Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:       âœ” cannot be sorted by an uncommitted server timestamp
@firebase/firestore:       âœ” must not have more components than order by.
@firebase/firestore:       âœ” order-by-key bounds must be strings without slashes.
@firebase/firestore:       âœ” with more than one != query fail
@firebase/firestore:       âœ” with != and not-in filters fail
@firebase/firestore:       âœ” with multiple disjunctive filters fail
@firebase/firestore:       âœ” can have an IN filter with an array-contains filter.
@firebase/firestore:       âœ” enforce array requirements for disjunctive filters
@firebase/firestore:       âœ” must not specify starting or ending point after orderBy
@firebase/firestore:       âœ” must be non-empty strings or references when filtering by document ID
@firebase/firestore:       âœ” using IN and document id must have proper document references in array
@firebase/firestore:       âœ” cannot pass undefined as a field value
@firebase/firestore:       âœ” invalid query filters fail
@firebase/firestore:       âœ” passing non-filters to composite operators fails
@firebase/firestore:       âœ” conflicting operators inside a nested composite filter
@firebase/firestore:   Initialization
@firebase/firestore:     âœ” getAuth() before getFirestore()
@firebase/firestore:     âœ” getFirestore() before getAuth()
@firebase/firestore:     âœ” lazy-loaded getAuth()
@firebase/firestore:     âœ” getDoc() before getAuth()
@firebase/firestore:     âœ” uses user from getAuth()
@firebase/firestore:     âœ” uses user from asynchronously loaded getAuth()
@firebase/firestore:     âœ” uses user from getAuth() 
@firebase/firestore: WARN: '[2025-03-04T23:02:11.452Z]  @firebase/firestore:', 'Firestore (11.3.0): enableIndexedDbPersistence() will be deprecated in the future, you can use `FirestoreSettings.cache` instead.'
@firebase/firestore: WARN: '[2025-03-04T23:02:11.452Z]  @firebase/firestore:', 'Firestore (11.3.0): enableIndexedDbPersistence() will be deprecated in the future, you can use `FirestoreSettings.cache` instead.'
@firebase/firestore:     with IndexedDB
@firebase/firestore:       âœ” getAuth() before explicitly initializing Firestore
@firebase/firestore: WARN: '[2025-03-04T23:02:11.599Z]  @firebase/firestore:', 'Firestore (11.3.0): enableIndexedDbPersistence() will be deprecated in the future, you can use `FirestoreSettings.cache` instead.'
@firebase/firestore: WARN: '[2025-03-04T23:02:11.599Z]  @firebase/firestore:', 'Firestore (11.3.0): enableIndexedDbPersistence() will be deprecated in the future, you can use `FirestoreSettings.cache` instead.'
@firebase/firestore:       âœ” explicitly initialize Firestore before getAuth()
@firebase/firestore: WARN: '[2025-03-04T23:02:11.750Z]  @firebase/firestore:', 'Firestore (11.3.0): enableIndexedDbPersistence() will be deprecated in the future, you can use `FirestoreSettings.cache` instead.'
@firebase/firestore: WARN: '[2025-03-04T23:02:11.750Z]  @firebase/firestore:', 'Firestore (11.3.0): enableIndexedDbPersistence() will be deprecated in the future, you can use `FirestoreSettings.cache` instead.'
@firebase/firestore:       âœ” getFirestore() followed by getAuth() followed by explicitly initialization
@firebase/firestore:   (Persistence=memory_lru_gc) Database (with internal API)
@firebase/firestore:     âœ– will reject the promise if clear persistence fails (skipped)
@firebase/firestore:     âœ” waiting for pending writes should fail when user changes
@firebase/firestore:     âœ” app delete leads to instance termination
@firebase/firestore:   (Persistence=indexeddb) Database (with internal API)
@firebase/firestore:     âœ” will reject the promise if clear persistence fails
@firebase/firestore: WARN: '[2025-03-04T23:02:12.206Z]  @firebase/app:', 'Firebase: Firebase App named 'test-app-1580' already deleted (app/app-deleted).'
@firebase/firestore: WARN: '[2025-03-04T23:02:12.206Z]  @firebase/app:', 'Firebase: Firebase App named 'test-app-1580' already deleted (app/app-deleted).'
@firebase/firestore: WARN: '[2025-03-04T23:02:12.206Z]  @firebase/app:', 'Firebase: Firebase App named 'test-app-1580' already deleted (app/app-deleted).'
@firebase/firestore: WARN: '[2025-03-04T23:02:12.206Z]  @firebase/app:', 'Firebase: Firebase App named 'test-app-1580' already deleted (app/app-deleted).'
@firebase/firestore: WARN: '[2025-03-04T23:02:12.206Z]  @firebase/app:', 'Firebase: Firebase App named 'test-app-1580' already deleted (app/app-deleted).'
@firebase/firestore: WARN: '[2025-03-04T23:02:12.206Z]  @firebase/app:', 'Firebase: Firebase App named 'test-app-1580' already deleted (app/app-deleted).'
@firebase/firestore:     âœ” waiting for pending writes should fail when user changes
@firebase/firestore:     âœ” app delete leads to instance termination
@firebase/firestore:   (Persistence=memory_lru_gc) Idle Timeout
@firebase/firestore:     âœ” can write document after idle timeout
@firebase/firestore:     âœ” can watch documents after idle timeout
@firebase/firestore:   (Persistence=indexeddb) Idle Timeout
@firebase/firestore:     âœ” can write document after idle timeout
@firebase/firestore:     âœ” can watch documents after idle timeout
@firebase/firestore: WARN: '[2025-03-04T23:02:14.880Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x4e6f90fc failed with error: ', '{"code":"failed-precondition","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/counters/4KhFw3as5y1XGH3ny0oE","fields":{"count":{"integerValue":"6"}}},"currentDocument":{"updateTime":"2025-03-04T23:02:14.582929000Z"}}]}'
@firebase/firestore: WARN: '[2025-03-04T23:02:14.880Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x4e6f90fc failed with error: ', '{"code":"failed-precondition","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/counters/4KhFw3as5y1XGH3ny0oE","fields":{"count":{"integerValue":"6"}}},"currentDocument":{"updateTime":"2025-03-04T23:02:14.582929000Z"}}]}'
@firebase/firestore: WARN: '[2025-03-04T23:02:14.957Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x4e6f90fe failed with error: ', '{"code":"failed-precondition","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/counters/4KhFw3as5y1XGH3ny0oE","fields":{"count":{"integerValue":"6"}}},"currentDocument":{"updateTime":"2025-03-04T23:02:14.582929000Z"}}]}'
@firebase/firestore: WARN: '[2025-03-04T23:02:14.957Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x4e6f90fe failed with error: ', '{"code":"failed-precondition","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/counters/4KhFw3as5y1XGH3ny0oE","fields":{"count":{"integerValue":"6"}}},"currentDocument":{"updateTime":"2025-03-04T23:02:14.582929000Z"}}]}'
@firebase/firestore: WARN: '[2025-03-04T23:02:15.261Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x4e6f9106 failed with error: ', '{"code":"failed-precondition","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/counters/4KhFw3as5y1XGH3ny0oE","fields":{"count":{"integerValue":"7"}}},"currentDocument":{"updateTime":"2025-03-04T23:02:14.812506000Z"}}]}'
@firebase/firestore: WARN: '[2025-03-04T23:02:15.261Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x4e6f9106 failed with error: ', '{"code":"failed-precondition","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/counters/4KhFw3as5y1XGH3ny0oE","fields":{"count":{"integerValue":"7"}}},"currentDocument":{"updateTime":"2025-03-04T23:02:14.812506000Z"}}]}'
@firebase/firestore:   (Persistence=memory_lru_gc) Database transactions (with internal API)
@firebase/firestore:     âœ” should increment transactionally
@firebase/firestore: WARN: '[2025-03-04T23:02:16.208Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x4e6f9116 failed with error: ', '{"code":"failed-precondition","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/counters/ZJfbttOoUENPsT3OQQbY","fields":{"count":{"integerValue":"6"}}},"updateMask":{"fieldPaths":["count"]},"currentDocument":{"updateTime":"2025-03-04T23:02:15.909884000Z"}}]}'
@firebase/firestore: WARN: '[2025-03-04T23:02:16.208Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x4e6f9116 failed with error: ', '{"code":"failed-precondition","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/counters/ZJfbttOoUENPsT3OQQbY","fields":{"count":{"integerValue":"6"}}},"updateMask":{"fieldPaths":["count"]},"currentDocument":{"updateTime":"2025-03-04T23:02:15.909884000Z"}}]}'
@firebase/firestore: WARN: '[2025-03-04T23:02:16.313Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x4e6f9118 failed with error: ', '{"code":"failed-precondition","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/counters/ZJfbttOoUENPsT3OQQbY","fields":{"count":{"integerValue":"6"}}},"updateMask":{"fieldPaths":["count"]},"currentDocument":{"updateTime":"2025-03-04T23:02:15.909884000Z"}}]}'
@firebase/firestore: WARN: '[2025-03-04T23:02:16.313Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x4e6f9118 failed with error: ', '{"code":"failed-precondition","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/counters/ZJfbttOoUENPsT3OQQbY","fields":{"count":{"integerValue":"6"}}},"updateMask":{"fieldPaths":["count"]},"currentDocument":{"updateTime":"2025-03-04T23:02:15.909884000Z"}}]}'
@firebase/firestore: WARN: '[2025-03-04T23:02:16.612Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x4e6f9120 failed with error: ', '{"code":"failed-precondition","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/counters/ZJfbttOoUENPsT3OQQbY","fields":{"count":{"integerValue":"7"}}},"updateMask":{"fieldPaths":["count"]},"currentDocument":{"updateTime":"2025-03-04T23:02:16.132097000Z"}}]}'
@firebase/firestore: WARN: '[2025-03-04T23:02:16.612Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x4e6f9120 failed with error: ', '{"code":"failed-precondition","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/counters/ZJfbttOoUENPsT3OQQbY","fields":{"count":{"integerValue":"7"}}},"updateMask":{"fieldPaths":["count"]},"currentDocument":{"updateTime":"2025-03-04T23:02:16.132097000Z"}}]}'
@firebase/firestore:     âœ” should update transactionally
@firebase/firestore:     âœ” should fail transaction (maxAttempts: default) when reading a doc twice with different versions
@firebase/firestore:     âœ” should fail transaction (maxAttempts: 1) when reading a doc twice with different versions
@firebase/firestore: WARN: '[2025-03-04T23:02:20.254Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x4e6f914c failed with error: ', '{"code":"failed-precondition","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/counters/S67w9DuxFix5Fcc117RY","fields":{"count":{"integerValue":"6"}}},"currentDocument":{"updateTime":"2025-03-04T23:02:19.946688000Z"}}]}'
@firebase/firestore: WARN: '[2025-03-04T23:02:20.254Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x4e6f914c failed with error: ', '{"code":"failed-precondition","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/counters/S67w9DuxFix5Fcc117RY","fields":{"count":{"integerValue":"6"}}},"currentDocument":{"updateTime":"2025-03-04T23:02:19.946688000Z"}}]}'
@firebase/firestore: WARN: '[2025-03-04T23:02:20.355Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x4e6f914e failed with error: ', '{"code":"failed-precondition","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/counters/S67w9DuxFix5Fcc117RY","fields":{"count":{"integerValue":"6"}}},"currentDocument":{"updateTime":"2025-03-04T23:02:19.946688000Z"}}]}'
@firebase/firestore: WARN: '[2025-03-04T23:02:20.355Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x4e6f914e failed with error: ', '{"code":"failed-precondition","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/counters/S67w9DuxFix5Fcc117RY","fields":{"count":{"integerValue":"6"}}},"currentDocument":{"updateTime":"2025-03-04T23:02:19.946688000Z"}}]}'
@firebase/firestore: WARN: '[2025-03-04T23:02:20.739Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x4e6f9156 failed with error: ', '{"code":"failed-precondition","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/counters/S67w9DuxFix5Fcc117RY","fields":{"count":{"integerValue":"7"}}},"currentDocument":{"updateTime":"2025-03-04T23:02:20.172059000Z"}}]}'
@firebase/firestore: WARN: '[2025-03-04T23:02:20.739Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x4e6f9156 failed with error: ', '{"code":"failed-precondition","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/counters/S67w9DuxFix5Fcc117RY","fields":{"count":{"integerValue":"7"}}},"currentDocument":{"updateTime":"2025-03-04T23:02:20.172059000Z"}}]}'
@firebase/firestore:   (Persistence=indexeddb) Database transactions (with internal API)
@firebase/firestore:     âœ” should increment transactionally
@firebase/firestore: WARN: '[2025-03-04T23:02:21.749Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x4e6f9166 failed with error: ', '{"code":"failed-precondition","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/counters/QuUeH8tlVRMl3Lz9sAeY","fields":{"count":{"integerValue":"6"}}},"updateMask":{"fieldPaths":["count"]},"currentDocument":{"updateTime":"2025-03-04T23:02:21.407021000Z"}}]}'
@firebase/firestore: WARN: '[2025-03-04T23:02:21.749Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x4e6f9166 failed with error: ', '{"code":"failed-precondition","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/counters/QuUeH8tlVRMl3Lz9sAeY","fields":{"count":{"integerValue":"6"}}},"updateMask":{"fieldPaths":["count"]},"currentDocument":{"updateTime":"2025-03-04T23:02:21.407021000Z"}}]}'
@firebase/firestore: WARN: '[2025-03-04T23:02:21.832Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x4e6f9168 failed with error: ', '{"code":"failed-precondition","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/counters/QuUeH8tlVRMl3Lz9sAeY","fields":{"count":{"integerValue":"6"}}},"updateMask":{"fieldPaths":["count"]},"currentDocument":{"updateTime":"2025-03-04T23:02:21.407021000Z"}}]}'
@firebase/firestore: WARN: '[2025-03-04T23:02:21.832Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x4e6f9168 failed with error: ', '{"code":"failed-precondition","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/counters/QuUeH8tlVRMl3Lz9sAeY","fields":{"count":{"integerValue":"6"}}},"updateMask":{"fieldPaths":["count"]},"currentDocument":{"updateTime":"2025-03-04T23:02:21.407021000Z"}}]}'
@firebase/firestore: WARN: '[2025-03-04T23:02:22.138Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x4e6f9170 failed with error: ', '{"code":"failed-precondition","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/counters/QuUeH8tlVRMl3Lz9sAeY","fields":{"count":{"integerValue":"7"}}},"updateMask":{"fieldPaths":["count"]},"currentDocument":{"updateTime":"2025-03-04T23:02:21.651957000Z"}}]}'
@firebase/firestore: WARN: '[2025-03-04T23:02:22.138Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x4e6f9170 failed with error: ', '{"code":"failed-precondition","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/counters/QuUeH8tlVRMl3Lz9sAeY","fields":{"count":{"integerValue":"7"}}},"updateMask":{"fieldPaths":["count"]},"currentDocument":{"updateTime":"2025-03-04T23:02:21.651957000Z"}}]}'
@firebase/firestore:     âœ” should update transactionally
@firebase/firestore:     âœ” should fail transaction (maxAttempts: default) when reading a doc twice with different versions
@firebase/firestore:     âœ” should fail transaction (maxAttempts: 1) when reading a doc twice with different versions
@firebase/firestore:   WebChannel
@firebase/firestore:     âœ” receives error messages
@firebase/firestore:   Remote Storage
@firebase/firestore:     âœ” can write
@firebase/firestore:     âœ” can read
@firebase/firestore:     âœ” can read deleted documents
@firebase/firestore:   Watch Stream
@firebase/firestore:     âœ” can be stopped before handshake
@firebase/firestore:     âœ” gets connected event before first message
@firebase/firestore:   Write Stream
@firebase/firestore:     âœ” can be stopped before handshake
@firebase/firestore: ERROR: '[2025-03-04T23:02:26.209Z]  @firebase/firestore:', 'Firestore (11.3.0): FIRESTORE (11.3.0) INTERNAL ASSERTION FAILED: Handshake must be complete before writing mutations'
@firebase/firestore: ERROR: '[2025-03-04T23:02:26.209Z]  @firebase/firestore:', 'Firestore (11.3.0): FIRESTORE (11.3.0) INTERNAL ASSERTION FAILED: Handshake must be complete before writing mutations'
@firebase/firestore:     âœ” can be stopped after handshake
@firebase/firestore:     âœ” closes when idle
@firebase/firestore:     âœ” cancels idle on write
@firebase/firestore: WARN: '[2025-03-04T23:02:27.151Z]  @firebase/firestore:', 'Firestore (11.3.0): WebChannelConnection', 'RPC 'Write' stream 0x4e6f91a4 transport errored:', jd{type: 'c', target: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, g: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, defaultPrevented: false, status: 1}
@firebase/firestore: WARN: '[2025-03-04T23:02:27.151Z]  @firebase/firestore:', 'Firestore (11.3.0): WebChannelConnection', 'RPC 'Write' stream 0x4e6f91a4 transport errored:', jd{type: 'c', target: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, g: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, defaultPrevented: false, status: 1}
@firebase/firestore:     âœ” force refreshes auth token on receiving unauthenticated error
@firebase/firestore: Finished in 8 mins 58.332 secs / 8 mins 48.796 secs @ 15:02:27 GMT-0800 (Pacific Standard Time)
@firebase/firestore: SUMMARY:
@firebase/firestore: âœ” 2918 tests completed
@firebase/firestore: â„¹ 169 tests skipped
@firebase/firestore: TOTAL: 2918 SUCCESS
@firebase/firestore: > @firebase/firestore@4.7.9 test:travis
@firebase/firestore: > ts-node --compiler-options='{"module":"commonjs"}' ../../scripts/emulator-testing/firestore-test-runner.ts
@firebase/firestore: Created temporary directory at [/var/folders/4p/60jxf65d6tsb3k2s8r8jzwk000j4dz/T/tmp-87145-SGUzNPTt5flO].
@firebase/firestore: Downloading emulator from [https://storage.googleapis.com/firebase-preview-drop/emulator/cloud-firestore-emulator-v1.19.7.jar] ...
@firebase/firestore: Emulator download is done.
@firebase/firestore: Closed downloaded emulator file.
@firebase/firestore: Changed emulator file permissions to 'rwxr-xr-x'.
@firebase/firestore: Cached emulator at /Users/chholland/.cache/firebase-js-sdk/cloud-firestore-emulator-v1.18.1.jar
@firebase/firestore: Waiting for emulator to start up ...
@firebase/firestore: API endpoint: http://localhost:10000
@firebase/firestore: If you are using a library that supports the FIRESTORE_EMULATOR_HOST environment variable, run:
@firebase/firestore:    export FIRESTORE_EMULATOR_HOST=localhost:10000
@firebase/firestore: If you are running a Firestore in Datastore Mode project, run:
@firebase/firestore:    export DATASTORE_EMULATOR_HOST=localhost:10000
@firebase/firestore: Note: Support for Datastore Mode is in preview. If you encounter any bugs please file at https://github.com/firebase/firebase-tools/issues.
@firebase/firestore: Dev App Server is now running.
@firebase/firestore: Ping emulator at [http://127.0.0.1:10000] ...
@firebase/firestore: Emulator has started up after 1.001s!
@firebase/firestore: $ ts-node ./scripts/run-tests.ts --emulator --platform node_lite --main=lite/index.ts 'test/lite/**/*.test.ts'
@firebase/firestore: $ ts-node ./scripts/run-tests.ts  --main=test/register.ts --persistence --emulator 'test/{,!(browser|lite)/**/}*.test.ts'
@firebase/firestore: Default Settings: {"host":"localhost:10000","ssl":false}
@firebase/firestore: Default DatabaseId: "(default)"
@firebase/firestore: Default Settings: {"host":"localhost:10000","ssl":false}
@firebase/firestore: Default DatabaseId: "(default)"
@firebase/firestore:   Firestore
@firebase/firestore:     âœ” can provide setting
@firebase/firestore:     âœ” returns same default instance from named app
@firebase/firestore:     âœ” returns different instance from named app
@firebase/firestore:     âœ” returns same default instance from default app
@firebase/firestore:     âœ” returns different instance from different named app
@firebase/firestore:     âœ” cannot call initializeFirestore() twice
@firebase/firestore:     âœ” cannot use once terminated
@firebase/firestore:     âœ” can call terminate() multiple times
@firebase/firestore:   doc
@firebase/firestore:     âœ” can be used relative to Firestore root
@firebase/firestore:     âœ” can be used relative to collection
@firebase/firestore:     âœ” can be used with multiple arguments
@firebase/firestore:     âœ” strips leading and trailing slashes
@firebase/firestore:     âœ” can be relative to doc
@firebase/firestore:     âœ” validates path
@firebase/firestore:     âœ” supports AutoId
@firebase/firestore:   collection
@firebase/firestore:     âœ” can be used relative to Firestore root
@firebase/firestore:     âœ” can be used relative to Firestore root with multiple arguments
@firebase/firestore:     âœ” can be used relative to collection
@firebase/firestore:     âœ” can be used relative to doc
@firebase/firestore:     âœ” can be used relative to collection with multiple arguments
@firebase/firestore:     âœ” validates path
@firebase/firestore:   parent
@firebase/firestore:     âœ” returns CollectionReferences for DocumentReferences
@firebase/firestore:     âœ” returns DocumentReferences for CollectionReferences
@firebase/firestore:     âœ” returns null for root collection
@firebase/firestore:   getDoc()
@firebase/firestore:     âœ” can get a non-existing document (433ms)
@firebase/firestore:     âœ” can get an existing document (57ms)
@firebase/firestore:   delete
@firebase/firestore:     âœ” can delete a non-existing document
@firebase/firestore:     âœ” can delete an existing document
@firebase/firestore:   set
@firebase/firestore:     âœ” can set a new document
@firebase/firestore:     âœ” can merge a document
@firebase/firestore:     âœ” can merge a document with mergeFields
@firebase/firestore:     âœ” supports partials with merge
@firebase/firestore:     âœ” supports partials with mergeFields
@firebase/firestore:     âœ” throws when user input fails validation
@firebase/firestore:     âœ” can ignore 'undefined'
@firebase/firestore:   update
@firebase/firestore:     âœ” can update a document
@firebase/firestore:     âœ” can update a document (using varargs)
@firebase/firestore:     âœ” enforces that document exists
@firebase/firestore:     âœ” throws when user input fails validation
@firebase/firestore:   WriteBatch
@firebase/firestore:     âœ” can add multiple operations
@firebase/firestore:     âœ” cannot add write after commit
@firebase/firestore:     delete
@firebase/firestore:       âœ” can delete a non-existing document
@firebase/firestore:       âœ” can delete an existing document
@firebase/firestore:     set
@firebase/firestore:       âœ” can set a new document
@firebase/firestore:       âœ” can merge a document
@firebase/firestore:       âœ” can merge a document with mergeFields
@firebase/firestore:       âœ” supports partials with merge
@firebase/firestore:       âœ” supports partials with mergeFields
@firebase/firestore:       âœ” throws when user input fails validation
@firebase/firestore:       âœ” can ignore 'undefined'
@firebase/firestore:     update
@firebase/firestore:       âœ” can update a document
@firebase/firestore:       âœ” can update a document (using varargs)
@firebase/firestore:       âœ” enforces that document exists
@firebase/firestore:       âœ” throws when user input fails validation
@firebase/firestore:   Transaction
@firebase/firestore:     âœ” can read and then write
@firebase/firestore:     âœ” can read non-existing doc then write
@firebase/firestore:     âœ” can read deleted doc then write
@firebase/firestore:   âœ” token is not invalidated once the stream is healthy
@firebase/firestore:   Initialization
@firebase/firestore:     âœ” retries when document is modified (880ms)
@firebase/firestore:     delete
@firebase/firestore:       âœ” can delete a non-existing document
@firebase/firestore:       âœ” can delete an existing document
@firebase/firestore:     set
@firebase/firestore:       âœ” can set a new document
@firebase/firestore:       âœ” can merge a document
@firebase/firestore:       âœ” can merge a document with mergeFields
@firebase/firestore:       âœ” supports partials with merge
@firebase/firestore:       âœ” supports partials with mergeFields
@firebase/firestore:       âœ” throws when user input fails validation
@firebase/firestore:       âœ” can ignore 'undefined'
@firebase/firestore:     update
@firebase/firestore:       âœ” can update a document
@firebase/firestore:       âœ” can update a document (using varargs)
@firebase/firestore:       - enforces that document exists
@firebase/firestore:       âœ” throws when user input fails validation
@firebase/firestore:   addDoc()
@firebase/firestore:     âœ” can add a document
@firebase/firestore:     âœ” throws when user input fails validation
@firebase/firestore:   DocumentSnapshot
@firebase/firestore:     âœ” can represent missing data
@firebase/firestore:     âœ” can return data
@firebase/firestore:     âœ” getAuth() before getFirestore() (247ms)
@firebase/firestore:     âœ” can return single field
@firebase/firestore:     âœ” can return nested field
@firebase/firestore:     âœ” is properly typed
@firebase/firestore:     âœ” returns Bytes
@firebase/firestore:   deleteDoc()
@firebase/firestore:     âœ” can delete a non-existing document
@firebase/firestore:   FieldValue
@firebase/firestore:     âœ” support equality checking with isEqual()
@firebase/firestore:     âœ” support instanceof checks
@firebase/firestore:     âœ” can apply arrayUnion
@firebase/firestore:     âœ” can apply arrayRemove
@firebase/firestore:     âœ” can apply serverTimestamp
@firebase/firestore:     âœ” can delete field
@firebase/firestore:   Query
@firebase/firestore:     âœ” supports default query (69ms)
@firebase/firestore:     âœ” supports empty results
@firebase/firestore:     âœ” supports filtered query
@firebase/firestore:     âœ” supports filtered query (with FieldPath)
@firebase/firestore:     âœ” getFirestore() before getAuth() (198ms)
@firebase/firestore:     âœ” supports ordered query (with default order)
@firebase/firestore:     âœ” supports ordered query (with asc)
@firebase/firestore:     âœ” supports ordered query (with desc)
@firebase/firestore:     âœ” supports limit query
@firebase/firestore:     âœ” supports limitToLast query
@firebase/firestore:     âœ” supports startAt
@firebase/firestore:     âœ” supports startAfter
@firebase/firestore:     âœ” supports endAt
@firebase/firestore:     âœ” supports endBefore
@firebase/firestore:     âœ” supports pagination
@firebase/firestore:     âœ” supports collection groups
@firebase/firestore:     âœ” validates collection groups
@firebase/firestore:     âœ” supports query over collection path with special characters
@firebase/firestore:   equality
@firebase/firestore:     âœ” for collection references
@firebase/firestore:     âœ” for document references
@firebase/firestore:     âœ” for queries
@firebase/firestore:     âœ” for query snapshots
@firebase/firestore:     âœ” for document snapshots
@firebase/firestore:   withConverter() support
@firebase/firestore:     âœ” for DocumentReference.withConverter()
@firebase/firestore:     âœ” for DocumentReference.withConverter(null) applies default converter
@firebase/firestore:     âœ” for CollectionReference.withConverter()
@firebase/firestore:     âœ” for CollectionReference.withConverter(null) applies default converter
@firebase/firestore:     âœ” for Query.withConverter()
@firebase/firestore:     âœ” lazy-loaded getAuth() (199ms)
@firebase/firestore:     âœ” for Query.withConverter(null) applies default converter
@firebase/firestore:     âœ” keeps the converter when calling parent() with a DocumentReference
@firebase/firestore:     âœ” drops the converter when calling parent() with a CollectionReference
@firebase/firestore:     âœ” checks converter when comparing with isEqual()
@firebase/firestore:     âœ” requires the correct converter for Partial usage
@firebase/firestore:     âœ” supports primitive types with valid converter
@firebase/firestore:     types test
@firebase/firestore:       nested partial support
@firebase/firestore:         âœ” supports FieldValues
@firebase/firestore:         âœ” validates types in outer and inner fields
@firebase/firestore:         âœ” checks for nonexistent properties
@firebase/firestore:         âœ” allows omitting fields
@firebase/firestore:       WithFieldValue
@firebase/firestore:         âœ” supports FieldValues
@firebase/firestore:         âœ” requires all outer fields to be present
@firebase/firestore:         âœ” requires all nested fields to be present
@firebase/firestore:         âœ” validates inner and outer fields
@firebase/firestore:         âœ” checks for nonexistent properties
@firebase/firestore:         âœ” allows certain types but not others
@firebase/firestore:         used as a type
@firebase/firestore:           âœ” supports passing in the object as `T`
@firebase/firestore:           âœ” does not allow primitive types to use FieldValue
@firebase/firestore:       UpdateData
@firebase/firestore:         âœ” supports FieldValues
@firebase/firestore:         âœ” validates inner and outer fields
@firebase/firestore:         âœ” supports string-separated fields
@firebase/firestore:         âœ” supports optional fields
@firebase/firestore:         âœ” supports null fields
@firebase/firestore:         âœ” supports union fields
@firebase/firestore:         âœ” checks for nonexistent fields
@firebase/firestore:       methods
@firebase/firestore:         âœ” addDoc()
@firebase/firestore:         âœ” WriteBatch.set()
@firebase/firestore:         âœ” WriteBatch.update()
@firebase/firestore:         âœ” Transaction.set()
@firebase/firestore:     âœ” getDoc() before getAuth() (175ms)
@firebase/firestore:         âœ” Transaction.update()
@firebase/firestore:   Count queries
@firebase/firestore:     âœ” uses user from getAuth()
@firebase/firestore:     âœ” AggregateQuerySnapshot inherits the original query
@firebase/firestore:     âœ” uses user from asynchronously loaded getAuth()
@firebase/firestore:     âœ” can run count query getCount with special chars in the document path: so!@#$%^&*()_+special/sub
@firebase/firestore:     âœ” uses user from getAuth()
@firebase/firestore:     with IndexedDB
@firebase/firestore:     âœ” can run count query getCount with special chars in the document path: b1/so!@#$%^&*()_+special
@firebase/firestore:     âœ” run count query on empty collection
@firebase/firestore:     âœ” run count query on collection with 3 docs
@firebase/firestore:     âœ” run count query fails on invalid collection reference
@firebase/firestore:     âœ” count query supports filter
@firebase/firestore:     âœ” count query supports filter and a small limit size
@firebase/firestore:     âœ” count query supports filter and a large limit size
@firebase/firestore:     âœ” count query supports order by
@firebase/firestore:     âœ” count query supports order by and startAt
@firebase/firestore:     âœ” count query supports order by and startAfter
@firebase/firestore:     âœ” count query supports order by and endAt
@firebase/firestore:     âœ” count query supports order by and endBefore
@firebase/firestore:     âœ” count query doesn't use converter
@firebase/firestore:     âœ” count query supports collection groups
@firebase/firestore:     âœ” aggregateQuerySnapshotEqual on same queries be truthy
@firebase/firestore:     âœ” aggregateQuerySnapshotEqual on same queries with different documents size be falsy
@firebase/firestore:     âœ” aggregateQuerySnapshotEqual on different queries be falsy
@firebase/firestore:     âœ” count query fails on a terminated Firestore
@firebase/firestore:     âœ” terminate Firestore not effect count query in flight
@firebase/firestore:     - getCount error message contains console link if missing index
@firebase/firestore:   Aggregate queries
@firebase/firestore:     âœ” AggregateQuerySnapshot inherits the original query
@firebase/firestore:     âœ” run aggregate query on empty collection
@firebase/firestore:     âœ” run aggregate query on collection with 3 docs
@firebase/firestore:       âœ” getAuth() before explicitly initializing Firestore (234ms)
@firebase/firestore:     âœ” run aggregate query with duplicate aggregates
@firebase/firestore:     âœ” run aggregate query fails on invalid collection reference
@firebase/firestore:     âœ” aggregate query supports filter
@firebase/firestore:     âœ” aggregate query supports filter and a small limit size
@firebase/firestore:     âœ” aggregate query supports filter and a large limit size
@firebase/firestore:     âœ” aggregate query supports order by
@firebase/firestore:     âœ” aggregate query supports order by and startAt
@firebase/firestore:     âœ” aggregate query supports order by and startAfter
@firebase/firestore:     âœ” aggregate query supports order by and endAt
@firebase/firestore:     âœ” aggregate query supports order by and endBefore
@firebase/firestore:     âœ” aggregate query doesn't use converter
@firebase/firestore:     âœ” aggregate query supports collection groups
@firebase/firestore:     âœ” aggregateQuerySnapshotEqual on same queries be truthy
@firebase/firestore:     âœ” aggregateQuerySnapshotEqual on same queries with different documents size be falsy
@firebase/firestore:     âœ” aggregateQuerySnapshotEqual on different queries be falsy
@firebase/firestore:     âœ” aggregate query fails on a terminated Firestore
@firebase/firestore:     âœ” terminate Firestore not effect aggregate query in flight
@firebase/firestore:     - getAggregate error message contains console link if missing index
@firebase/firestore:   Aggregate queries - sum / average
@firebase/firestore:     âœ” aggregateQuerySnapshotEqual on different aggregations to be falsy
@firebase/firestore:       âœ” explicitly initialize Firestore before getAuth() (213ms)
@firebase/firestore:     âœ” aggregateQuerySnapshotEqual on same aggregations with different aliases to be falsy
@firebase/firestore:     âœ” aggregateQuerySnapshotEqual on same aggregations with same aliases to be truthy
@firebase/firestore:     âœ” can run sum query getAggregationFromServer
@firebase/firestore:     âœ” can run average query getAggregationFromServer
@firebase/firestore:     âœ” can get multiple aggregations using getAggregationFromServer
@firebase/firestore:     âœ” fails when exceeding the max (5) aggregations using getAggregationFromServer
@firebase/firestore:     (Persistence=memory_lru_gc) queries requiring indexes
@firebase/firestore:       âœ” performs aggregations on documents with all aggregated fields using getAggregationFromServer
@firebase/firestore:   Vectors
@firebase/firestore:     âœ” can be read and written using the lite SDK
@firebase/firestore:   192 passing (3s)
@firebase/firestore:   3 pending
@firebase/firestore:       âœ” getFirestore() followed by getAuth() followed by explicitly initialization (232ms)
@firebase/firestore:   (Persistence=memory_lru_gc) Database (with internal API)
@firebase/firestore:     - will reject the promise if clear persistence fails
@firebase/firestore:     âœ” waiting for pending writes should fail when user changes
@firebase/firestore:     âœ” app delete leads to instance termination
@firebase/firestore:   (Persistence=indexeddb) Database (with internal API)
@firebase/firestore:     âœ” will reject the promise if clear persistence fails
@firebase/firestore:     âœ” waiting for pending writes should fail when user changes (39ms)
@firebase/firestore:     âœ” app delete leads to instance termination (42ms)
@firebase/firestore:   (Persistence=memory_lru_gc) Idle Timeout
@firebase/firestore:     âœ” can write document after idle timeout
@firebase/firestore:     âœ” can watch documents after idle timeout
@firebase/firestore:   (Persistence=indexeddb) Idle Timeout
@firebase/firestore:     âœ” can write document after idle timeout (72ms)
@firebase/firestore:     âœ” can watch documents after idle timeout (71ms)
@firebase/firestore:   (Persistence=memory_lru_gc) Database transactions (with internal API)
@firebase/firestore:     âœ” should increment transactionally (43ms)
@firebase/firestore:     âœ” should update transactionally
@firebase/firestore:     âœ” should fail transaction (maxAttempts: default) when reading a doc twice with different versions (40ms)
@firebase/firestore:     âœ” should fail transaction (maxAttempts: 1) when reading a doc twice with different versions
@firebase/firestore:   (Persistence=indexeddb) Database transactions (with internal API)
@firebase/firestore:     âœ” should increment transactionally (83ms)
@firebase/firestore:     âœ” should update transactionally (80ms)
@firebase/firestore:     âœ” should fail transaction (maxAttempts: default) when reading a doc twice with different versions (138ms)
@firebase/firestore:     âœ” should fail transaction (maxAttempts: 1) when reading a doc twice with different versions (73ms)
@firebase/firestore:   (Persistence=memory_lru_gc) Count queries
@firebase/firestore:     âœ” can run count query getCountFromServer
@firebase/firestore:     âœ” can run count query getCountFromServer with special chars in the document path: so!@#$%^&*()_+special/sub
@firebase/firestore:     âœ” can run count query getCountFromServer with special chars in the document path: b1/so!@#$%^&*()_+special
@firebase/firestore:     âœ” count query doesn't use converter
@firebase/firestore:     âœ” count query supports collection groups
@firebase/firestore:     âœ” getCountFromServer fails if firestore is terminated
@firebase/firestore:     âœ” terminate doesn't crash when there is count query in flight
@firebase/firestore:     - getCountFromServer fails if user is offline
@firebase/firestore:     - getCountFromServer error message contains console link if missing index
@firebase/firestore:   (Persistence=indexeddb) Count queries
@firebase/firestore:     âœ” can run count query getCountFromServer (68ms)
@firebase/firestore:     âœ” can run count query getCountFromServer with special chars in the document path: so!@#$%^&*()_+special/sub (61ms)
@firebase/firestore:     âœ” can run count query getCountFromServer with special chars in the document path: b1/so!@#$%^&*()_+special (55ms)
@firebase/firestore:     âœ” count query doesn't use converter (61ms)
@firebase/firestore:     âœ” count query supports collection groups (50ms)
@firebase/firestore:     âœ” getCountFromServer fails if firestore is terminated
@firebase/firestore:     âœ” terminate doesn't crash when there is count query in flight
@firebase/firestore:     - getCountFromServer fails if user is offline
@firebase/firestore:     - getCountFromServer error message contains console link if missing index
@firebase/firestore:   (Persistence=memory_lru_gc) Aggregation queries
@firebase/firestore:     âœ” can run count query getAggregationFromServer
@firebase/firestore:     âœ” can alias aggregations using getAggregationFromServer
@firebase/firestore:     âœ” allows special chars in aliases when using getAggregationFromServer
@firebase/firestore:     âœ” allows backticks in aliases when using getAggregationFromServer
@firebase/firestore:     âœ” allows backslash in aliases when using getAggregationFromServer
@firebase/firestore:     âœ” allows aliases with length greater than 1500 bytes
@firebase/firestore:     âœ” can get duplicate aggregations using getAggregationFromServer
@firebase/firestore:     âœ” getAggregationFromServer doesn't use converter
@firebase/firestore:     âœ” aggregate query supports collection groups
@firebase/firestore:     âœ” getAggregateFromServer fails if firestore is terminated
@firebase/firestore:     âœ” terminate doesn't crash when there is aggregate query in flight
@firebase/firestore:     - getAggregateFromServer fails if user is offline
@firebase/firestore:     - getAggregateFromServer error message contains console link good if missing index
@firebase/firestore:   (Persistence=indexeddb) Aggregation queries
@firebase/firestore:     âœ” can run count query getAggregationFromServer (101ms)
@firebase/firestore:     âœ” can alias aggregations using getAggregationFromServer (65ms)
@firebase/firestore:     âœ” allows special chars in aliases when using getAggregationFromServer (61ms)
@firebase/firestore:     âœ” allows backticks in aliases when using getAggregationFromServer (62ms)
@firebase/firestore:     âœ” allows backslash in aliases when using getAggregationFromServer (61ms)
@firebase/firestore:     âœ” allows aliases with length greater than 1500 bytes (63ms)
@firebase/firestore:     âœ” can get duplicate aggregations using getAggregationFromServer (84ms)
@firebase/firestore:     âœ” getAggregationFromServer doesn't use converter (97ms)
@firebase/firestore:     âœ” aggregate query supports collection groups (57ms)
@firebase/firestore:     âœ” getAggregateFromServer fails if firestore is terminated
@firebase/firestore:     âœ” terminate doesn't crash when there is aggregate query in flight
@firebase/firestore:     - getAggregateFromServer fails if user is offline
@firebase/firestore:     - getAggregateFromServer error message contains console link good if missing index
@firebase/firestore:   (Persistence=memory_lru_gc) Aggregation queries - sum / average
@firebase/firestore:     âœ” can run sum query getAggregationFromServer
@firebase/firestore:     âœ” can run average query getAggregationFromServer
@firebase/firestore:     âœ” can get multiple aggregations using getAggregationFromServer
@firebase/firestore:     âœ” can get duplicate aggregations using getAggregationFromServer
@firebase/firestore:     âœ” can perform max (5) aggregations using getAggregationFromServer
@firebase/firestore:     âœ” fails when exceeding the max (5) aggregations using getAggregationFromServer
@firebase/firestore:     âœ” returns undefined when getting the result of an unrequested aggregation
@firebase/firestore:     âœ” performs aggregates when using `in` operator getAggregationFromServer
@firebase/firestore:     âœ” performs aggregations on nested map values using getAggregationFromServer
@firebase/firestore:     âœ” performs sum that results in float using getAggregationFromServer
@firebase/firestore:     âœ” performs sum of ints and floats that results in an int using getAggregationFromServer
@firebase/firestore:     âœ” performs sum that overflows max int using getAggregationFromServer
@firebase/firestore:     âœ” performs sum that can overflow integer values during accumulation using getAggregationFromServer
@firebase/firestore:     âœ” performs sum that is negative using getAggregationFromServer
@firebase/firestore:     âœ” performs sum that is positive infinity using getAggregationFromServer
@firebase/firestore:     âœ” performs sum that is positive infinity using getAggregationFromServer v2
@firebase/firestore:     âœ” performs sum that is negative infinity using getAggregationFromServer
@firebase/firestore:     âœ” performs sum that is valid but could overflow during aggregation using getAggregationFromServer
@firebase/firestore:     âœ” performs sum that includes NaN using getAggregationFromServer
@firebase/firestore:     âœ” performs sum over a result set of zero documents using getAggregationFromServer
@firebase/firestore:     âœ” performs sum only on numeric fields using getAggregationFromServer
@firebase/firestore:     âœ” performs sum of min IEEE754 using getAggregationFromServer
@firebase/firestore:     âœ” performs average of ints that results in an int using getAggregationFromServer
@firebase/firestore:     âœ” performs average of floats that results in an int using getAggregationFromServer
@firebase/firestore:     âœ” performs average of floats and ints that results in an int using getAggregationFromServer
@firebase/firestore:     âœ” performs average of float that results in float using getAggregationFromServer
@firebase/firestore:     âœ” performs average of floats and ints that results in a float using getAggregationFromServer
@firebase/firestore:     âœ” performs average of ints that results in a float using getAggregationFromServer
@firebase/firestore:     âœ” performs average causing underflow using getAggregationFromServer
@firebase/firestore:     âœ” performs average of min IEEE754 using getAggregationFromServer
@firebase/firestore:     âœ” performs average that overflows IEEE754 during accumulation using getAggregationFromServer
@firebase/firestore:     âœ” performs average that includes NaN using getAggregationFromServer
@firebase/firestore:     âœ” performs average over a result set of zero documents using getAggregationFromServer
@firebase/firestore:     âœ” performs average only on numeric fields using getAggregationFromServer
@firebase/firestore:   (Persistence=indexeddb) Aggregation queries - sum / average
@firebase/firestore:     âœ” can run sum query getAggregationFromServer (67ms)
@firebase/firestore:     âœ” can run average query getAggregationFromServer (63ms)
@firebase/firestore:     âœ” can get multiple aggregations using getAggregationFromServer (59ms)
@firebase/firestore:     âœ” can get duplicate aggregations using getAggregationFromServer (64ms)
@firebase/firestore:     âœ” can perform max (5) aggregations using getAggregationFromServer (60ms)
@firebase/firestore:     âœ” fails when exceeding the max (5) aggregations using getAggregationFromServer (67ms)
@firebase/firestore:     âœ” returns undefined when getting the result of an unrequested aggregation (69ms)
@firebase/firestore:     âœ” performs aggregates when using `in` operator getAggregationFromServer (68ms)
@firebase/firestore:     âœ” performs aggregations on nested map values using getAggregationFromServer (62ms)
@firebase/firestore:     âœ” performs sum that results in float using getAggregationFromServer (96ms)
@firebase/firestore:     âœ” performs sum of ints and floats that results in an int using getAggregationFromServer (59ms)
@firebase/firestore:     âœ” performs sum that overflows max int using getAggregationFromServer (119ms)
@firebase/firestore:     âœ” performs sum that can overflow integer values during accumulation using getAggregationFromServer (68ms)
@firebase/firestore:     âœ” performs sum that is negative using getAggregationFromServer (64ms)
@firebase/firestore:     âœ” performs sum that is positive infinity using getAggregationFromServer (58ms)
@firebase/firestore:     âœ” performs sum that is positive infinity using getAggregationFromServer v2 (61ms)
@firebase/firestore:     âœ” performs sum that is negative infinity using getAggregationFromServer (59ms)
@firebase/firestore:     âœ” performs sum that is valid but could overflow during aggregation using getAggregationFromServer (66ms)
@firebase/firestore:     âœ” performs sum that includes NaN using getAggregationFromServer (65ms)
@firebase/firestore:     âœ” performs sum over a result set of zero documents using getAggregationFromServer (64ms)
@firebase/firestore:     âœ” performs sum only on numeric fields using getAggregationFromServer (64ms)
@firebase/firestore:     âœ” performs sum of min IEEE754 using getAggregationFromServer (57ms)
@firebase/firestore:     âœ” performs average of ints that results in an int using getAggregationFromServer (69ms)
@firebase/firestore:     âœ” performs average of floats that results in an int using getAggregationFromServer (63ms)
@firebase/firestore:     âœ” performs average of floats and ints that results in an int using getAggregationFromServer (63ms)
@firebase/firestore:     âœ” performs average of float that results in float using getAggregationFromServer (60ms)
@firebase/firestore:     âœ” performs average of floats and ints that results in a float using getAggregationFromServer (63ms)
@firebase/firestore:     âœ” performs average of ints that results in a float using getAggregationFromServer (58ms)
@firebase/firestore:     âœ” performs average causing underflow using getAggregationFromServer (57ms)
@firebase/firestore:     âœ” performs average of min IEEE754 using getAggregationFromServer (57ms)
@firebase/firestore:     âœ” performs average that overflows IEEE754 during accumulation using getAggregationFromServer (59ms)
@firebase/firestore:     âœ” performs average that includes NaN using getAggregationFromServer (66ms)
@firebase/firestore:     âœ” performs average over a result set of zero documents using getAggregationFromServer (65ms)
@firebase/firestore:     âœ” performs average only on numeric fields using getAggregationFromServer (63ms)
@firebase/firestore:   (Persistence=memory_lru_gc) Array Transforms:
@firebase/firestore:     âœ” create document with arrayUnion()
@firebase/firestore:     âœ” append to array via update()
@firebase/firestore:     âœ” append to array via set(..., {merge: true})
@firebase/firestore:     âœ” append object to array via update()
@firebase/firestore:     âœ” remove from array via update()
@firebase/firestore:     âœ” remove from array via set(..., {merge: true})
@firebase/firestore:     âœ” remove object from array via update()
@firebase/firestore:     âœ” arrayUnion() supports DocumentReference
@firebase/firestore:     Server Application: 
@firebase/firestore:       âœ” set() with no cached base doc
@firebase/firestore:       âœ” update() with no cached base doc
@firebase/firestore:       âœ” set(..., {merge}) with no cached based doc
@firebase/firestore:       âœ” update() with cached base doc using arrayUnion()
@firebase/firestore:       âœ” update() with cached base doc using arrayRemove()
@firebase/firestore:   (Persistence=indexeddb) Array Transforms:
@firebase/firestore:     âœ” create document with arrayUnion() (64ms)
@firebase/firestore:     âœ” append to array via update() (87ms)
@firebase/firestore:     âœ” append to array via set(..., {merge: true}) (84ms)
@firebase/firestore:     âœ” append object to array via update() (80ms)
@firebase/firestore:     âœ” remove from array via update() (83ms)
@firebase/firestore:     âœ” remove from array via set(..., {merge: true}) (132ms)
@firebase/firestore:     âœ” remove object from array via update() (86ms)
@firebase/firestore:     âœ” arrayUnion() supports DocumentReference (69ms)
@firebase/firestore:     Server Application: 
@firebase/firestore:       âœ” set() with no cached base doc (39ms)
@firebase/firestore:       âœ” update() with no cached base doc (74ms)
@firebase/firestore:       âœ” set(..., {merge}) with no cached based doc (77ms)
@firebase/firestore:       âœ” update() with cached base doc using arrayUnion() (46ms)
@firebase/firestore:       âœ” update() with cached base doc using arrayRemove() (50ms)
@firebase/firestore:   (Persistence=memory_lru_gc) Database batch writes
@firebase/firestore:     âœ” supports empty batches
@firebase/firestore:     âœ” can set documents
@firebase/firestore:     âœ” can set documents with merge
@firebase/firestore:     âœ” can update documents
@firebase/firestore:     âœ” can update nested fields
@firebase/firestore:     âœ” can delete documents
@firebase/firestore:     âœ” commit atomically, raising correct events
@firebase/firestore:     âœ” fail atomically, raising correct events
@firebase/firestore:     âœ” write the same server timestamp across writes
@firebase/firestore:     âœ” can write the same document multiple times
@firebase/firestore:     (Persistence=memory_lru_gc) withConverter() support
@firebase/firestore:       âœ” for WriteBatch.set<T>()
@firebase/firestore:     (Persistence=indexeddb) withConverter() support
@firebase/firestore:       âœ” for WriteBatch.set<T>() (50ms)
@firebase/firestore:   (Persistence=indexeddb) Database batch writes
@firebase/firestore:     âœ” supports empty batches
@firebase/firestore:     âœ” can set documents (53ms)
@firebase/firestore:     âœ” can set documents with merge (61ms)
@firebase/firestore:     âœ” can update documents (61ms)
@firebase/firestore:     âœ” can update nested fields (63ms)
@firebase/firestore:     âœ” can delete documents (134ms)
@firebase/firestore:     âœ” commit atomically, raising correct events (63ms)
@firebase/firestore:     âœ” fail atomically, raising correct events (57ms)
@firebase/firestore:     âœ” write the same server timestamp across writes (63ms)
@firebase/firestore:     âœ” can write the same document multiple times (63ms)
@firebase/firestore:     (Persistence=memory_lru_gc) withConverter() support
@firebase/firestore:       âœ” for WriteBatch.set<T>()
@firebase/firestore:     (Persistence=indexeddb) withConverter() support
@firebase/firestore:       âœ” for WriteBatch.set<T>() (54ms)
@firebase/firestore:   (Persistence=memory_lru_gc) Bundles
@firebase/firestore:     âœ” load with documents only with on progress and promise interface
@firebase/firestore:     âœ” load with documents and queries with promise interface
@firebase/firestore:     âœ” load for a second time skips
@firebase/firestore:     âœ” load with documents already pulled from backend
@firebase/firestore:     âœ” loaded documents should not be GC-ed right away
@firebase/firestore:     âœ” load with documents from other projects fails
@firebase/firestore:   (Persistence=indexeddb) Bundles
@firebase/firestore:     âœ” load with documents only with on progress and promise interface (50ms)
@firebase/firestore:     âœ” load with documents and queries with promise interface (41ms)
@firebase/firestore:     âœ” load for a second time skips (43ms)
@firebase/firestore:     âœ” load with documents already pulled from backend (109ms)
@firebase/firestore:     âœ” loaded documents should not be GC-ed right away (53ms)
@firebase/firestore:     âœ” load with documents from other projects fails (46ms)
@firebase/firestore:   (Persistence=memory_lru_gc) Composite Index Queries
@firebase/firestore:     OR Queries
@firebase/firestore:       âœ” can use query overloads
@firebase/firestore:       âœ” can use or queries (39ms)
@firebase/firestore:     Aggregation queries - sum / average
@firebase/firestore:       âœ” aggregate query supports collection groups - multi-aggregate
@firebase/firestore:       âœ” performs aggregations on documents with all aggregated fields using getAggregationFromServer
@firebase/firestore:       âœ” performs aggregates on multiple fields where one aggregate could cause short-circuit due to NaN using getAggregationFromServer
@firebase/firestore:       âœ” performs aggregates when using `array-contains-any` operator getAggregationFromServer
@firebase/firestore:     Multiple Inequality
@firebase/firestore:       âœ” can use multiple inequality filters (45ms)
@firebase/firestore:       âœ” can use on special values
@firebase/firestore:       âœ” can use with array membership
@firebase/firestore:       âœ” can use with nested field
@firebase/firestore:       âœ” can use with nested composite filters
@firebase/firestore:       âœ” inequality fields will be implicitly ordered lexicographically
@firebase/firestore:       âœ” can use multiple explicit order by field
@firebase/firestore:       âœ” can use in aggregate query
@firebase/firestore:       âœ” can use document ID im multiple inequality query (46ms)
@firebase/firestore:       âœ” can get documents while offline
@firebase/firestore:       âœ” can get same result from server and cache (46ms)
@firebase/firestore:       âœ” inequality query will reject if document key is not the last orderBy field
@firebase/firestore:       âœ” inequality query will reject if document key appears only in equality filter
@firebase/firestore:   (Persistence=indexeddb) Composite Index Queries
@firebase/firestore:     OR Queries
@firebase/firestore:       âœ” can use query overloads (90ms)
@firebase/firestore:       âœ” can use or queries (171ms)
@firebase/firestore:     Aggregation queries - sum / average
@firebase/firestore:       âœ” aggregate query supports collection groups - multi-aggregate (44ms)
@firebase/firestore:       âœ” performs aggregations on documents with all aggregated fields using getAggregationFromServer (71ms)
@firebase/firestore:       âœ” performs aggregates on multiple fields where one aggregate could cause short-circuit due to NaN using getAggregationFromServer (65ms)
@firebase/firestore:       âœ” performs aggregates when using `array-contains-any` operator getAggregationFromServer (66ms)
@firebase/firestore:     Multiple Inequality
@firebase/firestore:       âœ” can use multiple inequality filters (211ms)
@firebase/firestore:       âœ” can use on special values (109ms)
@firebase/firestore:       âœ” can use with array membership (111ms)
@firebase/firestore:       âœ” can use with nested field (104ms)
@firebase/firestore:       âœ” can use with nested composite filters (135ms)
@firebase/firestore:       âœ” inequality fields will be implicitly ordered lexicographically (109ms)
@firebase/firestore:       âœ” can use multiple explicit order by field (142ms)
@firebase/firestore:       âœ” can use in aggregate query (71ms)
@firebase/firestore:       âœ” can use document ID im multiple inequality query (119ms)
@firebase/firestore:       âœ” can get documents while offline (92ms)
@firebase/firestore:       âœ” can get same result from server and cache (188ms)
@firebase/firestore:       âœ” inequality query will reject if document key is not the last orderBy field
@firebase/firestore:       âœ” inequality query will reject if document key appears only in equality filter
@firebase/firestore:   (Persistence=memory_lru_gc) Cursors
@firebase/firestore:     âœ” can page through items
@firebase/firestore:     âœ” can be created from documents
@firebase/firestore:     âœ” can be created from values
@firebase/firestore:     âœ” can be created using document id
@firebase/firestore:     âœ” can be used with reference values
@firebase/firestore:     âœ” can be used in descending queries (39ms)
@firebase/firestore:     âœ” can accept Timestamps as bounds
@firebase/firestore:     âœ” can accept Timestamps in where clause
@firebase/firestore:     âœ” truncate Timestamps
@firebase/firestore:   (Persistence=indexeddb) Cursors
@firebase/firestore:     âœ” can page through items (130ms)
@firebase/firestore:     âœ” can be created from documents (113ms)
@firebase/firestore:     âœ” can be created from values (106ms)
@firebase/firestore:     âœ” can be created using document id (112ms)
@firebase/firestore:     âœ” can be used with reference values (86ms)
@firebase/firestore:     âœ” can be used in descending queries (111ms)
@firebase/firestore:     âœ” can accept Timestamps as bounds (85ms)
@firebase/firestore:     âœ” can accept Timestamps in where clause (80ms)
@firebase/firestore:     âœ” truncate Timestamps (100ms)
@firebase/firestore:   (Persistence=memory_lru_gc) Database
@firebase/firestore:     âœ” can set a document
@firebase/firestore:     âœ” doc() will auto generate an ID
@firebase/firestore:     âœ” can delete a document
@firebase/firestore:     âœ” can update existing document
@firebase/firestore:     âœ” can retrieve document that does not exist
@firebase/firestore:     âœ” can update an unknown document
@firebase/firestore:     âœ” can merge data with an existing document using set
@firebase/firestore:     âœ” can merge server timestamps
@firebase/firestore:     âœ” can merge empty object
@firebase/firestore:     âœ” update with empty object replaces all fields
@firebase/firestore:     âœ” merge with empty object replaces all fields
@firebase/firestore:     âœ” can delete field using merge
@firebase/firestore:     âœ” can delete field using mergeFields
@firebase/firestore:     âœ” can set server timestamps using mergeFields
@firebase/firestore:     âœ” can replace an array by merging using set
@firebase/firestore:     âœ” can't specify a field mask for a missing field using set
@firebase/firestore:     âœ” can set a subset of fields using a field mask
@firebase/firestore:     âœ” doesn't apply field delete outside of mask
@firebase/firestore:     âœ” doesn't apply field transform outside of mask
@firebase/firestore:     âœ” can set an empty field mask
@firebase/firestore:     âœ” can specify fields multiple times in a field mask
@firebase/firestore:     âœ” cannot update nonexistent document
@firebase/firestore:     âœ” can delete a field with an update
@firebase/firestore:     âœ” can update nested fields
@firebase/firestore:     âœ” can specify updated field multiple times
@firebase/firestore:     âœ” CollectionRef.add() resolves with resulting DocumentRef.
@firebase/firestore:     âœ” onSnapshotsInSync fires after listeners are in sync
@firebase/firestore:     âœ” DocumentSnapshot events for nonexistent document
@firebase/firestore:     âœ” DocumentSnapshot events for add data to document
@firebase/firestore:     âœ” DocumentSnapshot events for change data in document
@firebase/firestore:     âœ” DocumentSnapshot events for delete data in document
@firebase/firestore:     âœ” Listen can be called multiple times
@firebase/firestore:     âœ” Metadata only changes are not fired when no options provided
@firebase/firestore:     âœ” exposes "firestore" on document references.
@firebase/firestore:     âœ” exposes "firestore" on query references.
@firebase/firestore:     âœ” can compare DocumentReference instances with isEqual().
@firebase/firestore:     âœ” can compare Query instances with isEqual().
@firebase/firestore:     âœ” can compare multiple inequality Query instances with isEqual().
@firebase/firestore:     âœ” can traverse collections and documents.
@firebase/firestore:     âœ” can traverse collection and document parents.
@firebase/firestore:     âœ” can queue writes while offline
@firebase/firestore:     - offline writes are sent after restart
@firebase/firestore:     âœ” rejects subsequent method calls after terminate() is called
@firebase/firestore:     âœ” can call terminate() multiple times
@firebase/firestore:     - maintains persistence after restarting app
@firebase/firestore:     - can clear persistence if the client has been terminated
@firebase/firestore:     - can clear persistence if the client has not been initialized
@firebase/firestore:     - cannot clear persistence if the client has been initialized
@firebase/firestore:     âœ” can get documents while offline
@firebase/firestore:     âœ” can enable and disable networking
@firebase/firestore:     âœ” can start a new instance after shut down
@firebase/firestore:     âœ” new operation after termination should throw
@firebase/firestore:     âœ” calling terminate multiple times should proceed
@firebase/firestore:     âœ” can unlisten queries after termination
@firebase/firestore:     âœ” can query after firestore restart
@firebase/firestore:     âœ” query listener throws error on termination
@firebase/firestore:     âœ” can wait for pending writes
@firebase/firestore:     âœ” waiting for pending writes resolves immediately when offline and no pending writes
@firebase/firestore:     - can set and get data with auto detect long polling enabled
@firebase/firestore:     âœ” can keep docs separate with multi-db when online
@firebase/firestore:     âœ” can keep docs separate with multi-db when offline
@firebase/firestore:     âœ” Cannot get document from cache with eager GC enabled.
@firebase/firestore:     âœ” Can get document from cache with Lru GC enabled.
@firebase/firestore:     âœ” Lru GC is enabled by default.
@firebase/firestore:     vector embeddings
@firebase/firestore:       âœ” can write and read vector embeddings
@firebase/firestore:       âœ” can listen to documents with vectors
@firebase/firestore:       âœ” SDK orders vector field same way as backend
@firebase/firestore:       From Cache
@firebase/firestore:         âœ” SDK orders vector field the same way online and offline (41ms)
@firebase/firestore:     documents: 
@firebase/firestore:       âœ” set/update should reject: undefined
@firebase/firestore:       âœ” set/update should reject: null
@firebase/firestore:       âœ” set/update should reject: 0
@firebase/firestore:       âœ” set/update should reject: foo
@firebase/firestore:       âœ” set/update should reject: a
@firebase/firestore:       âœ” set/update should reject: Tue Mar 04 2025 15:02:35 GMT-0800 (Pacific Standard Time)
@firebase/firestore:     (Persistence=memory_lru_gc) Queries are validated client-side
@firebase/firestore:       âœ” same inequality fields works
@firebase/firestore:       âœ” inequality and equality on different fields works
@firebase/firestore:       âœ” inequality on multiple fields works
@firebase/firestore:       âœ” inequality with key fields works
@firebase/firestore:       âœ” inequality and array-contains on different fields works
@firebase/firestore:       âœ” inequality and array-contains-any on different fields works
@firebase/firestore:       âœ” multiple inequality and array-contains on different fields works
@firebase/firestore:       âœ” multiple inequality and array-contains-any on different fields works
@firebase/firestore:       âœ” inequality and IN on different fields works
@firebase/firestore:       âœ” multiple inequality and IN on different fields works
@firebase/firestore:       âœ” inequality and NOT IN on different fields works
@firebase/firestore:       âœ” multiple inequality and NOT IN on different fields works
@firebase/firestore:       âœ” inequality same as orderBy works.
@firebase/firestore:       âœ” != same as orderBy works.
@firebase/firestore:       âœ” equality different than orderBy works
@firebase/firestore:       âœ” inequality different than orderBy works.
@firebase/firestore:       âœ” multiple inequality different from orderBy works.
@firebase/firestore:       âœ” array-contains different than orderBy works
@firebase/firestore:       âœ” IN different than orderBy works
@firebase/firestore:       âœ” array-contains-any different than orderBy works
@firebase/firestore:     (Persistence=indexeddb) Queries are validated client-side
@firebase/firestore:       âœ” same inequality fields works
@firebase/firestore:       âœ” inequality and equality on different fields works
@firebase/firestore:       âœ” inequality on multiple fields works
@firebase/firestore:       âœ” inequality with key fields works
@firebase/firestore:       âœ” inequality and array-contains on different fields works
@firebase/firestore:       âœ” inequality and array-contains-any on different fields works
@firebase/firestore:       âœ” multiple inequality and array-contains on different fields works
@firebase/firestore:       âœ” multiple inequality and array-contains-any on different fields works
@firebase/firestore:       âœ” inequality and IN on different fields works
@firebase/firestore:       âœ” multiple inequality and IN on different fields works
@firebase/firestore:       âœ” inequality and NOT IN on different fields works
@firebase/firestore:       âœ” multiple inequality and NOT IN on different fields works
@firebase/firestore:       âœ” inequality same as orderBy works.
@firebase/firestore:       âœ” != same as orderBy works.
@firebase/firestore:       âœ” equality different than orderBy works
@firebase/firestore:       âœ” inequality different than orderBy works.
@firebase/firestore:       âœ” multiple inequality different from orderBy works.
@firebase/firestore:       âœ” array-contains different than orderBy works
@firebase/firestore:       âœ” IN different than orderBy works
@firebase/firestore:       âœ” array-contains-any different than orderBy works
@firebase/firestore:     Listens are rejected remotely:
@firebase/firestore:       âœ” will reject listens
@firebase/firestore:       âœ” will reject same listens twice in a row
@firebase/firestore:       âœ” will reject gets
@firebase/firestore:       âœ” will reject gets twice in a row
@firebase/firestore:     (Persistence=memory_lru_gc) withConverter() support
@firebase/firestore:       âœ” for DocumentReference.withConverter()
@firebase/firestore:       âœ” for DocumentReference.withConverter(null) 
@firebase/firestore:       âœ” for CollectionReference.withConverter()
@firebase/firestore:       âœ” for CollectionReference.withConverter(null)
@firebase/firestore:       âœ” for Query.withConverter()
@firebase/firestore:       âœ” for Query.withConverter(null)
@firebase/firestore:       âœ” requires the correct converter for Partial usage
@firebase/firestore:       âœ” WriteBatch.set() supports partials with merge
@firebase/firestore:       âœ” WriteBatch.set() supports partials with mergeFields
@firebase/firestore:       âœ” Transaction.set() supports partials with merge
@firebase/firestore:       âœ” Transaction.set() supports partials with mergeFields
@firebase/firestore:       âœ” DocumentReference.set() supports partials with merge
@firebase/firestore:       âœ” DocumentReference.set() supports partials with mergeFields
@firebase/firestore:       âœ” calls DocumentSnapshot.data() with specified SnapshotOptions
@firebase/firestore:       âœ” drops the converter when calling CollectionReference<T>.parent()
@firebase/firestore:       âœ” checks converter when comparing with isEqual()
@firebase/firestore:       âœ” Correct snapshot specified to fromFirestore() when registered with DocumentReference
@firebase/firestore:       âœ” Correct snapshot specified to fromFirestore() when registered with CollectionReference
@firebase/firestore:       âœ” Correct snapshot specified to fromFirestore() when registered with Query
@firebase/firestore:       âœ” DocumentReference.withConverter() default DbModelType
@firebase/firestore:       âœ” CollectionReference.withConverter() default DbModelType
@firebase/firestore:       âœ” Query.withConverter() default DbModelType
@firebase/firestore:     (Persistence=indexeddb) withConverter() support
@firebase/firestore:       âœ” for DocumentReference.withConverter() (53ms)
@firebase/firestore:       âœ” for DocumentReference.withConverter(null) 
@firebase/firestore:       âœ” for CollectionReference.withConverter() (52ms)
@firebase/firestore:       âœ” for CollectionReference.withConverter(null)
@firebase/firestore:       âœ” for Query.withConverter() (62ms)
@firebase/firestore:       âœ” for Query.withConverter(null) (58ms)
@firebase/firestore:       âœ” requires the correct converter for Partial usage (38ms)
@firebase/firestore:       âœ” WriteBatch.set() supports partials with merge (64ms)
@firebase/firestore:       âœ” WriteBatch.set() supports partials with mergeFields (61ms)
@firebase/firestore:       âœ” Transaction.set() supports partials with merge (55ms)
@firebase/firestore:       âœ” Transaction.set() supports partials with mergeFields (54ms)
@firebase/firestore:       âœ” DocumentReference.set() supports partials with merge (62ms)
@firebase/firestore:       âœ” DocumentReference.set() supports partials with mergeFields (63ms)
@firebase/firestore:       âœ” calls DocumentSnapshot.data() with specified SnapshotOptions (52ms)
@firebase/firestore:       âœ” drops the converter when calling CollectionReference<T>.parent()
@firebase/firestore:       âœ” checks converter when comparing with isEqual()
@firebase/firestore:       âœ” Correct snapshot specified to fromFirestore() when registered with DocumentReference (53ms)
@firebase/firestore:       âœ” Correct snapshot specified to fromFirestore() when registered with CollectionReference (52ms)
@firebase/firestore:       âœ” Correct snapshot specified to fromFirestore() when registered with Query (52ms)
@firebase/firestore:       âœ” DocumentReference.withConverter() default DbModelType (50ms)
@firebase/firestore:       âœ” CollectionReference.withConverter() default DbModelType (71ms)
@firebase/firestore:       âœ” Query.withConverter() default DbModelType (70ms)
@firebase/firestore:     sort documents by DocumentId
@firebase/firestore:       âœ” snapshot listener sorts query by DocumentId same way as get query
@firebase/firestore:       âœ” snapshot listener sorts filtered query by DocumentId same way as get query
@firebase/firestore:       offline
@firebase/firestore:         âœ” SDK orders query the same way online and offline
@firebase/firestore:     Sort unicode strings
@firebase/firestore:       âœ” snapshot listener sorts unicode strings the same as server (38ms)
@firebase/firestore:       âœ” snapshot listener sorts unicode strings in array the same  as server
@firebase/firestore:       âœ” snapshot listener sorts unicode strings in map the same as server
@firebase/firestore:       âœ” snapshot listener sorts unicode strings in map key the same as server (41ms)
@firebase/firestore:       âœ” snapshot listener sorts unicode strings in document key the same as server (40ms)
@firebase/firestore:       âœ” snapshot listener sorts unicode strings in document key the same as server with persistence
@firebase/firestore:   (Persistence=indexeddb) Database
@firebase/firestore:     âœ” can set a document (38ms)
@firebase/firestore:     âœ” doc() will auto generate an ID
@firebase/firestore:     âœ” can delete a document (75ms)
@firebase/firestore:     âœ” can update existing document (62ms)
@firebase/firestore:     âœ” can retrieve document that does not exist
@firebase/firestore:     âœ” can update an unknown document (100ms)
@firebase/firestore:     âœ” can merge data with an existing document using set (63ms)
@firebase/firestore:     âœ” can merge server timestamps (63ms)
@firebase/firestore:     âœ” can merge empty object (106ms)
@firebase/firestore:     âœ” update with empty object replaces all fields (61ms)
@firebase/firestore:     âœ” merge with empty object replaces all fields (67ms)
@firebase/firestore:     âœ” can delete field using merge (65ms)
@firebase/firestore:     âœ” can delete field using mergeFields (64ms)
@firebase/firestore:     âœ” can set server timestamps using mergeFields (71ms)
@firebase/firestore:     âœ” can replace an array by merging using set (64ms)
@firebase/firestore:     âœ” can't specify a field mask for a missing field using set
@firebase/firestore:     âœ” can set a subset of fields using a field mask (66ms)
@firebase/firestore:     âœ” doesn't apply field delete outside of mask (65ms)
@firebase/firestore:     âœ” doesn't apply field transform outside of mask (67ms)
@firebase/firestore:     âœ” can set an empty field mask (63ms)
@firebase/firestore:     âœ” can specify fields multiple times in a field mask (61ms)
@firebase/firestore:     âœ” cannot update nonexistent document (51ms)
@firebase/firestore:     âœ” can delete a field with an update (63ms)
@firebase/firestore:     âœ” can update nested fields (66ms)
@firebase/firestore:     âœ” can specify updated field multiple times (66ms)
@firebase/firestore:     âœ” CollectionRef.add() resolves with resulting DocumentRef. (53ms)
@firebase/firestore:     âœ” onSnapshotsInSync fires after listeners are in sync (91ms)
@firebase/firestore:     âœ” DocumentSnapshot events for nonexistent document
@firebase/firestore:     âœ” DocumentSnapshot events for add data to document (61ms)
@firebase/firestore:     âœ” DocumentSnapshot events for change data in document (90ms)
@firebase/firestore:     âœ” DocumentSnapshot events for delete data in document (90ms)
@firebase/firestore:     âœ” Listen can be called multiple times (42ms)
@firebase/firestore:     âœ” Metadata only changes are not fired when no options provided (64ms)
@firebase/firestore:     âœ” exposes "firestore" on document references.
@firebase/firestore:     âœ” exposes "firestore" on query references.
@firebase/firestore:     âœ” can compare DocumentReference instances with isEqual().
@firebase/firestore:     âœ” can compare Query instances with isEqual().
@firebase/firestore:     âœ” can compare multiple inequality Query instances with isEqual().
@firebase/firestore:     âœ” can traverse collections and documents.
@firebase/firestore:     âœ” can traverse collection and document parents.
@firebase/firestore:     âœ” can queue writes while offline (51ms)
@firebase/firestore:     âœ” offline writes are sent after restart (79ms)
@firebase/firestore:     âœ” rejects subsequent method calls after terminate() is called
@firebase/firestore:     âœ” can call terminate() multiple times
@firebase/firestore:     âœ” maintains persistence after restarting app (47ms)
@firebase/firestore:     âœ” can clear persistence if the client has been terminated (61ms)
@firebase/firestore:     âœ” can clear persistence if the client has not been initialized (62ms)
@firebase/firestore:     âœ” cannot clear persistence if the client has been initialized
@firebase/firestore:     âœ” can get documents while offline (71ms)
@firebase/firestore:     âœ” can enable and disable networking
@firebase/firestore:     âœ” can start a new instance after shut down
@firebase/firestore:     âœ” new operation after termination should throw
@firebase/firestore:     âœ” calling terminate multiple times should proceed
@firebase/firestore:     âœ” can unlisten queries after termination
@firebase/firestore:     âœ” can query after firestore restart (70ms)
@firebase/firestore:     âœ” query listener throws error on termination
@firebase/firestore:     âœ” can wait for pending writes (39ms)
@firebase/firestore:     âœ” waiting for pending writes resolves immediately when offline and no pending writes
@firebase/firestore:     - can set and get data with auto detect long polling enabled
@firebase/firestore:     âœ” can keep docs separate with multi-db when online (88ms)
@firebase/firestore:     âœ” can keep docs separate with multi-db when offline (47ms)
@firebase/firestore:     âœ” Cannot get document from cache with eager GC enabled.
@firebase/firestore:     âœ” Can get document from cache with Lru GC enabled. (38ms)
@firebase/firestore:     âœ” Lru GC is enabled by default. (39ms)
@firebase/firestore:     vector embeddings
@firebase/firestore:       âœ” can write and read vector embeddings (78ms)
@firebase/firestore:       âœ” can listen to documents with vectors (124ms)
@firebase/firestore:       âœ” SDK orders vector field same way as backend (147ms)
@firebase/firestore:       From Cache
@firebase/firestore:         âœ” SDK orders vector field the same way online and offline (170ms)
@firebase/firestore:     documents: 
@firebase/firestore:       âœ” set/update should reject: undefined
@firebase/firestore:       âœ” set/update should reject: null
@firebase/firestore:       âœ” set/update should reject: 0
@firebase/firestore:       âœ” set/update should reject: foo
@firebase/firestore:       âœ” set/update should reject: a
@firebase/firestore:       âœ” set/update should reject: Tue Mar 04 2025 15:02:35 GMT-0800 (Pacific Standard Time)
@firebase/firestore:     (Persistence=memory_lru_gc) Queries are validated client-side
@firebase/firestore:       âœ” same inequality fields works
@firebase/firestore:       âœ” inequality and equality on different fields works
@firebase/firestore:       âœ” inequality on multiple fields works
@firebase/firestore:       âœ” inequality with key fields works
@firebase/firestore:       âœ” inequality and array-contains on different fields works
@firebase/firestore:       âœ” inequality and array-contains-any on different fields works
@firebase/firestore:       âœ” multiple inequality and array-contains on different fields works
@firebase/firestore:       âœ” multiple inequality and array-contains-any on different fields works
@firebase/firestore:       âœ” inequality and IN on different fields works
@firebase/firestore:       âœ” multiple inequality and IN on different fields works
@firebase/firestore:       âœ” inequality and NOT IN on different fields works
@firebase/firestore:       âœ” multiple inequality and NOT IN on different fields works
@firebase/firestore:       âœ” inequality same as orderBy works.
@firebase/firestore:       âœ” != same as orderBy works.
@firebase/firestore:       âœ” equality different than orderBy works
@firebase/firestore:       âœ” inequality different than orderBy works.
@firebase/firestore:       âœ” multiple inequality different from orderBy works.
@firebase/firestore:       âœ” array-contains different than orderBy works
@firebase/firestore:       âœ” IN different than orderBy works
@firebase/firestore:       âœ” array-contains-any different than orderBy works
@firebase/firestore:     (Persistence=indexeddb) Queries are validated client-side
@firebase/firestore:       âœ” same inequality fields works
@firebase/firestore:       âœ” inequality and equality on different fields works
@firebase/firestore:       âœ” inequality on multiple fields works
@firebase/firestore:       âœ” inequality with key fields works
@firebase/firestore:       âœ” inequality and array-contains on different fields works
@firebase/firestore:       âœ” inequality and array-contains-any on different fields works
@firebase/firestore:       âœ” multiple inequality and array-contains on different fields works
@firebase/firestore:       âœ” multiple inequality and array-contains-any on different fields works
@firebase/firestore:       âœ” inequality and IN on different fields works
@firebase/firestore:       âœ” multiple inequality and IN on different fields works
@firebase/firestore:       âœ” inequality and NOT IN on different fields works
@firebase/firestore:       âœ” multiple inequality and NOT IN on different fields works
@firebase/firestore:       âœ” inequality same as orderBy works.
@firebase/firestore:       âœ” != same as orderBy works.
@firebase/firestore:       âœ” equality different than orderBy works
@firebase/firestore:       âœ” inequality different than orderBy works.
@firebase/firestore:       âœ” multiple inequality different from orderBy works.
@firebase/firestore:       âœ” array-contains different than orderBy works
@firebase/firestore:       âœ” IN different than orderBy works
@firebase/firestore:       âœ” array-contains-any different than orderBy works
@firebase/firestore:     Listens are rejected remotely:
@firebase/firestore:       âœ” will reject listens
@firebase/firestore:       âœ” will reject same listens twice in a row (40ms)
@firebase/firestore:       âœ” will reject gets
@firebase/firestore:       âœ” will reject gets twice in a row (84ms)
@firebase/firestore:     (Persistence=memory_lru_gc) withConverter() support
@firebase/firestore:       âœ” for DocumentReference.withConverter()
@firebase/firestore:       âœ” for DocumentReference.withConverter(null) 
@firebase/firestore:       âœ” for CollectionReference.withConverter()
@firebase/firestore:       âœ” for CollectionReference.withConverter(null)
@firebase/firestore:       âœ” for Query.withConverter()
@firebase/firestore:       âœ” for Query.withConverter(null)
@firebase/firestore:       âœ” requires the correct converter for Partial usage
@firebase/firestore:       âœ” WriteBatch.set() supports partials with merge
@firebase/firestore:       âœ” WriteBatch.set() supports partials with mergeFields
@firebase/firestore:       âœ” Transaction.set() supports partials with merge
@firebase/firestore:       âœ” Transaction.set() supports partials with mergeFields
@firebase/firestore:       âœ” DocumentReference.set() supports partials with merge
@firebase/firestore:       âœ” DocumentReference.set() supports partials with mergeFields
@firebase/firestore:       âœ” calls DocumentSnapshot.data() with specified SnapshotOptions
@firebase/firestore:       âœ” drops the converter when calling CollectionReference<T>.parent()
@firebase/firestore:       âœ” checks converter when comparing with isEqual()
@firebase/firestore:       âœ” Correct snapshot specified to fromFirestore() when registered with DocumentReference
@firebase/firestore:       âœ” Correct snapshot specified to fromFirestore() when registered with CollectionReference
@firebase/firestore:       âœ” Correct snapshot specified to fromFirestore() when registered with Query
@firebase/firestore:       âœ” DocumentReference.withConverter() default DbModelType
@firebase/firestore:       âœ” CollectionReference.withConverter() default DbModelType
@firebase/firestore:       âœ” Query.withConverter() default DbModelType
@firebase/firestore:     (Persistence=indexeddb) withConverter() support
@firebase/firestore:       âœ” for DocumentReference.withConverter() (52ms)
@firebase/firestore:       âœ” for DocumentReference.withConverter(null) 
@firebase/firestore:       âœ” for CollectionReference.withConverter() (53ms)
@firebase/firestore:       âœ” for CollectionReference.withConverter(null)
@firebase/firestore:       âœ” for Query.withConverter() (63ms)
@firebase/firestore:       âœ” for Query.withConverter(null) (54ms)
@firebase/firestore:       âœ” requires the correct converter for Partial usage
@firebase/firestore:       âœ” WriteBatch.set() supports partials with merge (63ms)
@firebase/firestore:       âœ” WriteBatch.set() supports partials with mergeFields (64ms)
@firebase/firestore:       âœ” Transaction.set() supports partials with merge (53ms)
@firebase/firestore:       âœ” Transaction.set() supports partials with mergeFields (81ms)
@firebase/firestore:       âœ” DocumentReference.set() supports partials with merge (61ms)
@firebase/firestore:       âœ” DocumentReference.set() supports partials with mergeFields (63ms)
@firebase/firestore:       âœ” calls DocumentSnapshot.data() with specified SnapshotOptions (55ms)
@firebase/firestore:       âœ” drops the converter when calling CollectionReference<T>.parent()
@firebase/firestore:       âœ” checks converter when comparing with isEqual()
@firebase/firestore:       âœ” Correct snapshot specified to fromFirestore() when registered with DocumentReference (53ms)
@firebase/firestore:       âœ” Correct snapshot specified to fromFirestore() when registered with CollectionReference (54ms)
@firebase/firestore:       âœ” Correct snapshot specified to fromFirestore() when registered with Query (56ms)
@firebase/firestore:       âœ” DocumentReference.withConverter() default DbModelType (52ms)
@firebase/firestore:       âœ” CollectionReference.withConverter() default DbModelType (76ms)
@firebase/firestore:       âœ” Query.withConverter() default DbModelType (99ms)
@firebase/firestore:     sort documents by DocumentId
@firebase/firestore:       âœ” snapshot listener sorts query by DocumentId same way as get query (123ms)
@firebase/firestore:       âœ” snapshot listener sorts filtered query by DocumentId same way as get query (112ms)
@firebase/firestore:       offline
@firebase/firestore:         âœ” SDK orders query the same way online and offline (146ms)
@firebase/firestore:     Sort unicode strings
@firebase/firestore:       âœ” snapshot listener sorts unicode strings the same as server (136ms)
@firebase/firestore:       âœ” snapshot listener sorts unicode strings in array the same  as server (144ms)
@firebase/firestore:       âœ” snapshot listener sorts unicode strings in map the same as server (141ms)
@firebase/firestore:       âœ” snapshot listener sorts unicode strings in map key the same as server (136ms)
@firebase/firestore:       âœ” snapshot listener sorts unicode strings in document key the same as server (153ms)
@firebase/firestore:       - snapshot listener sorts unicode strings in document key the same as server with persistence
@firebase/firestore:   (Persistence=memory_lru_gc) Nested Fields
@firebase/firestore:     âœ” can be written with set() (41ms)
@firebase/firestore:     âœ” can be read directly with .get(<string>)
@firebase/firestore:     âœ” can be read directly with .get(<FieldPath>)
@firebase/firestore:     âœ” can be updated with update(<string>)
@firebase/firestore:     âœ” can be updated with update(<FieldPath>)
@firebase/firestore:     âœ” can be used with query.where(<string>).
@firebase/firestore:     âœ” can be used with query.where(<FieldPath>).
@firebase/firestore:     âœ” can be used with query.orderBy(<string>).
@firebase/firestore:     âœ” can be used with query.orderBy(<FieldPath>).
@firebase/firestore:   (Persistence=indexeddb) Nested Fields
@firebase/firestore:     âœ” can be written with set() (92ms)
@firebase/firestore:     âœ” can be read directly with .get(<string>) (69ms)
@firebase/firestore:     âœ” can be read directly with .get(<FieldPath>) (54ms)
@firebase/firestore:     âœ” can be updated with update(<string>) (62ms)
@firebase/firestore:     âœ” can be updated with update(<FieldPath>) (68ms)
@firebase/firestore:     âœ” can be used with query.where(<string>). (80ms)
@firebase/firestore:     âœ” can be used with query.where(<FieldPath>). (143ms)
@firebase/firestore:     âœ” can be used with query.orderBy(<string>). (78ms)
@firebase/firestore:     âœ” can be used with query.orderBy(<FieldPath>). (76ms)
@firebase/firestore:   (Persistence=memory_lru_gc) Fields with special characters
@firebase/firestore:     âœ” can be written with set()
@firebase/firestore:     âœ” can be read directly with .data(<field>)
@firebase/firestore:     âœ” can be updated with update()
@firebase/firestore:     âœ” can be used in query filters.
@firebase/firestore:     âœ” can be used in a query orderBy.
@firebase/firestore:   (Persistence=indexeddb) Fields with special characters
@firebase/firestore:     âœ” can be written with set() (52ms)
@firebase/firestore:     âœ” can be read directly with .data(<field>) (52ms)
@firebase/firestore:     âœ” can be updated with update() (62ms)
@firebase/firestore:     âœ” can be used in query filters. (92ms)
@firebase/firestore:     âœ” can be used in a query orderBy. (94ms)
@firebase/firestore:   (Persistence=memory_lru_gc) Timestamp Fields in snapshots
@firebase/firestore:     âœ” are returned as Timestamps
@firebase/firestore:   (Persistence=indexeddb) Timestamp Fields in snapshots
@firebase/firestore:     âœ” are returned as Timestamps (54ms)
@firebase/firestore:   (Persistence=memory_lru_gc) `undefined` properties
@firebase/firestore:     âœ” are ignored in set()
@firebase/firestore:     âœ” are ignored in set({ merge: true })
@firebase/firestore:     âœ” are ignored in update()
@firebase/firestore:     âœ” are ignored in Query.where()
@firebase/firestore:     âœ” are ignored in Query.startAt()
@firebase/firestore:   (Persistence=indexeddb) `undefined` properties
@firebase/firestore:     âœ” are ignored in set() (53ms)
@firebase/firestore:     âœ” are ignored in set({ merge: true }) (64ms)
@firebase/firestore:     âœ” are ignored in update() (73ms)
@firebase/firestore:     âœ” are ignored in Query.where() (71ms)
@firebase/firestore:     âœ” are ignored in Query.startAt() (74ms)
@firebase/firestore:   (Persistence=memory_lru_gc) GetOptions
@firebase/firestore:     âœ” get document while online with default get options
@firebase/firestore:     âœ” get collection while online with default get options
@firebase/firestore:     âœ” get document while offline with default get options
@firebase/firestore:     âœ” get collection while offline with default get options
@firebase/firestore:     âœ” get document while online with source=cache
@firebase/firestore:     âœ” get collection while online with source=cache
@firebase/firestore:     âœ” get document while offline with source=cache
@firebase/firestore:     âœ” get collection while offline with source=cache
@firebase/firestore:     âœ” get document while online with source=server
@firebase/firestore:     âœ” get collection while online with source=server
@firebase/firestore:     âœ” get document while offline with source=server
@firebase/firestore:     âœ” get collection while offline with source=server
@firebase/firestore:     âœ” get document while offline with different get options
@firebase/firestore:     âœ” get collection while offline with different get options
@firebase/firestore:     âœ” get nonexistent doc while online with default get options
@firebase/firestore:     âœ” get nonexistent collection while online with default get options
@firebase/firestore:     âœ” get nonexistent doc while offline with default get options
@firebase/firestore:     - get deleted doc while offline with default get options
@firebase/firestore:     âœ” get nonexistent collection while offline with default get options
@firebase/firestore:     âœ” get nonexistent doc while online with source=cache
@firebase/firestore:     âœ” get nonexistent collection while online with source=cache
@firebase/firestore:     âœ” get nonexistent doc while offline with source=cache
@firebase/firestore:     âœ” get deleted doc while offline with source=cache
@firebase/firestore:     âœ” get nonexistent collection while offline with source=cache
@firebase/firestore:     âœ” get nonexistent doc while online with source=server
@firebase/firestore:     âœ” get nonexistent collection while online with source=server
@firebase/firestore:     âœ” get nonexistent doc while offline with source=server
@firebase/firestore:     âœ” get nonexistent collection while offline with source=server
@firebase/firestore:   (Persistence=indexeddb) GetOptions
@firebase/firestore:     âœ” get document while online with default get options (68ms)
@firebase/firestore:     âœ” get collection while online with default get options (94ms)
@firebase/firestore:     âœ” get document while offline with default get options (121ms)
@firebase/firestore:     âœ” get collection while offline with default get options (100ms)
@firebase/firestore:     âœ” get document while online with source=cache (51ms)
@firebase/firestore:     âœ” get collection while online with source=cache (93ms)
@firebase/firestore:     âœ” get document while offline with source=cache (98ms)
@firebase/firestore:     âœ” get collection while offline with source=cache (106ms)
@firebase/firestore:     âœ” get document while online with source=server (53ms)
@firebase/firestore:     âœ” get collection while online with source=server (87ms)
@firebase/firestore:     âœ” get document while offline with source=server (68ms)
@firebase/firestore:     âœ” get collection while offline with source=server (149ms)
@firebase/firestore:     âœ” get document while offline with different get options (56ms)
@firebase/firestore:     âœ” get collection while offline with different get options (97ms)
@firebase/firestore:     âœ” get nonexistent doc while online with default get options
@firebase/firestore:     âœ” get nonexistent collection while online with default get options
@firebase/firestore:     âœ” get nonexistent doc while offline with default get options
@firebase/firestore:     - get deleted doc while offline with default get options
@firebase/firestore:     âœ” get nonexistent collection while offline with default get options
@firebase/firestore:     âœ” get nonexistent doc while online with source=cache
@firebase/firestore:     âœ” get nonexistent collection while online with source=cache
@firebase/firestore:     âœ” get nonexistent doc while offline with source=cache
@firebase/firestore:     âœ” get deleted doc while offline with source=cache (40ms)
@firebase/firestore:     âœ” get nonexistent collection while offline with source=cache (39ms)
@firebase/firestore:     âœ” get nonexistent doc while online with source=server (68ms)
@firebase/firestore:     âœ” get nonexistent collection while online with source=server (38ms)
@firebase/firestore:     âœ” get nonexistent doc while offline with source=server
@firebase/firestore:     âœ” get nonexistent collection while offline with source=server (42ms)
@firebase/firestore:   (Persistence=memory_lru_gc) Index Configuration:
@firebase/firestore:     âœ” supports JSON
@firebase/firestore:     âœ” supports schema
@firebase/firestore:     âœ” bad JSON does not crash client
@firebase/firestore:     âœ” bad index does not crash client
@firebase/firestore:   (Persistence=indexeddb) Index Configuration:
@firebase/firestore:     âœ” supports JSON
@firebase/firestore:     âœ” supports schema
@firebase/firestore:     âœ” bad JSON does not crash client
@firebase/firestore:     âœ” bad index does not crash client
@firebase/firestore:   (Persistence=memory_lru_gc) Numeric Transforms:
@firebase/firestore:     âœ” create document with increment
@firebase/firestore:     âœ” merge on non-existing document with increment
@firebase/firestore:     - increment existing integer with integer
@firebase/firestore:     âœ” increment existing double with double
@firebase/firestore:     âœ” increment existing double with integer
@firebase/firestore:     âœ” increment existing integer with double
@firebase/firestore:     âœ” increment existing string with integer
@firebase/firestore:     âœ” increment existing string with double
@firebase/firestore:     âœ” increments with set() and merge:true
@firebase/firestore:     - multiple double increments
@firebase/firestore:     âœ” increment twice in a batch
@firebase/firestore:     âœ” increment, delete and increment in a batch
@firebase/firestore:     âœ” increment on top of ServerTimestamp
@firebase/firestore:   (Persistence=indexeddb) Numeric Transforms:
@firebase/firestore:     âœ” create document with increment (63ms)
@firebase/firestore:     âœ” merge on non-existing document with increment (63ms)
@firebase/firestore:     - increment existing integer with integer
@firebase/firestore:     âœ” increment existing double with double (83ms)
@firebase/firestore:     âœ” increment existing double with integer (83ms)
@firebase/firestore:     âœ” increment existing integer with double (95ms)
@firebase/firestore:     âœ” increment existing string with integer (87ms)
@firebase/firestore:     âœ” increment existing string with double (90ms)
@firebase/firestore:     âœ” increments with set() and merge:true (78ms)
@firebase/firestore:     - multiple double increments
@firebase/firestore:     âœ” increment twice in a batch (85ms)
@firebase/firestore:     âœ” increment, delete and increment in a batch (84ms)
@firebase/firestore:     âœ” increment on top of ServerTimestamp (86ms)
@firebase/firestore:   (Persistence=memory_lru_gc) PersistentCacheIndexManager
@firebase/firestore:     getPersistentCacheIndexManager()
@firebase/firestore:       âœ” should return non-null if, and only if, IndexedDB persistence is enabled
@firebase/firestore:       âœ” should always return the same object
@firebase/firestore:       âœ” should fail if invoked after terminate()
@firebase/firestore:   (Persistence=indexeddb) PersistentCacheIndexManager
@firebase/firestore:     âœ” getPersistentCacheIndexManager() should return distinct instances for distinct Firestore objects
@firebase/firestore:     getPersistentCacheIndexManager()
@firebase/firestore:       âœ” should return non-null if, and only if, IndexedDB persistence is enabled
@firebase/firestore:       âœ” should always return the same object
@firebase/firestore:       âœ” should fail if invoked after terminate()
@firebase/firestore:     enable/disable persistent index auto creation
@firebase/firestore:       âœ” enable on new instance should succeed
@firebase/firestore:       âœ” disable on new instance should succeed
@firebase/firestore:       âœ” enable when already enabled should succeed
@firebase/firestore:       âœ” disable when already disabled should succeed
@firebase/firestore:       âœ” enabling after terminate() should throw
@firebase/firestore:       âœ” disabling after terminate() should throw
@firebase/firestore:       âœ” query returns correct results when index is auto-created (541ms)
@firebase/firestore:     delete all persistent cache indexes
@firebase/firestore:       âœ” deleteAllPersistentCacheIndexes() on new instance should succeed
@firebase/firestore:       âœ” deleteAllPersistentCacheIndexes() should be successful when auto-indexing is enabled
@firebase/firestore:       âœ” deleteAllPersistentCacheIndexes() should be successful when auto-indexing is disabled
@firebase/firestore:       âœ” deleteAllPersistentCacheIndexes() after terminate() should throw
@firebase/firestore:       âœ” query returns correct results when auto-created index has been deleted (577ms)
@firebase/firestore:   Firestore Provider
@firebase/firestore:     âœ” can provide setting
@firebase/firestore:     âœ” returns same default instance from named app
@firebase/firestore:     âœ” returns different instance from named app
@firebase/firestore:     âœ” returns same default instance from default app
@firebase/firestore:     âœ” returns different instance from different named app
@firebase/firestore:     âœ” can call initializeFirestore() twice if settings are same
@firebase/firestore:     âœ” can still use enableIndexedDbPersistence()
@firebase/firestore:     âœ” cannot mix enableIndexedDbPersistence() and settings.cache
@firebase/firestore:     âœ” cannot use once terminated
@firebase/firestore:     âœ” can call terminate() multiple times
@firebase/firestore:   (Persistence=memory_lru_gc) Queries
@firebase/firestore:     âœ” can issue limit queries
@firebase/firestore:     âœ” cannot issue limitToLast queries without explicit order-by
@firebase/firestore:     âœ” can issue limit queries using descending sort order
@firebase/firestore:     âœ” can issue limitToLast queries using descending sort order
@firebase/firestore:     âœ” can listen to limitToLast queries
@firebase/firestore:     âœ” can listen/unlisten/relisten to mirror queries
@firebase/firestore:     âœ” can issue limitToLast queries with cursors
@firebase/firestore:     âœ” key order is descending for descending inequality
@firebase/firestore:     âœ” can use unary filters
@firebase/firestore:     âœ” can filter on infinity
@firebase/firestore:     âœ” will not get metadata only updates
@firebase/firestore:     âœ” maintains correct DocumentChange indexes
@firebase/firestore:     - can listen for the same query with different options
@firebase/firestore:     âœ” can issue queries with Dates differing in milliseconds
@firebase/firestore:     âœ” can listen for QueryMetadata changes
@firebase/firestore:     âœ” can listen for metadata changes
@firebase/firestore:     - can catch error message for missing index with error handler
@firebase/firestore:     âœ” can explicitly sort by document ID
@firebase/firestore:     âœ” can query by document ID
@firebase/firestore:     âœ” can query by document ID using refs
@firebase/firestore:     âœ” can query while reconnecting to network
@firebase/firestore:     âœ” trigger with isFromCache=true when offline
@firebase/firestore:     âœ” can use != filters
@firebase/firestore:     âœ” can use != filters by document ID
@firebase/firestore:     âœ” can use array-contains filters
@firebase/firestore:     âœ” can use IN filters
@firebase/firestore:     âœ” can use IN filters by document ID
@firebase/firestore:     âœ” can use NOT_IN filters
@firebase/firestore:     âœ” can use NOT_IN filters by document ID
@firebase/firestore:     âœ” can use array-contains-any filters
@firebase/firestore:     âœ” can query collection groups
@firebase/firestore:     âœ” can query collection groups with startAt / endAt by arbitrary documentId
@firebase/firestore:     âœ” can query collection groups with where filters on arbitrary documentId
@firebase/firestore:     âœ” can query custom types
@firebase/firestore:     âœ” can use filter with nested field
@firebase/firestore:     - resuming a query should use bloom filter to avoid full requery
@firebase/firestore:     - bloom filter should avert a full re-query when documents were added, deleted, removed, updated, and unchanged since the resume token
@firebase/firestore:     - bloom filter should correctly encode complex Unicode characters
@firebase/firestore:     âœ” can query large documents with multi-byte character strings
@firebase/firestore:     OR Queries
@firebase/firestore:       âœ” can use query overloads (38ms)
@firebase/firestore:       âœ” can use or queries
@firebase/firestore:       âœ” can use or queries with in
@firebase/firestore:       âœ” can use or queries with array membership
@firebase/firestore:       âœ” supports using in with array contains any
@firebase/firestore:       âœ” supports using in with array contains
@firebase/firestore:       âœ” supports order by equality
@firebase/firestore:       âœ” supports multiple in ops (43ms)
@firebase/firestore:     Caching empty results
@firebase/firestore:       âœ” can raise initial snapshot from cache, even if it is empty
@firebase/firestore:       âœ” can raise initial snapshot from cache, even if it has become empty
@firebase/firestore:   (Persistence=indexeddb) Queries
@firebase/firestore:     âœ” can issue limit queries (85ms)
@firebase/firestore:     âœ” cannot issue limitToLast queries without explicit order-by
@firebase/firestore:     âœ” can issue limit queries using descending sort order (81ms)
@firebase/firestore:     âœ” can issue limitToLast queries using descending sort order (80ms)
@firebase/firestore:     âœ” can listen to limitToLast queries (104ms)
@firebase/firestore:     âœ” can listen/unlisten/relisten to mirror queries (143ms)
@firebase/firestore:     âœ” can issue limitToLast queries with cursors (153ms)
@firebase/firestore:     âœ” key order is descending for descending inequality (87ms)
@firebase/firestore:     âœ” can use unary filters (79ms)
@firebase/firestore:     âœ” can filter on infinity (85ms)
@firebase/firestore:     âœ” will not get metadata only updates (142ms)
@firebase/firestore:     âœ” maintains correct DocumentChange indexes (125ms)
@firebase/firestore:     - can listen for the same query with different options
@firebase/firestore:     âœ” can issue queries with Dates differing in milliseconds (93ms)
@firebase/firestore:     âœ” can listen for QueryMetadata changes (96ms)
@firebase/firestore:     âœ” can listen for metadata changes (100ms)
@firebase/firestore:     - can catch error message for missing index with error handler
@firebase/firestore:     âœ” can explicitly sort by document ID (78ms)
@firebase/firestore:     âœ” can query by document ID (110ms)
@firebase/firestore:     âœ” can query by document ID using refs (97ms)
@firebase/firestore:     âœ” can query while reconnecting to network (59ms)
@firebase/firestore:     âœ” trigger with isFromCache=true when offline (86ms)
@firebase/firestore:     âœ” can use != filters (159ms)
@firebase/firestore:     âœ” can use != filters by document ID (78ms)
@firebase/firestore:     âœ” can use array-contains filters (113ms)
@firebase/firestore:     âœ” can use IN filters (164ms)
@firebase/firestore:     âœ” can use IN filters by document ID (84ms)
@firebase/firestore:     âœ” can use NOT_IN filters (167ms)
@firebase/firestore:     âœ” can use NOT_IN filters by document ID (81ms)
@firebase/firestore:     âœ” can use array-contains-any filters (166ms)
@firebase/firestore:     âœ” can query collection groups (76ms)
@firebase/firestore:     âœ” can query collection groups with startAt / endAt by arbitrary documentId (155ms)
@firebase/firestore:     âœ” can query collection groups with where filters on arbitrary documentId (84ms)
@firebase/firestore:     âœ” can query custom types (61ms)
@firebase/firestore:     âœ” can use filter with nested field (106ms)
@firebase/firestore:     - resuming a query should use bloom filter to avoid full requery
@firebase/firestore:     - bloom filter should avert a full re-query when documents were added, deleted, removed, updated, and unchanged since the resume token
@firebase/firestore:     - bloom filter should correctly encode complex Unicode characters
@firebase/firestore:     âœ” can query large documents with multi-byte character strings (75ms)
@firebase/firestore:     OR Queries
@firebase/firestore:       âœ” can use query overloads (192ms)
@firebase/firestore:       âœ” can use or queries (160ms)
@firebase/firestore:       âœ” can use or queries with in (89ms)
@firebase/firestore:       âœ” can use or queries with array membership (108ms)
@firebase/firestore:       âœ” supports using in with array contains any (143ms)
@firebase/firestore:       âœ” supports using in with array contains (146ms)
@firebase/firestore:       âœ” supports order by equality (108ms)
@firebase/firestore:       âœ” supports multiple in ops (214ms)
@firebase/firestore:     Caching empty results
@firebase/firestore:       âœ” can raise initial snapshot from cache, even if it is empty (48ms)
@firebase/firestore:       âœ” can raise initial snapshot from cache, even if it has become empty (90ms)
@firebase/firestore:   (Persistence=memory_lru_gc) Hanging query issue - #7652
@firebase/firestore:     âœ” iteration 0 (61ms)
@firebase/firestore:     âœ” iteration 1 (60ms)
@firebase/firestore:     âœ” iteration 2 (56ms)
@firebase/firestore:     âœ” iteration 3 (59ms)
@firebase/firestore:     âœ” iteration 4 (148ms)
@firebase/firestore:     âœ” iteration 5 (154ms)
@firebase/firestore:     âœ” iteration 6 (82ms)
@firebase/firestore:     âœ” iteration 7 (75ms)
@firebase/firestore:     âœ” iteration 8 (70ms)
@firebase/firestore:     âœ” iteration 9 (63ms)
@firebase/firestore:     âœ” iteration 10 (71ms)
@firebase/firestore:     âœ” iteration 11 (67ms)
@firebase/firestore:     âœ” iteration 12 (66ms)
@firebase/firestore:     âœ” iteration 13 (101ms)
@firebase/firestore:     âœ” iteration 14 (68ms)
@firebase/firestore:     âœ” iteration 15 (63ms)
@firebase/firestore:     âœ” iteration 16 (57ms)
@firebase/firestore:     âœ” iteration 17 (58ms)
@firebase/firestore:     âœ” iteration 18 (56ms)
@firebase/firestore:     âœ” iteration 19 (56ms)
@firebase/firestore:   (Persistence=indexeddb) Hanging query issue - #7652
@firebase/firestore:     âœ” iteration 0 (194ms)
@firebase/firestore:     âœ” iteration 1 (196ms)
@firebase/firestore:     âœ” iteration 2 (197ms)
@firebase/firestore:     âœ” iteration 3 (196ms)
@firebase/firestore:     âœ” iteration 4 (199ms)
@firebase/firestore:     âœ” iteration 5 (201ms)
@firebase/firestore:     âœ” iteration 6 (193ms)
@firebase/firestore:     âœ” iteration 7 (199ms)
@firebase/firestore:     âœ” iteration 8 (195ms)
@firebase/firestore:     âœ” iteration 9 (198ms)
@firebase/firestore:     âœ” iteration 10 (195ms)
@firebase/firestore:     âœ” iteration 11 (199ms)
@firebase/firestore:     âœ” iteration 12 (200ms)
@firebase/firestore:     âœ” iteration 13 (188ms)
@firebase/firestore:     âœ” iteration 14 (192ms)
@firebase/firestore:     âœ” iteration 15 (192ms)
@firebase/firestore:     âœ” iteration 16 (192ms)
@firebase/firestore:     âœ” iteration 17 (193ms)
@firebase/firestore:     âœ” iteration 18 (193ms)
@firebase/firestore:     âœ” iteration 19 (189ms)
@firebase/firestore:   (Persistence=memory_lru_gc) Server Timestamps
@firebase/firestore:     âœ” work via set()
@firebase/firestore:     âœ” work via update()
@firebase/firestore:     âœ” work via transaction set()
@firebase/firestore:     âœ” work via transaction update()
@firebase/firestore:     âœ” can return estimated value
@firebase/firestore:     âœ” can return previous value of different type
@firebase/firestore:     âœ” can return previous value through consecutive updates
@firebase/firestore:     âœ” uses previous value from local mutation
@firebase/firestore:     âœ” fail via update() on nonexistent document.
@firebase/firestore:     âœ” fail via transaction update() on nonexistent document.
@firebase/firestore:   (Persistence=indexeddb) Server Timestamps
@firebase/firestore:     âœ” work via set() (65ms)
@firebase/firestore:     âœ” work via update() (83ms)
@firebase/firestore:     âœ” work via transaction set() (50ms)
@firebase/firestore:     âœ” work via transaction update() (72ms)
@firebase/firestore:     âœ” can return estimated value (83ms)
@firebase/firestore:     âœ” can return previous value of different type (80ms)
@firebase/firestore:     âœ” can return previous value through consecutive updates (115ms)
@firebase/firestore:     âœ” uses previous value from local mutation (205ms)
@firebase/firestore:     âœ” fail via update() on nonexistent document. (52ms)
@firebase/firestore:     âœ” fail via transaction update() on nonexistent document. (46ms)
@firebase/firestore:   (Persistence=memory_lru_gc) Smoke Test
@firebase/firestore:     âœ” can write a single document
@firebase/firestore:     âœ” can read a written document
@firebase/firestore:     âœ” can read a written document with DocumentKey
@firebase/firestore:     âœ” will fire local and remote events
@firebase/firestore:     âœ” will fire value events for empty collections
@firebase/firestore:     âœ” can get collection query
@firebase/firestore:     - can query by field and use order by
@firebase/firestore:   (Persistence=indexeddb) Smoke Test
@firebase/firestore:     âœ” can write a single document
@firebase/firestore:     âœ” can read a written document (56ms)
@firebase/firestore:     âœ” can read a written document with DocumentKey (63ms)
@firebase/firestore:     âœ” will fire local and remote events (72ms)
@firebase/firestore:     âœ” will fire value events for empty collections
@firebase/firestore:     âœ” can get collection query (83ms)
@firebase/firestore:     - can query by field and use order by
@firebase/firestore:   (Persistence=memory_lru_gc) Snapshot Listener source options 
@firebase/firestore:     listen to persistence cache
@firebase/firestore:       âœ” can raise snapshot from cache for Query
@firebase/firestore:       âœ” can raise snapshot from cache for DocumentReference
@firebase/firestore:       âœ” listen to cache would not be affected by online status change
@firebase/firestore:       âœ” multiple listeners sourced from cache can work independently (62ms)
@firebase/firestore:       âœ” can listen/un-listen/re-listen to mirror queries from cache (49ms)
@firebase/firestore:       âœ” can listen to default source first and then cache
@firebase/firestore:       âœ” can listen to cache source first and then default
@firebase/firestore:       âœ” will not get metadata only updates if listening to cache only
@firebase/firestore:       âœ” will have synced metadata updates when listening to both cache and default source
@firebase/firestore:       âœ” can un-listen to default source while still listening to cache
@firebase/firestore:       âœ” can un-listen to cache while still listening to server
@firebase/firestore:       âœ” can listen/un-listen/re-listen to same query with different source options
@firebase/firestore:       âœ” can listen to composite index queries from cache
@firebase/firestore:       âœ” can raise initial snapshot from cache, even if it is empty
@firebase/firestore:       âœ” will not be triggered by transactions while listening to cache
@firebase/firestore:       âœ” share server side updates when listening to both cache and default
@firebase/firestore:   (Persistence=indexeddb) Snapshot Listener source options 
@firebase/firestore:     listen to persistence cache
@firebase/firestore:       âœ” can raise snapshot from cache for Query (88ms)
@firebase/firestore:       âœ” can raise snapshot from cache for DocumentReference (57ms)
@firebase/firestore:       âœ” listen to cache would not be affected by online status change (81ms)
@firebase/firestore:       âœ” multiple listeners sourced from cache can work independently (113ms)
@firebase/firestore:       âœ” can listen/un-listen/re-listen to mirror queries from cache (130ms)
@firebase/firestore:       âœ” can listen to default source first and then cache (79ms)
@firebase/firestore:       âœ” can listen to cache source first and then default (77ms)
@firebase/firestore:       âœ” will not get metadata only updates if listening to cache only (137ms)
@firebase/firestore:       âœ” will have synced metadata updates when listening to both cache and default source (140ms)
@firebase/firestore:       âœ” can un-listen to default source while still listening to cache (127ms)
@firebase/firestore:       âœ” can un-listen to cache while still listening to server (123ms)
@firebase/firestore:       âœ” can listen/un-listen/re-listen to same query with different source options (134ms)
@firebase/firestore:       âœ” can listen to composite index queries from cache (85ms)
@firebase/firestore:       âœ” can raise initial snapshot from cache, even if it is empty (38ms)
@firebase/firestore:       âœ” will not be triggered by transactions while listening to cache
@firebase/firestore:       âœ” share server side updates when listening to both cache and default (86ms)
@firebase/firestore:   (Persistence=memory_lru_gc) Database transactions
@firebase/firestore:     âœ” runs transactions after getting existing document (63ms)
@firebase/firestore:     âœ” runs transactions after getting nonexistent document (44ms)
@firebase/firestore:     âœ” runs transactions after getting a deleted document (53ms)
@firebase/firestore:     âœ” runs transactions on existing document (54ms)
@firebase/firestore:     âœ” runs transactions on nonexistent document (42ms)
@firebase/firestore:     âœ” set document with merge
@firebase/firestore:     âœ” can update nested fields transactionally
@firebase/firestore:     âœ” retry when a document that was read without being written changes (1493ms)
@firebase/firestore:     âœ” cannot read after writing and does not commit
@firebase/firestore:     âœ” cannot read after writing and does not commit, even if the user transaction does not bubble up the error
@firebase/firestore:     âœ” cannot read nonexistent document then update, even if document is written after the read
@firebase/firestore:     âœ” can have gets without mutations
@firebase/firestore:     âœ” does not retry on permanent errors
@firebase/firestore:     âœ” retries when document already exists (754ms)
@firebase/firestore:     âœ” are successful with no transaction operations
@firebase/firestore:     âœ” are cancelled on rejected promise
@firebase/firestore:     âœ” are cancelled on throw
@firebase/firestore:     must return a promise:
@firebase/firestore:       âœ” undefined is rejected
@firebase/firestore:       âœ” null is rejected
@firebase/firestore:       âœ” 5 is rejected
@firebase/firestore:       âœ” [object Object] is rejected
@firebase/firestore:       âœ” [object Object] is rejected
@firebase/firestore:       âœ” [object Object] is rejected
@firebase/firestore:     (Persistence=memory_lru_gc) withConverter() support
@firebase/firestore:       âœ” for Transaction.set<T>() and Transaction.get<T>()
@firebase/firestore:     (Persistence=indexeddb) withConverter() support
@firebase/firestore:       âœ” for Transaction.set<T>() and Transaction.get<T>() (71ms)
@firebase/firestore:   (Persistence=indexeddb) Database transactions
@firebase/firestore:     âœ” runs transactions after getting existing document (290ms)
@firebase/firestore:     âœ” runs transactions after getting nonexistent document (119ms)
@firebase/firestore:     âœ” runs transactions after getting a deleted document (328ms)
@firebase/firestore:     âœ” runs transactions on existing document (268ms)
@firebase/firestore:     âœ” runs transactions on nonexistent document (119ms)
@firebase/firestore:     âœ” set document with merge (41ms)
@firebase/firestore:     âœ” can update nested fields transactionally (45ms)
@firebase/firestore:     âœ” retry when a document that was read without being written changes (1180ms)
@firebase/firestore:     âœ” cannot read after writing and does not commit (63ms)
@firebase/firestore:     âœ” cannot read after writing and does not commit, even if the user transaction does not bubble up the error (59ms)
@firebase/firestore:     âœ” cannot read nonexistent document then update, even if document is written after the read (42ms)
@firebase/firestore:     âœ” can have gets without mutations (44ms)
@firebase/firestore:     âœ” does not retry on permanent errors
@firebase/firestore:     âœ” retries when document already exists (1467ms)
@firebase/firestore:     âœ” are successful with no transaction operations
@firebase/firestore:     âœ” are cancelled on rejected promise (40ms)
@firebase/firestore:     âœ” are cancelled on throw (42ms)
@firebase/firestore:     must return a promise:
@firebase/firestore:       âœ” undefined is rejected
@firebase/firestore:       âœ” null is rejected
@firebase/firestore:       âœ” 5 is rejected
@firebase/firestore:       âœ” [object Object] is rejected
@firebase/firestore:       âœ” [object Object] is rejected
@firebase/firestore:       âœ” [object Object] is rejected
@firebase/firestore:     (Persistence=memory_lru_gc) withConverter() support
@firebase/firestore:       âœ” for Transaction.set<T>() and Transaction.get<T>()
@firebase/firestore:     (Persistence=indexeddb) withConverter() support
@firebase/firestore:       âœ” for Transaction.set<T>() and Transaction.get<T>() (57ms)
@firebase/firestore:   (Persistence=memory_lru_gc) Firestore
@firebase/firestore:     âœ” can read and write null fields
@firebase/firestore:     âœ” can read and write number fields
@firebase/firestore:     âœ” can read and write array fields
@firebase/firestore:     âœ” can read and write geo point fields
@firebase/firestore:     âœ” can read and write bytes fields
@firebase/firestore:     âœ” can read and write date fields
@firebase/firestore:     âœ” can read and write timestamp fields
@firebase/firestore:     âœ” can read and write document references
@firebase/firestore:     âœ” can read and write document references in an array
@firebase/firestore:   (Persistence=indexeddb) Firestore
@firebase/firestore:     âœ” can read and write null fields (97ms)
@firebase/firestore:     âœ” can read and write number fields (76ms)
@firebase/firestore:     âœ” can read and write array fields (100ms)
@firebase/firestore:     âœ” can read and write geo point fields (100ms)
@firebase/firestore:     âœ” can read and write bytes fields (111ms)
@firebase/firestore:     âœ” can read and write date fields (97ms)
@firebase/firestore:     âœ” can read and write timestamp fields (102ms)
@firebase/firestore:     âœ” can read and write document references (100ms)
@firebase/firestore:     âœ” can read and write document references in an array (116ms)
@firebase/firestore:   (Persistence=memory_lru_gc) Validation:
@firebase/firestore:     âœ” Batch writes require correct Document References
@firebase/firestore:     âœ” Transaction writes require correct Document References
@firebase/firestore:     âœ” Field paths must not have empty segments
@firebase/firestore:     âœ” Field paths must not have invalid segments
@firebase/firestore:     FirestoreSettings
@firebase/firestore:       âœ” disallows changing settings after use
@firebase/firestore:       âœ” enforces minimum cache size
@firebase/firestore:       âœ” garbage collection can be disabled
@firebase/firestore:       âœ” connectFirestoreEmulator() can set host and port
@firebase/firestore:       âœ” connectFirestoreEmulator() can set mockUserToken object
@firebase/firestore:       âœ” disallows calling connectFirestoreEmulator() for first time after use
@firebase/firestore:       âœ” allows calling connectFirestoreEmulator() after use with same config
@firebase/firestore:       âœ” disallows calling connectFirestoreEmulator() after use with different config
@firebase/firestore:       âœ” connectFirestoreEmulator() can set mockUserToken string
@firebase/firestore:       âœ” throws if sub / user_id is missing in mockUserToken
@firebase/firestore:     Firestore
@firebase/firestore:       âœ” disallows calling enableIndexedDbPersistence() after use
@firebase/firestore:       âœ” fails transaction if function doesn't return a Promise.
@firebase/firestore:     Collection paths
@firebase/firestore:       âœ” must be non-empty strings
@firebase/firestore:       âœ” must be odd-length
@firebase/firestore:       âœ” must not have empty segments
@firebase/firestore:     Document paths
@firebase/firestore:       âœ” must be strings
@firebase/firestore:       âœ” must be even-length
@firebase/firestore:     Writes
@firebase/firestore:       âœ” must be objects.
@firebase/firestore:       âœ” must not contain custom objects or functions.
@firebase/firestore:       âœ” must not contain field value transforms in arrays
@firebase/firestore:       âœ” must not contain directly nested arrays.
@firebase/firestore:       âœ” may contain indirectly nested arrays.
@firebase/firestore:       âœ” must not contain undefined.
@firebase/firestore:       âœ” must not contain references to a different database
@firebase/firestore:       âœ” must not contain reserved field names.
@firebase/firestore:       âœ” must not contain empty field names.
@firebase/firestore:       âœ” via set() must not contain deleteField()
@firebase/firestore:       âœ” via update() must not contain nested deleteField()
@firebase/firestore:     Array transforms
@firebase/firestore:       âœ” fail in queries
@firebase/firestore:       âœ” reject invalid elements
@firebase/firestore:       âœ” reject arrays
@firebase/firestore:     Numeric transforms
@firebase/firestore:       âœ” fail in queries
@firebase/firestore:     Queries
@firebase/firestore:       âœ” with non-positive limit fail
@firebase/firestore:       âœ” cannot be created from documents missing sort values
@firebase/firestore:       âœ” cannot be sorted by an uncommitted server timestamp
@firebase/firestore:       âœ” must not have more components than order by.
@firebase/firestore:       âœ” order-by-key bounds must be strings without slashes.
@firebase/firestore:       âœ” with more than one != query fail
@firebase/firestore:       âœ” with != and not-in filters fail
@firebase/firestore:       âœ” with multiple disjunctive filters fail
@firebase/firestore:       âœ” can have an IN filter with an array-contains filter.
@firebase/firestore:       âœ” enforce array requirements for disjunctive filters
@firebase/firestore:       âœ” must not specify starting or ending point after orderBy
@firebase/firestore:       âœ” must be non-empty strings or references when filtering by document ID
@firebase/firestore:       âœ” using IN and document id must have proper document references in array
@firebase/firestore:       âœ” cannot pass undefined as a field value
@firebase/firestore:       âœ” invalid query filters fail
@firebase/firestore:       âœ” passing non-filters to composite operators fails
@firebase/firestore:       âœ” conflicting operators inside a nested composite filter
@firebase/firestore:   (Persistence=indexeddb) Validation:
@firebase/firestore:     âœ” Batch writes require correct Document References
@firebase/firestore:     âœ” Transaction writes require correct Document References
@firebase/firestore:     âœ” Field paths must not have empty segments (55ms)
@firebase/firestore:     âœ” Field paths must not have invalid segments (58ms)
@firebase/firestore:     FirestoreSettings
@firebase/firestore:       âœ” disallows changing settings after use (38ms)
@firebase/firestore:       âœ” enforces minimum cache size
@firebase/firestore:       âœ” garbage collection can be disabled
@firebase/firestore:       âœ” connectFirestoreEmulator() can set host and port
@firebase/firestore:       âœ” connectFirestoreEmulator() can set mockUserToken object
@firebase/firestore:       âœ” disallows calling connectFirestoreEmulator() for first time after use (38ms)
@firebase/firestore:       âœ” allows calling connectFirestoreEmulator() after use with same config
@firebase/firestore:       âœ” disallows calling connectFirestoreEmulator() after use with different config (40ms)
@firebase/firestore:       âœ” connectFirestoreEmulator() can set mockUserToken string
@firebase/firestore:       âœ” throws if sub / user_id is missing in mockUserToken
@firebase/firestore:     Firestore
@firebase/firestore:       âœ” disallows calling enableIndexedDbPersistence() after use (42ms)
@firebase/firestore:       âœ” fails transaction if function doesn't return a Promise.
@firebase/firestore:     Collection paths
@firebase/firestore:       âœ” must be non-empty strings
@firebase/firestore:       âœ” must be odd-length
@firebase/firestore:       âœ” must not have empty segments
@firebase/firestore:     Document paths
@firebase/firestore:       âœ” must be strings
@firebase/firestore:       âœ” must be even-length
@firebase/firestore:     Writes
@firebase/firestore:       âœ” must be objects.
@firebase/firestore:       âœ” must not contain custom objects or functions.
@firebase/firestore:       âœ” must not contain field value transforms in arrays
@firebase/firestore:       âœ” must not contain directly nested arrays.
@firebase/firestore:       âœ” may contain indirectly nested arrays. (76ms)
@firebase/firestore:       âœ” must not contain undefined.
@firebase/firestore:       âœ” must not contain references to a different database
@firebase/firestore:       âœ” must not contain reserved field names.
@firebase/firestore:       âœ” must not contain empty field names.
@firebase/firestore:       âœ” via set() must not contain deleteField()
@firebase/firestore:       âœ” via update() must not contain nested deleteField()
@firebase/firestore:     Array transforms
@firebase/firestore:       âœ” fail in queries
@firebase/firestore:       âœ” reject invalid elements
@firebase/firestore:       âœ” reject arrays
@firebase/firestore:     Numeric transforms
@firebase/firestore:       âœ” fail in queries
@firebase/firestore:     Queries
@firebase/firestore:       âœ” with non-positive limit fail
@firebase/firestore:       âœ” cannot be created from documents missing sort values (73ms)
@firebase/firestore:       âœ” cannot be sorted by an uncommitted server timestamp (85ms)
@firebase/firestore:       âœ” must not have more components than order by.
@firebase/firestore:       âœ” order-by-key bounds must be strings without slashes.
@firebase/firestore:       âœ” with more than one != query fail
@firebase/firestore:       âœ” with != and not-in filters fail
@firebase/firestore:       âœ” with multiple disjunctive filters fail
@firebase/firestore:       âœ” can have an IN filter with an array-contains filter.
@firebase/firestore:       âœ” enforce array requirements for disjunctive filters
@firebase/firestore:       âœ” must not specify starting or ending point after orderBy
@firebase/firestore:       âœ” must be non-empty strings or references when filtering by document ID
@firebase/firestore:       âœ” using IN and document id must have proper document references in array
@firebase/firestore:       âœ” cannot pass undefined as a field value
@firebase/firestore:       âœ” invalid query filters fail
@firebase/firestore:       âœ” passing non-filters to composite operators fails
@firebase/firestore:       âœ” conflicting operators inside a nested composite filter
@firebase/firestore:   WebChannel
@firebase/firestore:     - receives error messages
@firebase/firestore:   Remote Storage
@firebase/firestore:     âœ” can write
@firebase/firestore:     âœ” can read
@firebase/firestore:     âœ” can read deleted documents
@firebase/firestore:   Watch Stream
@firebase/firestore:     âœ” can be stopped before handshake
@firebase/firestore:     âœ” gets connected event before first message
@firebase/firestore:   Write Stream
@firebase/firestore:     âœ” can be stopped before handshake
@firebase/firestore:     âœ” can be stopped after handshake
@firebase/firestore:     âœ” closes when idle
@firebase/firestore:     âœ” cancels idle on write
@firebase/firestore:     âœ” force refreshes auth token on receiving unauthenticated error (768ms)
@firebase/firestore:   aggregateFieldEqual
@firebase/firestore:     âœ” equates two equal aggregate fields
@firebase/firestore:     âœ” differentiates two different aggregate fields
@firebase/firestore:   Bytes
@firebase/firestore:     âœ” constructs values from Base64
@firebase/firestore:     âœ” constructs values from Uint8Array
@firebase/firestore:     âœ” works with instanceof checks
@firebase/firestore:     âœ” support equality checking with isEqual()
@firebase/firestore:   CollectionReference
@firebase/firestore:     âœ” support equality checking with isEqual()
@firebase/firestore:     âœ” JSON.stringify() does not throw
@firebase/firestore:   DocumentReference
@firebase/firestore:     âœ” support equality checking with isEqual()
@firebase/firestore:     âœ” JSON.stringify() does not throw
@firebase/firestore:   DocumentSnapshot
@firebase/firestore:     âœ” support equality checking with isEqual()
@firebase/firestore:     âœ” JSON.stringify() does not throw
@firebase/firestore:   Query
@firebase/firestore:     âœ” support equality checking with isEqual()
@firebase/firestore:     âœ” JSON.stringify() does not throw
@firebase/firestore:   QuerySnapshot
@firebase/firestore:     âœ” support equality checking with isEqual()
@firebase/firestore:     âœ” JSON.stringify() does not throw
@firebase/firestore:   SnapshotMetadata
@firebase/firestore:     âœ” from DocumentSnapshot support equality checking with isEqual()
@firebase/firestore:     âœ” from QuerySnapshot support equality checking with isEqual()
@firebase/firestore:   Settings
@firebase/firestore:     âœ” cannot use mutually exclusive settings together
@firebase/firestore:     âœ” long polling should be in auto-detect mode by default
@firebase/firestore:     âœ” long polling should be in force mode if force=true
@firebase/firestore:     âœ” long polling should be in auto-detect mode if autoDetect=true
@firebase/firestore:     âœ” long polling should be in auto-detect mode if force=false
@firebase/firestore:     âœ” long polling should be disabled if autoDetect=false
@firebase/firestore:     âœ” long polling should be in auto-detect mode if autoDetect=true and force=false
@firebase/firestore:     âœ” long polling should be in force mode if autoDetect=false and force=true
@firebase/firestore:     âœ” long polling should be disabled if autoDetect=false and force=false
@firebase/firestore:     âœ” timeoutSeconds is undefined by default
@firebase/firestore:     âœ” timeoutSeconds minimum value is allowed
@firebase/firestore:     âœ” timeoutSeconds maximum value is allowed
@firebase/firestore:     âœ” timeoutSeconds typical value is allowed
@firebase/firestore:     âœ” timeoutSeconds floating point value is allowed
@firebase/firestore:     âœ” timeoutSeconds value one less than minimum throws
@firebase/firestore:     âœ” timeoutSeconds value one more than maximum throws
@firebase/firestore:     âœ” timeoutSeconds value of 0 throws
@firebase/firestore:     âœ” timeoutSeconds value of -0 throws
@firebase/firestore:     âœ” timeoutSeconds value of -1 throws
@firebase/firestore:     âœ” timeoutSeconds value of -infinity throws
@firebase/firestore:     âœ” timeoutSeconds value of +infinity throws
@firebase/firestore:     âœ” timeoutSeconds value of NaN throws
@firebase/firestore:     âœ” long polling autoDetect=[something truthy] should be coerced to true
@firebase/firestore:     âœ” long polling autoDetect=[something falsy] should be coerced to false
@firebase/firestore:     âœ” long polling autoDetect=null should be coerced to false
@firebase/firestore:     âœ” long polling force=[something truthy] should be coerced to true
@firebase/firestore:     âœ” long polling force=[something falsy] should be coerced to false
@firebase/firestore:     âœ” long polling force=null should be coerced to false
@firebase/firestore:     âœ” gets settings from useEmulator
@firebase/firestore:     âœ” gets privateSettings from useEmulator
@firebase/firestore:     âœ” prefers host from useEmulator to host from settings
@firebase/firestore:     âœ” sets credentials based on mockUserToken object
@firebase/firestore:     âœ” sets credentials based on mockUserToken string
@firebase/firestore:   DocumentChange:
@firebase/firestore:     âœ” positions are correct for additions
@firebase/firestore:     âœ” positions are correct for deletions
@firebase/firestore:     âœ” positions are correct for modifications
@firebase/firestore:     âœ” positions are correct for sort order changes
@firebase/firestore:     âœ” positions are correct for randomly chosen examples (146ms)
@firebase/firestore:   FieldPath
@firebase/firestore:     âœ” support equality checking with isEqual()
@firebase/firestore:   FieldValue
@firebase/firestore:     âœ” support equality checking with isEqual()
@firebase/firestore:     âœ” support instanceof checks
@firebase/firestore:     âœ” JSON.stringify() does not throw
@firebase/firestore:   GeoPoint
@firebase/firestore:     âœ” constructs values
@firebase/firestore:     âœ” GeoPoints throw on invalid values
@firebase/firestore:     âœ” compares correctly
@firebase/firestore:     âœ” support equality checking with isEqual()
@firebase/firestore:     âœ” serializes to JSON
@firebase/firestore:   long_polling_options
@firebase/firestore:     âœ” longPollingOptionsEqual() should return true for empty objects
@firebase/firestore:     âœ” longPollingOptionsEqual() should return true if both objects have the same timeoutSeconds
@firebase/firestore:     âœ” longPollingOptionsEqual() should return false if the objects have different timeoutSeconds
@firebase/firestore:     âœ” longPollingOptionsEqual() should ignore properties not defined in ExperimentalLongPollingOptions
@firebase/firestore:     âœ” cloneLongPollingOptions() with an empty object should return an empty object
@firebase/firestore:     âœ” cloneLongPollingOptions() should copy timeoutSeconds
@firebase/firestore:     âœ” cloneLongPollingOptions() should not copy properties not defined in ExperimentalLongPollingOptions
@firebase/firestore:   Timestamp
@firebase/firestore:     âœ” constructor should validate the "seconds" argument and store it
@firebase/firestore:     âœ” constructor should validate the "nanoseconds" argument and store it
@firebase/firestore:     âœ” fromDate
@firebase/firestore:     âœ” valueOf
@firebase/firestore:     âœ” arithmetic comparison of a Timestamp object to itself
@firebase/firestore:     âœ” arithmetic comparison of equivalent, but distinct, Timestamp objects
@firebase/firestore:     âœ” arithmetic comparison of Timestamp objects whose nanoseconds differ
@firebase/firestore:     âœ” arithmetic comparison of Timestamp objects whose seconds differ
@firebase/firestore:     âœ” arithmetic comparison of the smallest and largest Timestamp objects
@firebase/firestore:     âœ” handles decimal inputs in fromMillis()
@firebase/firestore:     âœ” serializes to JSON
@firebase/firestore:   EventManager
@firebase/firestore:     âœ” handles many listenables per query
@firebase/firestore:     âœ” handles unlisten on unknown listenable gracefully
@firebase/firestore:     âœ” notifies listenables in the right order
@firebase/firestore:     âœ” will forward onOnlineStateChange calls
@firebase/firestore:   QueryListener
@firebase/firestore:     âœ” raises collection events
@firebase/firestore:     âœ” raises error event
@firebase/firestore:     âœ” raises event for empty collection after sync
@firebase/firestore:     âœ” raises 'hasPendingWrites' for pending mutation in initial snapshot
@firebase/firestore:     âœ” doesn't raise 'hasPendingWrites' for committed mutation in initial snapshot
@firebase/firestore:     âœ” does not raise events for metadata changes unless specified
@firebase/firestore:     âœ” raises metadata events only when specified
@firebase/firestore:     âœ” Metadata-only document changes are filtered out when includeMetadataChanges is false
@firebase/firestore:     âœ” Suppresses write acknowledgment if Watch hasn't caught up
@firebase/firestore:     âœ” Will wait for sync if online
@firebase/firestore:     âœ” Will raise initial event when going offline
@firebase/firestore:     âœ” Will raise initial event when going offline and there are no docs
@firebase/firestore:     âœ” Will raise initial event when offline and there are no docs
@firebase/firestore:   FieldFilter
@firebase/firestore:     âœ” exposes field filter members
@firebase/firestore:   CompositeFilter
@firebase/firestore:     âœ” exposes composite filter members for AND filter
@firebase/firestore:     âœ” exposes composite filter members for OR filter
@firebase/firestore:     âœ” has working composite filter nested checks
@firebase/firestore:     âœ” computes canonical id of flat conjunctions
@firebase/firestore:   ListenSequence
@firebase/firestore:     âœ” writes the new sequence number to the syncer
@firebase/firestore:     âœ” bumps the next value based on notifications from the syncer
@firebase/firestore:   Bound
@firebase/firestore:     âœ” implements isEqual
@firebase/firestore:   Query
@firebase/firestore:     âœ” can get collection group
@firebase/firestore:     âœ” matches based on document key
@firebase/firestore:     âœ” matches correctly for shallow ancestor query
@firebase/firestore:     âœ” matches primitive values for filters
@firebase/firestore:     âœ” matches array-contains filters
@firebase/firestore:     âœ” matches array-contains filters with object values
@firebase/firestore:     âœ” matches IN filters
@firebase/firestore:     âœ” matches IN filters with object values
@firebase/firestore:     âœ” matches not-in filters
@firebase/firestore:     âœ” matches not-in filters with object values
@firebase/firestore:     âœ” matches array-contains-any filters
@firebase/firestore:     âœ” matches array-contains-any filters with object values
@firebase/firestore:     âœ” matches NaN for filters
@firebase/firestore:     âœ” matches null for filters
@firebase/firestore:     âœ” matches complex objects for filters
@firebase/firestore:     âœ” doesn't crash querying unset fields
@firebase/firestore:     âœ” doesn't remove complex objects with orderBy
@firebase/firestore:     âœ” filters based on array value
@firebase/firestore:     âœ” filters based on object value
@firebase/firestore:     âœ” sorts documents in the correct order
@firebase/firestore:     âœ” sorts documents using multiple fields
@firebase/firestore:     âœ” sorts documents with descending too
@firebase/firestore:     âœ” generates canonical ids
@firebase/firestore:     âœ” canonical ids are stable
@firebase/firestore:     âœ” generates the correct implicit order by's
@firebase/firestore:     âœ” generates the correct implicit order by's for multiple inequality
@firebase/firestore:     âœ” matchesAllDocuments() considers filters, orders and bounds
@firebase/firestore:     âœ” matches composite queries
@firebase/firestore:     âœ” matches composite queries with multiple inequality
@firebase/firestore:     âœ” generates appropriate order-bys for aggregate and non-aggregate targets
@firebase/firestore:     âœ” generated order-bys are not affected by previously memoized targets
@firebase/firestore:   View
@firebase/firestore:     âœ” adds documents based on query
@firebase/firestore:     âœ” removes documents
@firebase/firestore:     âœ” returns null if there are no changes
@firebase/firestore:     âœ” does not return null for the first changes
@firebase/firestore:     âœ” filters documents based on query with filter
@firebase/firestore:     âœ” updates documents based on query with filter
@firebase/firestore:     âœ” removes documents for query with limit
@firebase/firestore:     âœ” doesn't report changes for documents beyond limit of query
@firebase/firestore:     âœ” keeps track of limbo documents
@firebase/firestore:     âœ” is marked from cache with limbo documents
@firebase/firestore:     âœ” resumes queries without creating limbo documents
@firebase/firestore:     âœ” returns needsRefill on delete limit query
@firebase/firestore:     âœ” returns needsRefill on reorder in limit query
@firebase/firestore:     âœ” doesn't need refill on reorder within limit
@firebase/firestore:     âœ” doesn't need refill on reorder after limit query
@firebase/firestore:     âœ” doesn't need refill for additions after the limit
@firebase/firestore:     âœ” doesn't need refill for deletions when not near the limit
@firebase/firestore:     âœ” handles applying irrelevant docs
@firebase/firestore:     âœ” computes mutatedDocKeys
@firebase/firestore:     âœ” computes removes keys from mutatedDocKeys when new doc does not have local changes
@firebase/firestore:     âœ” remembers local mutations from previous snapshot
@firebase/firestore:     âœ” remembers local mutations from previous call to computeDocChanges
@firebase/firestore:   Md5
@firebase/firestore:     âœ” constructor should create distinct instances
@firebase/firestore:     âœ” update() should accept a string
@firebase/firestore:     âœ” update() should accept a string of non-standard characters
@firebase/firestore:     âœ” update() should accept a string of UTF-8 encoded non-standard characters 
@firebase/firestore:     âœ” update() should accept an array of number
@firebase/firestore:     âœ” update() should accept a Uint8Array
@firebase/firestore:     âœ” update() should honor opt_length on a string
@firebase/firestore:     âœ” update() should honor opt_length on an array of number
@firebase/firestore:     âœ” update() should honor opt_length on a Uint8Array
@firebase/firestore:     âœ” reset() should reset
@firebase/firestore:   Integer
@firebase/firestore:     âœ” constructor should create distinct instances
@firebase/firestore:     âœ” constructor should construct 1 and -1, 2 and -2
@firebase/firestore:     âœ” constructor should construct big positive values
@firebase/firestore:     âœ” constructor should construct big negative values
@firebase/firestore:     âœ” add() should produce the sum of the two numbers
@firebase/firestore:     âœ” multiply() should produce the product of the two numbers
@firebase/firestore:     âœ” modulo() should produce the division remainder of the two numbers
@firebase/firestore:     âœ” compare() should correctly compare two numbers for order
@firebase/firestore:     âœ” toNumber() should return the correct number
@firebase/firestore:     âœ” toString() should return the correct number
@firebase/firestore:     âœ” fromNumber() create a new Integer with the given value
@firebase/firestore:     âœ” fromString() create a new Integer with the given value
@firebase/firestore:     âœ” getBits() create a new Integer with the given value
@firebase/firestore:   Ordered Code Writer
@firebase/firestore:     âœ” computes number of leading zeros
@firebase/firestore:     âœ” converts numbers to bits
@firebase/firestore:     âœ” orders numbers correctly
@firebase/firestore:     âœ” converts strings to bits
@firebase/firestore:     âœ” orders strings correctly
@firebase/firestore:     âœ” converts bytes to bits
@firebase/firestore:     âœ” orders bytes correctly
@firebase/firestore:     âœ” encodes infinity
@firebase/firestore:     âœ” seeds bytes
@firebase/firestore:   Firestore Index Value Writer
@firebase/firestore:     can gracefully handle different format of timestamp
@firebase/firestore:       âœ” can handle different format of timestamp
@firebase/firestore:       âœ” can handle timestamps with 0 nanoseconds
@firebase/firestore:       âœ” can compare timestamps with  different formats
@firebase/firestore:       âœ” sorts vector as a different type from array and map, with unique rules
@firebase/firestore:   UpdateData - v9
@firebase/firestore:     âœ” Supports properties with primitive types
@firebase/firestore:     âœ” Supports properties with custom types
@firebase/firestore:     given properties with dots
@firebase/firestore:       âœ” preserves the value type
@firebase/firestore:       âœ” does not allow matching a sub-string|path
@firebase/firestore:     given nested objects without index properties
@firebase/firestore:       âœ” supports object replacement at each layer (with partial)
@firebase/firestore:       âœ” errors for unexpected value types at each layer
@firebase/firestore:       âœ” does not allow properties that were not on the original type
@firebase/firestore:       âœ” preserves value types for dot notation
@firebase/firestore:     given nested objects with index properties
@firebase/firestore:       âœ” supports object replacement at each layer (with partial)
@firebase/firestore:       âœ” errors for unexpected value types at each layer
@firebase/firestore:       âœ” does not allow properties that were not on the original type
@firebase/firestore:       âœ” preserves value types for dot notation
@firebase/firestore:     UpdateData - v10
@firebase/firestore:       given nested objects with index properties
@firebase/firestore:         âœ” supports object replacement at each layer (with partial)
@firebase/firestore:         âœ” allows dot notation for nested index types
@firebase/firestore:         âœ” allows dot notation for nested index types that are 2 layers deep
@firebase/firestore:   FirestoreTypeConverter
@firebase/firestore:     âœ” converter has the minimal typing information
@firebase/firestore:     âœ” converter has the minimal typing information plus return types
@firebase/firestore:     âœ” has the additional 'merge' version of toFirestore()
@firebase/firestore:     âœ” converter is explicitly typed as FirestoreDataConverter<T>
@firebase/firestore:     âœ” converter is explicitly typed as FirestoreDataConverter<T, U>
@firebase/firestore:     âœ” setDoc() fails to compile if AppModelType argument is missing properties
@firebase/firestore:     âœ” setDoc() fails to compile if AppModelType argument contains undeclared properties
@firebase/firestore:     âœ” setDoc() fails to compile if AppModelType argument contains a property with an incorrect type
@firebase/firestore:     âœ” updateDoc() successfully compiles even if DbModelType argument is missing properties
@firebase/firestore:     âœ” updateDoc() fails to compile if DbModelType argument contains undeclared properties
@firebase/firestore:     âœ” updateDoc() fails to compile if DbModelType argument contains a property with an incorrect type
@firebase/firestore:     âœ” getDoc() returns AppModelType
@firebase/firestore:   MemoryBundleCache
@firebase/firestore:     âœ” returns undefined when bundle id is not found
@firebase/firestore:     âœ” returns saved bundle
@firebase/firestore:     âœ” returns undefined when query name is not found
@firebase/firestore:     âœ” returns saved collection queries
@firebase/firestore:     âœ” returns saved collection group queries
@firebase/firestore:     âœ” returns expected limit queries
@firebase/firestore:     âœ” returns expected limit to last queries
@firebase/firestore:   IndexedDbBundleCache
@firebase/firestore:     âœ” returns undefined when bundle id is not found
@firebase/firestore:     âœ” returns saved bundle
@firebase/firestore:     âœ” returns undefined when query name is not found
@firebase/firestore:     âœ” returns saved collection queries
@firebase/firestore:     âœ” returns saved collection group queries
@firebase/firestore:     âœ” returns expected limit queries
@firebase/firestore:     âœ” returns expected limit to last queries
@firebase/firestore:   MemoryDocumentOverlayCache
@firebase/firestore:     âœ” returns null when overlay is not found
@firebase/firestore:     âœ” can read saved overlay
@firebase/firestore:     âœ” can read saved overlays
@firebase/firestore:     âœ” can overwrite overlays
@firebase/firestore:     âœ” can delete overlays repeatedly
@firebase/firestore:     âœ” can delete overlays
@firebase/firestore:     âœ” can get all overlays for collection
@firebase/firestore:     âœ” can get all overlays since batch ID
@firebase/firestore:     âœ” can get all overlays for collection group
@firebase/firestore:     âœ” getting overlays from collection group enforces batch ID
@firebase/firestore:     âœ” getting overlays from collection group enforces count limit
@firebase/firestore:     âœ” getting overlays from collection group does not return partial batches
@firebase/firestore:     âœ” updating an overlay removes the old entry for that overlay
@firebase/firestore:     âœ” skips non-existing overlay in batch lookup
@firebase/firestore:     âœ” supports empty batch in batch lookup
@firebase/firestore:     âœ” can read saved overlays in batches
@firebase/firestore:   IndexedDbDocumentOverlayCache
@firebase/firestore:     âœ” returns null when overlay is not found
@firebase/firestore:     âœ” can read saved overlay
@firebase/firestore:     âœ” can read saved overlays
@firebase/firestore:     âœ” can overwrite overlays
@firebase/firestore:     âœ” can delete overlays repeatedly
@firebase/firestore:     âœ” can delete overlays
@firebase/firestore:     âœ” can get all overlays for collection
@firebase/firestore:     âœ” can get all overlays since batch ID
@firebase/firestore:     âœ” can get all overlays for collection group
@firebase/firestore:     âœ” getting overlays from collection group enforces batch ID
@firebase/firestore:     âœ” getting overlays from collection group enforces count limit
@firebase/firestore:     âœ” getting overlays from collection group does not return partial batches
@firebase/firestore:     âœ” updating an overlay removes the old entry for that overlay
@firebase/firestore:     âœ” skips non-existing overlay in batch lookup
@firebase/firestore:     âœ” supports empty batch in batch lookup
@firebase/firestore:     âœ” can read saved overlays in batches
@firebase/firestore:   EncodedResourcePath
@firebase/firestore:     âœ” encodes resource paths
@firebase/firestore:     âœ” orders resource paths
@firebase/firestore:   MemoryGlobals
@firebase/firestore:     âœ” returns session token that was previously saved
@firebase/firestore:     âœ” returns empty session token that was previously saved
@firebase/firestore:   IndexedDbGlobals
@firebase/firestore:     âœ” returns session token that was previously saved
@firebase/firestore:     âœ” returns empty session token that was previously saved
@firebase/firestore:   IndexedDb IndexBackfiller
@firebase/firestore:     âœ” Writes latest read time to FieldIndex on completion
@firebase/firestore:     âœ” Fetches documents after earliest read time
@firebase/firestore:     âœ” Writes Index Entries
@firebase/firestore:     âœ” Writes oldest document first
@firebase/firestore:     âœ” Uses DocumentKey Offset for large Snapshots
@firebase/firestore:     âœ” Updates collection groups
@firebase/firestore:     âœ” Prioritizes new collection groups
@firebase/firestore:     âœ” Writes until cap
@firebase/firestore:     âœ” Uses latest read time for empty collections
@firebase/firestore:     âœ” Handles local mutations after remote docs
@firebase/firestore:     âœ” Mutations up to document limit and updates batchId on index
@firebase/firestore:     âœ” Mutation finishes mutation batch even if it exceeds limit
@firebase/firestore:     âœ” Mutations from high water mark
@firebase/firestore:     âœ” Updates existing doc to new value
@firebase/firestore:     âœ” Updates docs that no longer match
@firebase/firestore:     âœ” Does not process same document twice
@firebase/firestore:     âœ” Applies set to remote doc
@firebase/firestore:     âœ” Applies patch to remote doc
@firebase/firestore:     âœ” Applies delete to remote doc
@firebase/firestore:     âœ” Reindexes documents when new index is added
@firebase/firestore:   index_manager.ts top-level functions
@firebase/firestore:     displayNameForIndexType()
@firebase/firestore:       âœ” IndexType.NONE
@firebase/firestore:       âœ” IndexType.FULL
@firebase/firestore:       âœ” IndexType.PARTIAL
@firebase/firestore:       âœ” invalid IndexType
@firebase/firestore:   MemoryIndexManager
@firebase/firestore:     âœ” can add and read collection=>parent index entries
@firebase/firestore:   IndexedDbIndexManager
@firebase/firestore:     âœ” can add and read collection=>parent index entries
@firebase/firestore:     âœ” can add indexes
@firebase/firestore:     âœ” uses auto-incrementing index id
@firebase/firestore:     âœ” can get indexes
@firebase/firestore:     âœ” can update collection group
@firebase/firestore:     âœ” can get next collection group to update
@firebase/firestore:     âœ” deleting field index removes entry from collection group
@firebase/firestore:     âœ” deleting field index removes entry from getNextCollectionGroupToUpdate()
@firebase/firestore:     âœ” persist index offset
@firebase/firestore:     âœ” changes user
@firebase/firestore:     âœ” adds documents
@firebase/firestore:     âœ” applies orderBy
@firebase/firestore:     âœ” applies orderBy with not equals filter
@firebase/firestore:     âœ” applies equality filter
@firebase/firestore:     âœ” applies nested field equality filter
@firebase/firestore:     âœ” applies not equals filter
@firebase/firestore:     âœ” applies equals with not equals filter
@firebase/firestore:     âœ” applies array contains with not equals filter
@firebase/firestore:     âœ” applies array contains with not equals filter on same field
@firebase/firestore:     âœ” applies equals with not equals filter on same field (42ms)
@firebase/firestore:     âœ” applies less than or equals filter
@firebase/firestore:     âœ” applies greater than or equals filter
@firebase/firestore:     âœ” applies greater than filter
@firebase/firestore:     âœ” applies range filter
@firebase/firestore:     âœ” applies startAt filter
@firebase/firestore:     âœ” applies startAt filter with notIn
@firebase/firestore:     âœ” applies startAfter filter
@firebase/firestore:     âœ” applies endAt filter
@firebase/firestore:     âœ” applies endBefore filter
@firebase/firestore:     âœ” applies range with bound filter
@firebase/firestore:     âœ” applies in filter
@firebase/firestore:     âœ” applies not in filter
@firebase/firestore:     âœ” applies not in filter with greater than filter
@firebase/firestore:     âœ” applies not in filter with out of bounds greater than filter
@firebase/firestore:     âœ” applies array contains filter
@firebase/firestore:     âœ” applies array contains any filter
@firebase/firestore:     âœ” validates that array contains filter only matches array
@firebase/firestore:     âœ” returns empty result when no index exists
@firebase/firestore:     âœ” handles when no matching filter exists
@firebase/firestore:     âœ” returns empty results when no matching documents exists
@firebase/firestore:     âœ” filters by field type
@firebase/firestore:     âœ” supports collection group indexes
@firebase/firestore:     âœ” applies limit filter
@firebase/firestore:     âœ” uses ordering for limit filter
@firebase/firestore:     âœ” updates index entries
@firebase/firestore:     âœ” removes index entries
@firebase/firestore:     âœ” supports order by key
@firebase/firestore:     âœ” supports order by filter
@firebase/firestore:     âœ” supports ascending order with greater than filter
@firebase/firestore:     âœ” supports descending order with less than filter
@firebase/firestore:     âœ” supports ascending order with greater than filter
@firebase/firestore:     âœ” supports descending order with greater than filter
@firebase/firestore:     âœ” cannot expand result set from a cursor
@firebase/firestore:     âœ” can have filters on the same field
@firebase/firestore:     âœ” can index timestamp fields of different format
@firebase/firestore:     âœ” can index VectorValue fields
@firebase/firestore:     âœ” support advances queries (401ms)
@firebase/firestore:     âœ” serves partial and full index (48ms)
@firebase/firestore:     âœ” createTargetIndexes() creates full indexes for each sub-target
@firebase/firestore:     âœ” createTargetIndexes() upgrades a partial index to a full index
@firebase/firestore:     âœ” createTargetIndexes() does nothing if a full index already exists
@firebase/firestore:     âœ” deleteAllFieldIndexes() deletes all indexes
@firebase/firestore:   IndexedDbSchema: createOrUpgradeDb
@firebase/firestore:     âœ” can install schema version 1
@firebase/firestore:     âœ” drops the query cache from 2 to 3
@firebase/firestore:     âœ” can upgrade from schema version 3 to 4
@firebase/firestore:     âœ” can upgrade from schema version 4 to 5
@firebase/firestore:     âœ” can upgrade from version 5 to 6
@firebase/firestore:     âœ” can upgrade from version 6 to 7
@firebase/firestore:     âœ” can upgrade from version 7 to 8
@firebase/firestore:     âœ” rewrites canonical IDs during upgrade from version 9 to 10
@firebase/firestore:     âœ” can use read-time index after schema migration
@firebase/firestore:     âœ” can get recent document changes in a collection
@firebase/firestore:     âœ” can upgrade from version 11 to 12
@firebase/firestore:     âœ” can upgrade from version 12 to 13
@firebase/firestore:     âœ” can upgrade from schema version 13 to 14 (overlay migration)
@firebase/firestore:     âœ” can upgrade from version 13 to 14
@firebase/firestore:     âœ” can upgrade from version 14 to 15
@firebase/firestore:     âœ” can upgrade from version 15 to 16
@firebase/firestore:     âœ” can upgrade from version 16 to 17
@firebase/firestore:     âœ” downgrading throws a custom error
@firebase/firestore:   IndexedDb: canActAsPrimary
@firebase/firestore:     âœ” is eligible when client is offline and hidden and other client is offline and hidden
@firebase/firestore:     âœ” is eligible when client is offline and visible and other client is offline and hidden
@firebase/firestore:     âœ” is eligible when client is online and hidden and other client is offline and hidden
@firebase/firestore:     âœ” is eligible when client is online and visible and other client is offline and hidden
@firebase/firestore:     âœ” is not eligible when client is offline and hidden and other client is offline and visible
@firebase/firestore:     âœ” is eligible when client is offline and visible and other client is offline and visible
@firebase/firestore:     âœ” is eligible when client is online and hidden and other client is offline and visible
@firebase/firestore:     âœ” is eligible when client is online and visible and other client is offline and visible
@firebase/firestore:     âœ” is not eligible when client is offline and hidden and other client is online and hidden
@firebase/firestore:     âœ” is not eligible when client is offline and visible and other client is online and hidden
@firebase/firestore:     âœ” is eligible when client is online and hidden and other client is online and hidden
@firebase/firestore:     âœ” is eligible when client is online and visible and other client is online and hidden
@firebase/firestore:     âœ” is not eligible when client is offline and hidden and other client is online and visible
@firebase/firestore:     âœ” is not eligible when client is offline and visible and other client is online and visible
@firebase/firestore:     âœ” is not eligible when client is online and hidden and other client is online and visible
@firebase/firestore:     âœ” is eligible when client is online and visible and other client is online and visible
@firebase/firestore:     âœ” is eligible when only client
@firebase/firestore:     âœ” regains lease if available
@firebase/firestore:     âœ” obtains lease if forceOwningTab is set
@firebase/firestore:   IndexedDb: allowTabSynchronization
@firebase/firestore:     âœ” blocks start() on IndexedDbTransactionError when synchronization is disabled 
@firebase/firestore:     âœ” allows start() with IndexedDbTransactionError when synchronization is enabled 
@firebase/firestore:     âœ” blocks start() when getHighestListenSequenceNumber() fails
@firebase/firestore:     âœ” ignores intermittent IndexedDbTransactionError during lease refresh
@firebase/firestore:     âœ” rejects access when synchronization is disabled
@firebase/firestore:     âœ” grants access when synchronization is enabled
@firebase/firestore:   IndexedDb
@firebase/firestore:     âœ” can re-open after close
@firebase/firestore:   Local Serializer
@firebase/firestore:     âœ” SetMutation + TransformMutation (legacy) are squashed
@firebase/firestore:     âœ” PatchMutation + TransformMutation (legacy) are squashed
@firebase/firestore:     âœ” TransformMutation (legacy) + TransformMutation (legacy) throw assertion
@firebase/firestore:     âœ” DeleteMutation + TransformMutation (legacy) on its own throws assertion
@firebase/firestore:     âœ” multiple mutations are squashed
@firebase/firestore:     âœ” serializes overlay
@firebase/firestore:     âœ” serializes FieldIndex
@firebase/firestore:     âœ” serializes IndexState
@firebase/firestore:   LocalStore w/ IndexedDB Persistence (Non generic)
@firebase/firestore:     âœ” Adds Indexes
@firebase/firestore:     âœ” Removes Indexes
@firebase/firestore:     âœ” Does Not Reset Index When Same Index Is Added
@firebase/firestore:     âœ” Deleted Document Removes Index
@firebase/firestore:     âœ” Uses Indexes
@firebase/firestore:     âœ” Uses Partially Indexed Remote Documents When Available
@firebase/firestore:     âœ” Uses Partially Indexed Overlays When Available
@firebase/firestore:     âœ” Does Not Use Limit When Index Is Outdated
@firebase/firestore:     âœ” Uses Index For Limit Query When Index Is Updated
@firebase/firestore:     âœ” Indexes Server Timestamps
@firebase/firestore:     âœ” can auto-create indexes (38ms)
@firebase/firestore:     âœ” can auto-create indexes works with or query (44ms)
@firebase/firestore:     âœ” does not auto-create indexes for small collections
@firebase/firestore:     âœ” does not auto create indexes when index lookup is expensive
@firebase/firestore:     âœ” index auto creation works when backfiller runs halfway
@firebase/firestore:     âœ” index created by index auto creation exists after turn off auto creation (38ms)
@firebase/firestore:     âœ” disable index auto creation works (68ms)
@firebase/firestore:     âœ” index auto creation works with mutation (41ms)
@firebase/firestore:     âœ” delete all indexes works with index auto creation (52ms)
@firebase/firestore:     âœ” delete all indexes works with manual added indexes
@firebase/firestore:     âœ” index auto creation does not work with multiple inequality
@firebase/firestore:   LocalStore w/ Memory Persistence
@firebase/firestore:     âœ” localStoreSetIndexAutoCreationEnabled()
@firebase/firestore:     âœ” handles SetMutation
@firebase/firestore:     âœ” handles SetMutation -> Document
@firebase/firestore:     âœ” handles SetMutation -> Ack (Held) -> SetMutation -> Reject -> RemoteEvent (Release Ack)
@firebase/firestore:     âœ” handles NoDocument -> SetMutation -> Ack
@firebase/firestore:     âœ” handles SetMutation -> NoDocument
@firebase/firestore:     âœ” handles Document -> SetMutation -> Ack ->  Document
@firebase/firestore:     âœ” handles PatchMutation without prior document
@firebase/firestore:     âœ” handles PatchMutation -> Document -> Ack
@firebase/firestore:     âœ” handles PatchMutation -> Ack -> Document
@firebase/firestore:     âœ” handles DeleteMutation -> Ack
@firebase/firestore:     âœ” handles Document -> DeleteMutation -> Ack
@firebase/firestore:     âœ” handles DeleteMutation -> Document -> Ack
@firebase/firestore:     âœ” handles Document -> NoDocument -> Document
@firebase/firestore:     âœ” handles SetMutation -> PatchMutation -> Document -> Ack -> Ack
@firebase/firestore:     âœ” handles SetMutation + PatchMutation
@firebase/firestore:     âœ” handles SetMutation -> Ack -> PatchMutation -> Reject
@firebase/firestore:     âœ” handles SetMutation(A) + SetMutation(B) + PatchMutation(A)
@firebase/firestore:     âœ” handles DeleteMutation -> PatchMutation -> Ack -> Ack
@firebase/firestore:     âœ” collects garbage after ChangeBatch with no target ids
@firebase/firestore:     âœ” collects garbage after ChangeBatch
@firebase/firestore:     âœ” collects garbage after acknowledged mutation
@firebase/firestore:     âœ” collects garbage after rejected mutation
@firebase/firestore:     âœ” pins documents in the local view
@firebase/firestore:     âœ” throws away documents with unknown target-ids immediately
@firebase/firestore:     âœ” can execute document queries
@firebase/firestore:     âœ” can execute collection queries
@firebase/firestore:     âœ” can execute mixed collection queries
@firebase/firestore:     âœ” reads all documents for initial collection queries
@firebase/firestore:     - persists resume tokens
@firebase/firestore:     - does not replace resume token with empty resume token
@firebase/firestore:     âœ” handles SetMutation -> Transform -> Transform
@firebase/firestore:     - handles SetMutation -> Ack -> Transform -> Ack -> Transform
@firebase/firestore:     âœ” handles SetMutation -> Transform-> RemoteEvent -> Transform
@firebase/firestore:     âœ” holds back transforms
@firebase/firestore:     âœ” handles MergeMutation with Transform -> RemoteEvent
@firebase/firestore:     âœ” handles PatchMutation with Transform -> RemoteEvent
@firebase/firestore:     âœ” handles saving bundled documents
@firebase/firestore:     âœ” handles saving bundled documents with newer existing version
@firebase/firestore:     âœ” handles saving bundled documents with older existing version
@firebase/firestore:     âœ” handles saving bundled documents with same existing version should not overwrite
@firebase/firestore:     âœ” handles MergeMutation with Transform -> BundledDocuments
@firebase/firestore:     âœ” handles PatchMutation with Transform -> BundledDocuments
@firebase/firestore:     âœ” handles saving and checking bundle metadata
@firebase/firestore:     âœ” add then update while offline
@firebase/firestore:     âœ” handles saving and loading named queries
@firebase/firestore:     âœ” loading named queries allocates targets and updates target document mapping
@firebase/firestore:     âœ” handles saving and loading limit to last queries
@firebase/firestore:     âœ” computes highest unacknowledged batch id correctly
@firebase/firestore:     âœ” only persists updates for documents when version changes
@firebase/firestore:     âœ” can handle batch Ack when pending batches have other docs
@firebase/firestore:     âœ” can handle multiple field patches on remote docs
@firebase/firestore:     âœ” can handle multiple field patches in one batch on remote docs
@firebase/firestore:     âœ” can handle multiple field patches on local docs
@firebase/firestore:     âœ” update on remote doc leads to update overlay
@firebase/firestore:     âœ” handles document creation time
@firebase/firestore:     âœ” saves updateTime as createTime when receives ack for creating a new doc
@firebase/firestore:     âœ” handles createTime for Set -> Ack -> RemoteEvent
@firebase/firestore:     âœ” handles createTime for Set -> RemoteEvent -> Ack
@firebase/firestore:     âœ” saves updateTime as createTime when recreating a deleted doc
@firebase/firestore:     âœ” document createTime is preserved through Set -> Ack -> Patch -> Ack
@firebase/firestore:     âœ” document createTime is preserved through Doc Added -> Patch -> Ack
@firebase/firestore:     âœ” deeply nested server timestamps do not cause stack overflow (87ms)
@firebase/firestore:     âœ” uses target mapping to execute queries
@firebase/firestore:     âœ” last limbo free snapshot is advanced during view processing
@firebase/firestore:     - ignores target mapping after existence filter mismatch
@firebase/firestore:     - queries include locally modified documents
@firebase/firestore:     - queries include documents from other queries
@firebase/firestore:     - queries filter documents that no longer match
@firebase/firestore:   LocalStore w/ IndexedDB Persistence
@firebase/firestore:     âœ” localStoreSetIndexAutoCreationEnabled()
@firebase/firestore:     âœ” handles SetMutation
@firebase/firestore:     âœ” handles SetMutation -> Document
@firebase/firestore:     âœ” handles SetMutation -> Ack (Held) -> SetMutation -> Reject -> RemoteEvent (Release Ack)
@firebase/firestore:     âœ” handles NoDocument -> SetMutation -> Ack
@firebase/firestore:     âœ” handles SetMutation -> NoDocument
@firebase/firestore:     âœ” handles Document -> SetMutation -> Ack ->  Document
@firebase/firestore:     âœ” handles PatchMutation without prior document
@firebase/firestore:     âœ” handles PatchMutation -> Document -> Ack
@firebase/firestore:     âœ” handles PatchMutation -> Ack -> Document
@firebase/firestore:     âœ” handles DeleteMutation -> Ack
@firebase/firestore:     âœ” handles Document -> DeleteMutation -> Ack
@firebase/firestore:     âœ” handles DeleteMutation -> Document -> Ack
@firebase/firestore:     âœ” handles Document -> NoDocument -> Document
@firebase/firestore:     âœ” handles SetMutation -> PatchMutation -> Document -> Ack -> Ack
@firebase/firestore:     âœ” handles SetMutation + PatchMutation
@firebase/firestore:     - handles SetMutation -> Ack -> PatchMutation -> Reject
@firebase/firestore:     âœ” handles SetMutation(A) + SetMutation(B) + PatchMutation(A)
@firebase/firestore:     âœ” handles DeleteMutation -> PatchMutation -> Ack -> Ack
@firebase/firestore:     - collects garbage after ChangeBatch with no target ids
@firebase/firestore:     - collects garbage after ChangeBatch
@firebase/firestore:     - collects garbage after acknowledged mutation
@firebase/firestore:     - collects garbage after rejected mutation
@firebase/firestore:     - pins documents in the local view
@firebase/firestore:     - throws away documents with unknown target-ids immediately
@firebase/firestore:     âœ” can execute document queries
@firebase/firestore:     âœ” can execute collection queries
@firebase/firestore:     âœ” can execute mixed collection queries
@firebase/firestore:     âœ” reads all documents for initial collection queries
@firebase/firestore:     âœ” persists resume tokens
@firebase/firestore:     âœ” does not replace resume token with empty resume token
@firebase/firestore:     âœ” handles SetMutation -> Transform -> Transform
@firebase/firestore:     âœ” handles SetMutation -> Ack -> Transform -> Ack -> Transform
@firebase/firestore:     âœ” handles SetMutation -> Transform-> RemoteEvent -> Transform (43ms)
@firebase/firestore:     âœ” holds back transforms
@firebase/firestore:     âœ” handles MergeMutation with Transform -> RemoteEvent
@firebase/firestore:     âœ” handles PatchMutation with Transform -> RemoteEvent
@firebase/firestore:     âœ” handles saving bundled documents
@firebase/firestore:     âœ” handles saving bundled documents with newer existing version
@firebase/firestore:     âœ” handles saving bundled documents with older existing version
@firebase/firestore:     âœ” handles saving bundled documents with same existing version should not overwrite
@firebase/firestore:     âœ” handles MergeMutation with Transform -> BundledDocuments
@firebase/firestore:     âœ” handles PatchMutation with Transform -> BundledDocuments
@firebase/firestore:     âœ” handles saving and checking bundle metadata
@firebase/firestore:     âœ” add then update while offline
@firebase/firestore:     âœ” handles saving and loading named queries
@firebase/firestore:     âœ” loading named queries allocates targets and updates target document mapping
@firebase/firestore:     âœ” handles saving and loading limit to last queries
@firebase/firestore:     âœ” computes highest unacknowledged batch id correctly
@firebase/firestore:     âœ” only persists updates for documents when version changes
@firebase/firestore:     âœ” can handle batch Ack when pending batches have other docs
@firebase/firestore:     âœ” can handle multiple field patches on remote docs
@firebase/firestore:     âœ” can handle multiple field patches in one batch on remote docs
@firebase/firestore:     âœ” can handle multiple field patches on local docs
@firebase/firestore:     âœ” update on remote doc leads to update overlay
@firebase/firestore:     âœ” handles document creation time
@firebase/firestore:     âœ” saves updateTime as createTime when receives ack for creating a new doc
@firebase/firestore:     âœ” handles createTime for Set -> Ack -> RemoteEvent
@firebase/firestore:     âœ” handles createTime for Set -> RemoteEvent -> Ack
@firebase/firestore:     âœ” saves updateTime as createTime when recreating a deleted doc
@firebase/firestore:     âœ” document createTime is preserved through Set -> Ack -> Patch -> Ack
@firebase/firestore:     âœ” document createTime is preserved through Doc Added -> Patch -> Ack
@firebase/firestore:     âœ” deeply nested server timestamps do not cause stack overflow (395ms)
@firebase/firestore:     âœ” uses target mapping to execute queries (38ms)
@firebase/firestore:     âœ” last limbo free snapshot is advanced during view processing
@firebase/firestore:     âœ” ignores target mapping after existence filter mismatch
@firebase/firestore:     âœ” queries include locally modified documents
@firebase/firestore:     âœ” queries include documents from other queries
@firebase/firestore:     âœ” queries filter documents that no longer match
@firebase/firestore:   IndexedDbLruDelegate
@firebase/firestore:     âœ” picks sequence number percentile (319ms)
@firebase/firestore:     âœ” removes targets up through sequence number (285ms)
@firebase/firestore:     âœ” removes orphaned documents
@firebase/firestore:     âœ” removes targets then GCs (57ms)
@firebase/firestore:     âœ” gets cache size (47ms)
@firebase/firestore:     âœ” can be disabled (54ms)
@firebase/firestore:     âœ” skips a cache that is too small (45ms)
@firebase/firestore:     âœ” runs when the cache is large enough (175ms)
@firebase/firestore:     âœ” caps sequence numbers to collect (221ms)
@firebase/firestore:     nthSequenceNumber()
@firebase/firestore:       âœ” sequence number for no targets
@firebase/firestore:       âœ” with 50 targets (113ms)
@firebase/firestore:       âœ” with multiple targets in a transaction (97ms)
@firebase/firestore:       âœ” with all collected targets in a single transaction (87ms)
@firebase/firestore:       âœ” with mutation and sequential targets (113ms)
@firebase/firestore:       âœ” with mutations in targets (114ms)
@firebase/firestore:   MemoryLruDelegate
@firebase/firestore:     âœ” picks sequence number percentile
@firebase/firestore:     âœ” removes targets up through sequence number
@firebase/firestore:     âœ” removes orphaned documents
@firebase/firestore:     âœ” removes targets then GCs
@firebase/firestore:     âœ” gets cache size
@firebase/firestore:     âœ” can be disabled
@firebase/firestore:     âœ” skips a cache that is too small
@firebase/firestore:     âœ” runs when the cache is large enough
@firebase/firestore:     âœ” caps sequence numbers to collect
@firebase/firestore:     nthSequenceNumber()
@firebase/firestore:       âœ” sequence number for no targets
@firebase/firestore:       âœ” with 50 targets
@firebase/firestore:       âœ” with multiple targets in a transaction
@firebase/firestore:       âœ” with all collected targets in a single transaction
@firebase/firestore:       âœ” with mutation and sequential targets
@firebase/firestore:       âœ” with mutations in targets
@firebase/firestore:   MemoryMutationQueue
@firebase/firestore:     âœ” can count batches
@firebase/firestore:     âœ” can lookup mutation batch
@firebase/firestore:     âœ” can getNextMutationBatchAfterBatchId()
@firebase/firestore:     âœ” can getAllMutationBatchesAffectingDocumentKey()
@firebase/firestore:     âœ” can getAllMutationBatchesAffectingDocumentKeys()
@firebase/firestore:     âœ” can getAllMutationBatchesAffectingQuery()
@firebase/firestore:     âœ” can getAllMutationBatchesAffectingQuery() with compound batches
@firebase/firestore:     âœ” can removeMutationBatch()
@firebase/firestore:   IndexedDbMutationQueue
@firebase/firestore:     âœ” can count batches
@firebase/firestore:     âœ” can lookup mutation batch (47ms)
@firebase/firestore:     âœ” can getNextMutationBatchAfterBatchId() (47ms)
@firebase/firestore:     âœ” can getAllMutationBatchesAffectingDocumentKey()
@firebase/firestore:     âœ” can getAllMutationBatchesAffectingDocumentKeys()
@firebase/firestore:     âœ” can getAllMutationBatchesAffectingQuery()
@firebase/firestore:     âœ” can getAllMutationBatchesAffectingQuery() with compound batches
@firebase/firestore:     âœ” can removeMutationBatch() (68ms)
@firebase/firestore:   PersistencePromise
@firebase/firestore:     âœ” Can chain synchronous functions
@firebase/firestore:     âœ” Can chain asynchronous functions
@firebase/firestore:     âœ” Can catch synchronous functions
@firebase/firestore:     âœ” Can catch asynchronous functions
@firebase/firestore:     âœ” ignores catches without errors
@firebase/firestore:     âœ” ignores catches without errors async
@firebase/firestore:     âœ” can catch errors twice sync
@firebase/firestore:     âœ” can catch errors twice async
@firebase/firestore:     âœ” can return undefined sync
@firebase/firestore:     âœ” can return undefined async
@firebase/firestore:     âœ” can waitFor sync
@firebase/firestore:     âœ” can waitFor async
@firebase/firestore:     âœ” can waitFor async error
@firebase/firestore:     âœ” propagates error for waitFor()
@firebase/firestore:     âœ” propagates error for forEach()
@firebase/firestore:   MemoryTransaction
@firebase/firestore:     âœ” invokes onCommittedListener when transaction succeeds
@firebase/firestore:     âœ” does not invoke onCommittedListener when transaction fails
@firebase/firestore:   IndexedDbTransaction
@firebase/firestore:     âœ” invokes onCommittedListener when transaction succeeds
@firebase/firestore:     âœ” does not invoke onCommittedListener when transaction fails
@firebase/firestore:     âœ” only invokes onCommittedListener once with retries
@firebase/firestore:   QueryEngine
@firebase/firestore:     MemoryEagerPersistence
@firebase/firestore:       âœ” uses target mapping for initial view
@firebase/firestore:       âœ” filters non-matching changes since initial results
@firebase/firestore:       âœ” includes changes since initial results
@firebase/firestore:       âœ” does not use initial results without limbo free snapshot version
@firebase/firestore:       âœ” does not use initial results for unfiltered collection query
@firebase/firestore:       âœ” does not use initial results for limit query with document removal
@firebase/firestore:       âœ” does not use initial results for limitToLast query with document removal
@firebase/firestore:       âœ” does not use initial results for limit query when last document has pending write
@firebase/firestore:       âœ” does not use initial results for limitToLast query when first document has pending write
@firebase/firestore:       âœ” does not use initial results for limit query when last document has been updated out of band
@firebase/firestore:       âœ” does not use initial results for limitToLast query when first document in limit has been updated out of band
@firebase/firestore:       âœ” uses initial results if last document in limit is unchanged
@firebase/firestore:       âœ” does not include documents deleted by mutation
@firebase/firestore:       âœ” can perform OR queries using full collection scan
@firebase/firestore:       âœ” query does not include documents with missing fields
@firebase/firestore:       âœ” query with multiple ins on the same field
@firebase/firestore:       âœ” query with ins and not-ins on the same field
@firebase/firestore:       âœ” query with multiple ins on different fields
@firebase/firestore:       âœ” query in with array-contains-any
@firebase/firestore:       âœ” query in with array-contains
@firebase/firestore:       âœ” order by equality
@firebase/firestore:       âœ” or query with in and not-in
@firebase/firestore:       âœ” query with array membership
@firebase/firestore:     IndexedDbPersistence configureCsi=false
@firebase/firestore:       âœ” uses target mapping for initial view
@firebase/firestore:       âœ” filters non-matching changes since initial results
@firebase/firestore:       âœ” includes changes since initial results
@firebase/firestore:       âœ” does not use initial results without limbo free snapshot version
@firebase/firestore:       âœ” does not use initial results for unfiltered collection query
@firebase/firestore:       âœ” does not use initial results for limit query with document removal
@firebase/firestore:       âœ” does not use initial results for limitToLast query with document removal
@firebase/firestore:       âœ” does not use initial results for limit query when last document has pending write
@firebase/firestore:       âœ” does not use initial results for limitToLast query when first document has pending write
@firebase/firestore:       âœ” does not use initial results for limit query when last document has been updated out of band
@firebase/firestore:       âœ” does not use initial results for limitToLast query when first document in limit has been updated out of band
@firebase/firestore:       âœ” uses initial results if last document in limit is unchanged
@firebase/firestore:       âœ” does not include documents deleted by mutation
@firebase/firestore:       âœ” can perform OR queries using full collection scan
@firebase/firestore:       âœ” query does not include documents with missing fields
@firebase/firestore:       âœ” query with multiple ins on the same field
@firebase/firestore:       âœ” query with ins and not-ins on the same field
@firebase/firestore:       âœ” query with multiple ins on different fields
@firebase/firestore:       âœ” query in with array-contains-any
@firebase/firestore:       âœ” query in with array-contains
@firebase/firestore:       âœ” order by equality
@firebase/firestore:       âœ” or query with in and not-in
@firebase/firestore:       âœ” query with array membership
@firebase/firestore:     IndexedDbQueryEngine configureCsi=true
@firebase/firestore:       âœ” combines indexed with non-indexed results
@firebase/firestore:       âœ” uses partial index for limit queries
@firebase/firestore:       âœ” re-fills indexed limit queries
@firebase/firestore:       âœ” creates indexes when indexAutoCreationEnabled=true
@firebase/firestore:       âœ” does not create indexes when indexAutoCreationEnabled=false
@firebase/firestore:       âœ” creates indexes when min collection size is met exactly and relative cost is ever-so-slightly better
@firebase/firestore:       âœ” does not create indexes when min collection size is not met by only 1 document
@firebase/firestore:       âœ” does not create indexes when relative cost is equal
@firebase/firestore:       âœ” query with multiple ins on the same field (72ms)
@firebase/firestore:       âœ” query with ins and not-ins on the same field (69ms)
@firebase/firestore:       âœ” query with multiple ins on different fields (60ms)
@firebase/firestore:       âœ” query in with array-contains-any (49ms)
@firebase/firestore:       âœ” query in with array-contains (48ms)
@firebase/firestore:       âœ” order by equality
@firebase/firestore:       âœ” or query with in and not-in (39ms)
@firebase/firestore:       âœ” query with array membership
@firebase/firestore:   ReferenceSet
@firebase/firestore:     âœ” can add/remove references
@firebase/firestore:     âœ” can remove all references for a target ID
@firebase/firestore:   MemoryRemoteDocumentCache
@firebase/firestore:     âœ” returns an invalid document for documents not in cache
@firebase/firestore:     âœ” can set and read a document
@firebase/firestore:     âœ” can set and read a document at a long path
@firebase/firestore:     âœ” can set and read a NoDocument
@firebase/firestore:     âœ” can set document to new value
@firebase/firestore:     âœ” can set and read several documents
@firebase/firestore:     âœ” can set and read several documents with overlapping keys
@firebase/firestore:     âœ” can set and read several documents with deeply nested keys
@firebase/firestore:     âœ” can set and read several documents including missing document
@firebase/firestore:     âœ” can remove document
@firebase/firestore:     âœ” can remove nonexistent document
@firebase/firestore:     âœ” can get all documents from collection
@firebase/firestore:     âœ” getAll() excludes subcollection
@firebase/firestore:     âœ” can get all documents since read time
@firebase/firestore:     âœ” getDocumentsMatchingQuery() applies query check
@firebase/firestore:     âœ” getDocumentsMatchingQuery() respects mutated documents
@firebase/firestore:     âœ” getAll() uses read time rather than update time
@firebase/firestore:     âœ” does not apply document modifications to cache
@firebase/firestore:     âœ” doesn't keep track of size
@firebase/firestore:   LRU MemoryRemoteDocumentCache
@firebase/firestore:     âœ” returns an invalid document for documents not in cache
@firebase/firestore:     âœ” can set and read a document
@firebase/firestore:     âœ” can set and read a document at a long path
@firebase/firestore:     âœ” can set and read a NoDocument
@firebase/firestore:     âœ” can set document to new value
@firebase/firestore:     âœ” can set and read several documents
@firebase/firestore:     âœ” can set and read several documents with overlapping keys
@firebase/firestore:     âœ” can set and read several documents with deeply nested keys
@firebase/firestore:     âœ” can set and read several documents including missing document
@firebase/firestore:     âœ” can remove document
@firebase/firestore:     âœ” can remove nonexistent document
@firebase/firestore:     âœ” can get all documents from collection
@firebase/firestore:     âœ” getAll() excludes subcollection
@firebase/firestore:     âœ” can get all documents since read time
@firebase/firestore:     âœ” getDocumentsMatchingQuery() applies query check
@firebase/firestore:     âœ” getDocumentsMatchingQuery() respects mutated documents
@firebase/firestore:     âœ” getAll() uses read time rather than update time
@firebase/firestore:     âœ” does not apply document modifications to cache
@firebase/firestore:     âœ” keeps track of size
@firebase/firestore:   IndexedDbRemoteDocumentCache
@firebase/firestore:     âœ” can get next documents from collection group
@firebase/firestore:     âœ” can get next documents from collection group with limit
@firebase/firestore:     âœ” can get next documents from collection group with read time offset
@firebase/firestore:     âœ” can get next documents from collection group with document key offset
@firebase/firestore:     âœ” can get next documents from non-existing collection group
@firebase/firestore:     âœ” can get next documents from collection group
@firebase/firestore:     âœ” can get next documents from collection group with limit
@firebase/firestore:     âœ” can get next documents from collection group with read time offset
@firebase/firestore:     âœ” can get next documents from collection group with document key offset
@firebase/firestore:     âœ” can get next documents from non-existing collection group
@firebase/firestore:     âœ” returns an invalid document for documents not in cache
@firebase/firestore:     âœ” can set and read a document
@firebase/firestore:     âœ” can set and read a document at a long path
@firebase/firestore:     âœ” can set and read a NoDocument
@firebase/firestore:     âœ” can set document to new value
@firebase/firestore:     âœ” can set and read several documents
@firebase/firestore:     âœ” can set and read several documents with overlapping keys
@firebase/firestore:     âœ” can set and read several documents with deeply nested keys
@firebase/firestore:     âœ” can set and read several documents including missing document
@firebase/firestore:     âœ” can remove document
@firebase/firestore:     âœ” can remove nonexistent document
@firebase/firestore:     âœ” can get all documents from collection
@firebase/firestore:     âœ” getAll() excludes subcollection
@firebase/firestore:     âœ” can get all documents since read time
@firebase/firestore:     âœ” getDocumentsMatchingQuery() applies query check
@firebase/firestore:     âœ” getDocumentsMatchingQuery() respects mutated documents
@firebase/firestore:     âœ” getAll() uses read time rather than update time
@firebase/firestore:     âœ” does not apply document modifications to cache
@firebase/firestore:     âœ” keeps track of size
@firebase/firestore:   RemoteDocumentChangeBuffer
@firebase/firestore:     âœ” can read unchanged entry
@firebase/firestore:     âœ” can add entry and read it back
@firebase/firestore:     âœ” can remove entry
@firebase/firestore:     âœ” can apply changes
@firebase/firestore:     âœ” can apply changes with removal
@firebase/firestore:     âœ” methods fail after apply.
@firebase/firestore:   SimpleDb
@firebase/firestore:     âœ” regex test
@firebase/firestore:     âœ” can get
@firebase/firestore:     âœ” can put
@firebase/firestore:     âœ” lets you explicitly abort transactions
@firebase/firestore:     âœ” aborts transactions when an error happens
@firebase/firestore:     âœ” aborts transactions when persistence promise is rejected
@firebase/firestore:     âœ” exposes error from inside a transaction
@firebase/firestore:     âœ” can delete
@firebase/firestore:     âœ” loadAll
@firebase/firestore:     âœ” loadFirst
@firebase/firestore:     âœ” deleteAll
@firebase/firestore:     âœ” deleteAll in key range
@firebase/firestore:     âœ” deleteAll in index range
@firebase/firestore:     âœ” can iterate
@firebase/firestore:     âœ” can iterate and skip keys
@firebase/firestore:     âœ” stops iteration after rejected promise
@firebase/firestore:     âœ” can iterate in reverse
@firebase/firestore:     - can iterate and skip keys in reverse
@firebase/firestore:     âœ” can iterate and skip over the index
@firebase/firestore:     âœ” can iterate using index and range and stop before end
@firebase/firestore:     âœ” can iterate over index as keys-only
@firebase/firestore:     âœ” can iterate over index using a partial bound
@firebase/firestore:     âœ” can use arrays as keys and do partial bounds ranges
@firebase/firestore:     - correctly sorts keys with nested arrays
@firebase/firestore:     âœ” retries transactions
@firebase/firestore:     âœ” retries transactions only three times
@firebase/firestore:     âœ” does not retry explicitly aborted transactions
@firebase/firestore:     - Perf
@firebase/firestore:   MemoryTargetCache
@firebase/firestore:     âœ” returns null for target not in cache
@firebase/firestore:     âœ” can set and read a target
@firebase/firestore:     âœ” handles canonical ID collisions
@firebase/firestore:     âœ” can set target to new value
@firebase/firestore:     âœ” can remove a target
@firebase/firestore:     âœ” can remove matching keys when a target is removed
@firebase/firestore:     âœ” adds or removes matching keys
@firebase/firestore:     âœ” can remove matching keys for a targetId
@firebase/firestore:     âœ” can get matching keys for targetId
@firebase/firestore:     âœ” can allocate target ID
@firebase/firestore:     âœ” can get / set targets metadata
@firebase/firestore:     âœ” sets the highest sequence number
@firebase/firestore:   IndexedDbTargetCache
@firebase/firestore:     âœ” returns null for target not in cache
@firebase/firestore:     âœ” can set and read a target
@firebase/firestore:     âœ” handles canonical ID collisions
@firebase/firestore:     âœ” can set target to new value
@firebase/firestore:     âœ” can remove a target
@firebase/firestore:     âœ” can remove matching keys when a target is removed
@firebase/firestore:     âœ” adds or removes matching keys
@firebase/firestore:     âœ” can remove matching keys for a targetId
@firebase/firestore:     âœ” can get matching keys for targetId
@firebase/firestore:     âœ” can allocate target ID
@firebase/firestore:     âœ” can get / set targets metadata
@firebase/firestore:     âœ” sets the highest sequence number
@firebase/firestore:     âœ” persists metadata across restarts
@firebase/firestore:   WebStorageSharedClientState
@firebase/firestore:     persists mutation batches
@firebase/firestore:       âœ” with a pending batch
@firebase/firestore:       âœ” with an acknowledged batch
@firebase/firestore:       âœ” with a rejected batch
@firebase/firestore:     persists query targets
@firebase/firestore:       âœ” when empty
@firebase/firestore:       âœ” with multiple targets
@firebase/firestore:       âœ” with a not-current target
@firebase/firestore:       âœ” with a current target
@firebase/firestore:       âœ” with an errored target
@firebase/firestore:       âœ” garbage collects entry
@firebase/firestore:     combines client state
@firebase/firestore:       âœ” with targets from existing client
@firebase/firestore:       âœ” with targets from new client
@firebase/firestore:       âœ” with online state from new client
@firebase/firestore:       âœ” ignores online state from inactive client
@firebase/firestore:       âœ” ignores invalid data
@firebase/firestore:     processes mutation updates
@firebase/firestore:       âœ” for pending mutation
@firebase/firestore:       âœ” for acknowledged mutation
@firebase/firestore:       âœ” for rejected mutation
@firebase/firestore:       âœ” handles unauthenticated user
@firebase/firestore:       âœ” ignores different user
@firebase/firestore:       âœ” ignores invalid data
@firebase/firestore:     processes target updates
@firebase/firestore:       âœ” for added target
@firebase/firestore:       âœ” for removed target
@firebase/firestore:       âœ” for not-current target
@firebase/firestore:       âœ” for current target
@firebase/firestore:       âœ” for errored target
@firebase/firestore:       âœ” ignores invalid data
@firebase/firestore:     syncs sequence numbers
@firebase/firestore:       âœ” writes out new sequence numbers
@firebase/firestore:       âœ” notifies on new sequence numbers
@firebase/firestore:     processes bundles
@firebase/firestore:       âœ” writes out collection groups
@firebase/firestore:       âœ” supports empty collection groups
@firebase/firestore:   DocumentSet
@firebase/firestore:     âœ” keeps documents in the right order
@firebase/firestore:     âœ” adds and deletes elements
@firebase/firestore:     âœ” updates documents
@firebase/firestore:     âœ” adds docs equal to comparator with different keys
@firebase/firestore:     âœ” equals to other document set with the same elements and order
@firebase/firestore:   Document
@firebase/firestore:     âœ” can be constructed
@firebase/firestore:     âœ” returns fields correctly
@firebase/firestore:     âœ” equals to other same documents
@firebase/firestore:   field index
@firebase/firestore:     âœ” comparator includes collection group
@firebase/firestore:     âœ” comparator ignores index id
@firebase/firestore:     âœ” comparator ignores index offset
@firebase/firestore:     âœ” comparator includes field name
@firebase/firestore:     âœ” comparator includes segment kind
@firebase/firestore:     âœ” comparator includes segment length
@firebase/firestore:   index offset
@firebase/firestore:     âœ” supports comparison
@firebase/firestore:     âœ” advances seconds
@firebase/firestore:   Mutation
@firebase/firestore:     âœ” can apply sets to documents
@firebase/firestore:     âœ” can apply patches to documents
@firebase/firestore:     âœ” can apply patches with merges to missing documents
@firebase/firestore:     âœ” can apply patches with merges to null documents
@firebase/firestore:     âœ” will delete values from the field-mask
@firebase/firestore:     âœ” will patch a primitive value
@firebase/firestore:     âœ” patching a NoDocument yields a NoDocument
@firebase/firestore:     âœ” can apply local serverTimestamp transforms to documents
@firebase/firestore:     âœ” can create arrayUnion() transform.
@firebase/firestore:     âœ” can create arrayRemove() transform.
@firebase/firestore:     âœ” can apply local arrayUnion transform to missing field
@firebase/firestore:     âœ” can apply local arrayUnion transform to non-array field
@firebase/firestore:     âœ” can apply local arrayUnion transform with non-existing elements
@firebase/firestore:     âœ” can apply local arrayUnion transform with existing elements
@firebase/firestore:     âœ” can apply local arrayUnion transform with duplicate existing elements
@firebase/firestore:     âœ” can apply local arrayUnion transform with duplicate union elements
@firebase/firestore:     âœ” can apply local arrayUnion transform with non-primitive elements
@firebase/firestore:     âœ” can apply local arrayUnion transform with partially-overlapping elements
@firebase/firestore:     âœ” can apply local arrayRemove transform to missing field
@firebase/firestore:     âœ” can apply local arrayRemove transform to non-array field
@firebase/firestore:     âœ” can apply local arrayRemove transform with non-existing elements
@firebase/firestore:     âœ” can apply local arrayRemove transform with existing elements
@firebase/firestore:     âœ” can apply local arrayRemove transform with non-primitive elements
@firebase/firestore:     âœ” can apply server-acked serverTimestamp transform to documents
@firebase/firestore:     âœ” can apply server-acked array transforms to document
@firebase/firestore:     âœ” can apply numeric add transform to document
@firebase/firestore:     âœ” can apply numeric add transform to unexpected type
@firebase/firestore:     âœ” can apply numeric add transform to missing field
@firebase/firestore:     âœ” can apply numeric add transforms consecutively
@firebase/firestore:     âœ” can apply server-acked numeric add transform to document
@firebase/firestore:     âœ” can apply deletes to documents
@firebase/firestore:     âœ” can apply sets with mutation results
@firebase/firestore:     âœ” will apply patches with mutation results
@firebase/firestore:     âœ” transitions versions correctly
@firebase/firestore:     âœ” extracts null base value for non-transform mutation
@firebase/firestore:     âœ” extracts null base value for ServerTimestamp
@firebase/firestore:     âœ” extracts base value for increment
@firebase/firestore:     âœ” increment twice
@firebase/firestore:     âœ” overlay with no mutation
@firebase/firestore:     âœ” overlay with mutations fail by preconditions
@firebase/firestore:     âœ” overlay with patch on invalid document
@firebase/firestore:     âœ” overlay with one set mutation
@firebase/firestore:     âœ” overlay with one patch mutation
@firebase/firestore:     âœ” overlay with patch then merge
@firebase/firestore:     âœ” overlay with delete then patch
@firebase/firestore:     âœ” overlay with delete then merge
@firebase/firestore:     âœ” overlay with patch then patch to delete field
@firebase/firestore:     âœ” overlay with patch then merge with array union
@firebase/firestore:     âœ” overlay with array union then remove
@firebase/firestore:     âœ” overlay with set then increment
@firebase/firestore:     âœ” overlay with set then patch on deleted doc
@firebase/firestore:     âœ” overlay with field deletion of nested field
@firebase/firestore:     âœ” overlay created from empty set with merge
@firebase/firestore:     âœ” overlay with mutation with multiple deletes
@firebase/firestore:     âœ” overlay by combinations and permutations (1071ms)
@firebase/firestore:     âœ” overlay by combinations and permutations for array transforms (141ms)
@firebase/firestore:     âœ” overlay by combinations and permutations for increments (120ms)
@firebase/firestore:   MutableObjectValue
@firebase/firestore:     âœ” supports empty objectValues
@firebase/firestore:     âœ” sets single field
@firebase/firestore:     âœ” sets empty object
@firebase/firestore:     âœ” sets multiple fields
@firebase/firestore:     âœ” sets nested fields
@firebase/firestore:     âœ” sets two fields in nested object
@firebase/firestore:     âœ” sets field in nested object
@firebase/firestore:     âœ” sets deeply nested field in nested object
@firebase/firestore:     âœ” sets nested field multiple times
@firebase/firestore:     âœ” sets and deletes field
@firebase/firestore:     âœ” sets and deletes nested field
@firebase/firestore:     âœ” sets single field in existing object
@firebase/firestore:     âœ” overwrites field
@firebase/firestore:     âœ” overwrites nested field
@firebase/firestore:     âœ” overwrites deeply nested field
@firebase/firestore:     âœ” merges existing object
@firebase/firestore:     âœ” overwrites nested object
@firebase/firestore:     âœ” replaces nested object
@firebase/firestore:     âœ” deletes single field
@firebase/firestore:     âœ” deletes nested object
@firebase/firestore:     âœ” deletes non-existing field
@firebase/firestore:     âœ” deletes non-existing nested field
@firebase/firestore:   ObjectValue
@firebase/firestore:     âœ” can extract fields
@firebase/firestore:     âœ” can overwrite existing fields
@firebase/firestore:     âœ” can add new fields
@firebase/firestore:     âœ” can add multiple new fields
@firebase/firestore:     âœ” can implicitly create objects
@firebase/firestore:     âœ” can overwrite primitive values to create objects
@firebase/firestore:     âœ” can add to nested objects
@firebase/firestore:     âœ” can delete keys
@firebase/firestore:     âœ” can delete nested keys
@firebase/firestore:     âœ” can delete added keys
@firebase/firestore:     âœ” can delete, resulting in empty object
@firebase/firestore:     âœ” will not delete nested keys on primitive values
@firebase/firestore:     âœ” can delete multiple fields
@firebase/firestore:     âœ” provides field mask
@firebase/firestore:   Path
@firebase/firestore:     âœ” can be constructed
@firebase/firestore:     âœ” can index into itself
@firebase/firestore:     âœ” can be constructed with offsets
@firebase/firestore:     âœ” can pop front repeatedly
@firebase/firestore:     âœ” can yield the last segment
@firebase/firestore:     âœ” can create child path
@firebase/firestore:     âœ” can pop last repeatedly
@firebase/firestore:     âœ” compares correctly
@firebase/firestore:     âœ” determines prefix correctly
@firebase/firestore:     âœ” escapes FieldPath with segments
@firebase/firestore:     âœ” can be constructed from field path.
@firebase/firestore:     fails to construct from invalid field path
@firebase/firestore:       âœ” ""
@firebase/firestore:       âœ” "foo\"
@firebase/firestore:       âœ” "foo\x"
@firebase/firestore:       âœ” "foo."
@firebase/firestore:       âœ” ".foo"
@firebase/firestore:       âœ” "foo..bar"
@firebase/firestore:   Target Bounds
@firebase/firestore:     âœ” can use merge join
@firebase/firestore:     âœ” can use partial index
@firebase/firestore:     âœ” cannot use overspecified index
@firebase/firestore:     âœ” equalities with default order
@firebase/firestore:     âœ” equalities with ascending order
@firebase/firestore:     âœ” equalities with descending order
@firebase/firestore:     âœ” inequalities with default order
@firebase/firestore:     âœ” inequalities with ascending order
@firebase/firestore:     âœ” inequalities with descending order
@firebase/firestore:     âœ” inequality uses single field index
@firebase/firestore:     âœ” is query uses merge join
@firebase/firestore:     âœ” validates collection
@firebase/firestore:     âœ” with array-contains
@firebase/firestore:     âœ” array-contains is independent
@firebase/firestore:     âœ” with array-contains and order by
@firebase/firestore:     âœ” with equality and descending order
@firebase/firestore:     âœ” with multiple equalities
@firebase/firestore:     âœ” with multiple equalities and inequality
@firebase/firestore:     âœ” with orderBy
@firebase/firestore:     âœ” with not equals
@firebase/firestore:     âœ” with multiple filters
@firebase/firestore:     âœ” multiple filters require matching prefix
@firebase/firestore:     âœ” with multiple filters and orderBy
@firebase/firestore:     âœ” with multiple inequalities
@firebase/firestore:     âœ” with multiple notIns
@firebase/firestore:     âœ” with multiple orderBys
@firebase/firestore:     âœ” with in and notIn
@firebase/firestore:     âœ” with equality and different order by
@firebase/firestore:     âœ” with equals and not in
@firebase/firestore:     âœ” with in and orderBy
@firebase/firestore:     âœ” with in and orderBy on same field
@firebase/firestore:     âœ” with equality and inequality on the same field
@firebase/firestore:     buildTargetIndex()
@firebase/firestore:       âœ” queries with equalities
@firebase/firestore:       âœ” queries with inequalities
@firebase/firestore:       âœ” queries with array contains
@firebase/firestore:       âœ” queries with order bys
@firebase/firestore:       âœ” queries with inequalities uses single field index
@firebase/firestore:       âœ” query of a collection
@firebase/firestore:       âœ” query with array contains and order by
@firebase/firestore:       âœ” query with equality and descending order
@firebase/firestore:       âœ” query with multiple equalities
@firebase/firestore:       âœ” query with in and not in filters
@firebase/firestore:       âœ” query with equals and not-in filters
@firebase/firestore:       query with multiple equalities and inequality
@firebase/firestore:         âœ” inequality last
@firebase/firestore:         âœ” inequality in middle
@firebase/firestore:       query with multiple filters
@firebase/firestore:         âœ” == and > on different fields
@firebase/firestore:         âœ” >=, ==, and <= filters on the same field
@firebase/firestore:         âœ” not-in and >= on the same field
@firebase/firestore:       query with multiple order-bys
@firebase/firestore:         âœ” order by fff, bar desc, __name__
@firebase/firestore:         âœ” order by foo, bar, __name__ desc
@firebase/firestore:       query with equality and different order-by
@firebase/firestore:         âœ” filter on foo and bar, order by qux
@firebase/firestore:         âœ” filter on aaa, qqq, ccc, order by fff, bbb
@firebase/firestore:       query with in and order-by
@firebase/firestore:         âœ” on different fields
@firebase/firestore:         âœ” on the same field
@firebase/firestore:       query with multiple inequality
@firebase/firestore:         âœ” returns null
@firebase/firestore:   Target Bounds
@firebase/firestore:     âœ” empty query
@firebase/firestore:     âœ” equals query with ascending index
@firebase/firestore:     âœ” equals query with descending index
@firebase/firestore:     âœ” less than query with ascending index
@firebase/firestore:     âœ” less than query with descending index
@firebase/firestore:     âœ” less than or equals query with ascending index
@firebase/firestore:     âœ” less than or equals query with descending index
@firebase/firestore:     âœ” greater than query with ascending index
@firebase/firestore:     âœ” greater than query with descending index
@firebase/firestore:     âœ” greater than or equals query with ascending index
@firebase/firestore:     âœ” greater than or equals query with descending index
@firebase/firestore:     âœ” arrayContains query
@firebase/firestore:     âœ” arrayContainsAny query
@firebase/firestore:     âœ” orderBy query
@firebase/firestore:     âœ” orderBy query with filter
@firebase/firestore:     âœ” startAt query
@firebase/firestore:     âœ” startAt query with filter
@firebase/firestore:     âœ” startAfter query with filter
@firebase/firestore:     âœ” startAfter does not change bound if not applicable
@firebase/firestore:     âœ” endAt query
@firebase/firestore:     âœ” endAt query with filter
@firebase/firestore:     âœ” endBefore query with filter
@firebase/firestore:     âœ” endBefore does not change bound if not applicable
@firebase/firestore:     âœ” partial index match with bound
@firebase/firestore:   Values
@firebase/firestore:     âœ” compares values for equality
@firebase/firestore:     âœ” normalizes values for equality
@firebase/firestore:     âœ” orders types correctly (40ms)
@firebase/firestore:     âœ” normalizes values for comparison
@firebase/firestore:     âœ” estimates size correctly for fixed sized values
@firebase/firestore:     âœ” estimates size correctly for relatively sized values
@firebase/firestore:     âœ” computes lower bound
@firebase/firestore:     âœ” computes upper bound
@firebase/firestore:     âœ” canonicalizes values
@firebase/firestore:     âœ” canonical IDs ignore sort order
@firebase/firestore:     âœ” clones properties without normalization
@firebase/firestore:   BloomFilter
@firebase/firestore:     âœ” can instantiate an empty bloom filter
@firebase/firestore:     âœ” should throw error if empty bloom filter inputs are invalid
@firebase/firestore:     âœ” can instantiate a non empty bloom filter
@firebase/firestore:     âœ” should throw error if padding is invalid
@firebase/firestore:     âœ” should throw error if hash count is negative
@firebase/firestore:     âœ” should throw error if hash count is 0 for non empty bloom filter
@firebase/firestore:     âœ” should be able to process non standard characters
@firebase/firestore:     âœ” mightContain in empty bloom filter should always return false
@firebase/firestore:     âœ” mightContain on empty string might return false positive result
@firebase/firestore:     BloomFilter golden tests
@firebase/firestore:       âœ” mightContain result for 1 document with 1 false positive rate
@firebase/firestore:       âœ” mightContain result for 1 document with 0.01 false positive rate
@firebase/firestore:       âœ” mightContain result for 1 document with 0.0001 false positive rate
@firebase/firestore:       âœ” mightContain result for 500 documents with 1 false positive rate
@firebase/firestore:       âœ” mightContain result for 500 documents with 0.01 false positive rate
@firebase/firestore:       âœ” mightContain result for 500 document with 0.0001 false positive rate
@firebase/firestore:       âœ” mightContain result for 5000 documents with 1 false positive rate
@firebase/firestore:       âœ” mightContain result for 5000 documents with 0.01 false positive rate (120ms)
@firebase/firestore:       âœ” mightContain result for 5000 documents with 0.0001 false positive rate (160ms)
@firebase/firestore:       - mightContain result for 50000 documents with 1 false positive rate
@firebase/firestore:       - mightContain result for 50000 documents with 0.01 false positive rate
@firebase/firestore:       - mightContain result for 50000 documents with 0.0001 false positive rate
@firebase/firestore:   Datastore
@firebase/firestore:     âœ” newDatastore() returns an an instance of Datastore
@firebase/firestore:     âœ” DatastoreImpl.invokeRPC() fails if terminated
@firebase/firestore:     âœ” Connection.terminate() invoked if Datastore terminated
@firebase/firestore:     âœ” DatastoreImpl.invokeRPC() rethrows a FirestoreError
@firebase/firestore:     âœ” DatastoreImpl.invokeRPC() wraps unknown exceptions in a FirestoreError
@firebase/firestore:     âœ” DatastoreImpl.invokeRPC() invalidates the token if unauthenticated
@firebase/firestore:     âœ” DatastoreImpl.invokeStreamingRPC() fails if terminated
@firebase/firestore:     âœ” DatastoreImpl.invokeStreamingRPC() rethrows a FirestoreError
@firebase/firestore:     âœ” DatastoreImpl.invokeStreamingRPC() wraps unknown exceptions in a FirestoreError
@firebase/firestore:     âœ” DatastoreImpl.invokeStreamingRPC() invalidates the token if unauthenticated
@firebase/firestore:   RemoteEvent
@firebase/firestore:     âœ” will accumulate document added and removed events
@firebase/firestore:     âœ” will ignore events for pending targets
@firebase/firestore:     âœ” will ignore events for removed targets
@firebase/firestore:     âœ” will keep reset mapping even with updates
@firebase/firestore:     âœ” will handle single reset
@firebase/firestore:     âœ” will handle target add and removal in same batch
@firebase/firestore:     âœ” target current change will mark the target current
@firebase/firestore:     âœ” target added change will reset previous state
@firebase/firestore:     âœ” no change will still mark the affected targets
@firebase/firestore:     âœ” existence filters clears target mapping
@firebase/firestore:     âœ” existence filters removes current changes
@firebase/firestore:     âœ” handles document update
@firebase/firestore:     âœ” only raises events for updated targets
@firebase/firestore:     âœ” synthesizes deletes
@firebase/firestore:     âœ” doesn't synthesize deletes in the wrong state
@firebase/firestore:     âœ” separates document updates
@firebase/firestore:     âœ” tracks limbo documents
@firebase/firestore:   RestConnection
@firebase/firestore:     âœ” url uses from path
@firebase/firestore:     âœ” merges headers
@firebase/firestore:     âœ” empty app check token is not added to headers
@firebase/firestore:     âœ” returns success
@firebase/firestore:     âœ” returns error
@firebase/firestore:   Serializer
@firebase/firestore:     âœ” toDocument() / fromDocument
@firebase/firestore:     âœ” encodes listen request labels
@firebase/firestore:     converts value
@firebase/firestore:       âœ” converts NullValue
@firebase/firestore:       âœ” converts BooleanValue
@firebase/firestore:       âœ” converts IntegerValue
@firebase/firestore:       âœ” converts DoubleValue
@firebase/firestore:       âœ” converts NaN
@firebase/firestore:       âœ” converts Infinity
@firebase/firestore:       âœ” converts StringValue
@firebase/firestore:       âœ” converts TimestampValue from proto
@firebase/firestore:       âœ” converts TimestampValue from string
@firebase/firestore:       âœ” converts TimestampValue to string (useProto3Json=true)
@firebase/firestore:       âœ” converts GeoPointValue
@firebase/firestore:       âœ” converts BlobValue
@firebase/firestore:       âœ” converts ArrayValue
@firebase/firestore:       âœ” converts empty ArrayValue
@firebase/firestore:       âœ” converts empty ObjectValue
@firebase/firestore:       âœ” converts nested ObjectValues
@firebase/firestore:       âœ” converts RefValue
@firebase/firestore:       âœ” converts VectorValue
@firebase/firestore:     toKey
@firebase/firestore:       âœ” converts an empty key
@firebase/firestore:       âœ” converts a regular key
@firebase/firestore:       âœ” converts a long key
@firebase/firestore:     fromKey
@firebase/firestore:       âœ” converts an empty key
@firebase/firestore:       âœ” converts a regular key
@firebase/firestore:       âœ” converts default-value containing key
@firebase/firestore:     toDocumentMask
@firebase/firestore:       - converts a weird path
@firebase/firestore:     fromDocumentMask
@firebase/firestore:       - converts a weird path
@firebase/firestore:     toMutation
@firebase/firestore:       âœ” converts DeleteMutation
@firebase/firestore:     toMutation / fromMutation
@firebase/firestore:       âœ” SetMutation
@firebase/firestore:       âœ” PatchMutation
@firebase/firestore:       âœ” PatchMutation without precondition
@firebase/firestore:       âœ” DeleteMutation
@firebase/firestore:       âœ” ServerTimestamp transform
@firebase/firestore:       âœ” Numeric Add transform
@firebase/firestore:       âœ” Array transforms
@firebase/firestore:       âœ” SetMutation with precondition
@firebase/firestore:       âœ” VerifyMutation
@firebase/firestore:     to/from UnaryOrFieldFilter
@firebase/firestore:       âœ” makes dotted-property names
@firebase/firestore:       âœ” converts NotEqual
@firebase/firestore:       âœ” converts LessThan
@firebase/firestore:       âœ” converts LessThanOrEqual
@firebase/firestore:       âœ” converts GreaterThan
@firebase/firestore:       âœ” converts GreaterThanOrEqual
@firebase/firestore:       âœ” converts key field
@firebase/firestore:       âœ” converts array-contains
@firebase/firestore:       âœ” converts IN
@firebase/firestore:       âœ” converts not-in
@firebase/firestore:       âœ” converts not-in with null
@firebase/firestore:       âœ” converts array-contains-any
@firebase/firestore:     to/from UnaryFilter
@firebase/firestore:       âœ” converts null
@firebase/firestore:       âœ” converts Nan
@firebase/firestore:       âœ” converts not null
@firebase/firestore:       âœ” converts not NaN
@firebase/firestore:     to/from CompositeFilter
@firebase/firestore:       âœ” converts deep collections
@firebase/firestore:     to/from CompositeFilter
@firebase/firestore:       âœ” converts deep collections
@firebase/firestore:     toTarget
@firebase/firestore:       âœ” converts first-level key queries
@firebase/firestore:       âœ” converts first-level ancestor queries
@firebase/firestore:       âœ” converts nested ancestor queries
@firebase/firestore:       âœ” converts single filters at first-level collections
@firebase/firestore:       âœ” converts multiple filters at first-level collections
@firebase/firestore:       âœ” converts single filters on deeper collections
@firebase/firestore:       âœ” converts multi-layer composite filters with OR at the first layer
@firebase/firestore:       âœ” converts multi-layer composite filters with AND at the first layer
@firebase/firestore:       âœ” converts order bys
@firebase/firestore:       âœ” converts limits
@firebase/firestore:       âœ” converts startAt/endAt
@firebase/firestore:       âœ” converts resume tokens
@firebase/firestore:     to/from OperatorName
@firebase/firestore:       âœ” contains all Operators
@firebase/firestore:     to/from Direction
@firebase/firestore:       âœ” contains all Directions
@firebase/firestore:     to/from PropertyOrder
@firebase/firestore:       âœ” renders ascending
@firebase/firestore:       âœ” renders descending
@firebase/firestore:     fromWatchChange
@firebase/firestore:       âœ” converts target change with added
@firebase/firestore:       âœ” converts target change with removed
@firebase/firestore:       âœ” converts target change with no_change
@firebase/firestore:       âœ” converts target change with no_change (omitted in JSON)
@firebase/firestore:       âœ” converts target change with snapshot version
@firebase/firestore:       âœ” converts document change with target ids
@firebase/firestore:       âœ” converts document change with removed target ids
@firebase/firestore:       âœ” converts document change with deletions
@firebase/firestore:       âœ” converts document removes
@firebase/firestore:   Serializer
@firebase/firestore:     âœ” toDocument() / fromDocument
@firebase/firestore:     âœ” encodes listen request labels
@firebase/firestore:     converts value
@firebase/firestore:       âœ” converts NullValue
@firebase/firestore:       âœ” converts BooleanValue
@firebase/firestore:       âœ” converts IntegerValue
@firebase/firestore:       âœ” converts DoubleValue
@firebase/firestore:       âœ” converts NaN
@firebase/firestore:       âœ” converts Infinity
@firebase/firestore:       âœ” converts StringValue
@firebase/firestore:       âœ” converts TimestampValue from proto
@firebase/firestore:       âœ” converts TimestampValue from string
@firebase/firestore:       âœ” converts TimestampValue to string (useProto3Json=true)
@firebase/firestore:       âœ” converts GeoPointValue
@firebase/firestore:       âœ” converts BlobValue
@firebase/firestore:       âœ” converts ArrayValue
@firebase/firestore:       âœ” converts empty ArrayValue
@firebase/firestore:       âœ” converts empty ObjectValue
@firebase/firestore:       âœ” converts nested ObjectValues
@firebase/firestore:       âœ” converts RefValue
@firebase/firestore:       âœ” converts VectorValue
@firebase/firestore:     toKey
@firebase/firestore:       âœ” converts an empty key
@firebase/firestore:       âœ” converts a regular key
@firebase/firestore:       âœ” converts a long key
@firebase/firestore:     fromKey
@firebase/firestore:       âœ” converts an empty key
@firebase/firestore:       âœ” converts a regular key
@firebase/firestore:       âœ” converts default-value containing key
@firebase/firestore:     toDocumentMask
@firebase/firestore:       - converts a weird path
@firebase/firestore:     fromDocumentMask
@firebase/firestore:       - converts a weird path
@firebase/firestore:     toMutation
@firebase/firestore:       âœ” converts DeleteMutation
@firebase/firestore:     toMutation / fromMutation
@firebase/firestore:       âœ” SetMutation
@firebase/firestore:       âœ” PatchMutation
@firebase/firestore:       âœ” PatchMutation without precondition
@firebase/firestore:       âœ” DeleteMutation
@firebase/firestore:       âœ” ServerTimestamp transform
@firebase/firestore:       âœ” Numeric Add transform
@firebase/firestore:       âœ” Array transforms
@firebase/firestore:       âœ” SetMutation with precondition
@firebase/firestore:       âœ” VerifyMutation
@firebase/firestore:     to/from UnaryOrFieldFilter
@firebase/firestore:       âœ” makes dotted-property names
@firebase/firestore:       âœ” converts NotEqual
@firebase/firestore:       âœ” converts LessThan
@firebase/firestore:       âœ” converts LessThanOrEqual
@firebase/firestore:       âœ” converts GreaterThan
@firebase/firestore:       âœ” converts GreaterThanOrEqual
@firebase/firestore:       âœ” converts key field
@firebase/firestore:       âœ” converts array-contains
@firebase/firestore:       âœ” converts IN
@firebase/firestore:       âœ” converts not-in
@firebase/firestore:       âœ” converts not-in with null
@firebase/firestore:       âœ” converts array-contains-any
@firebase/firestore:     to/from UnaryFilter
@firebase/firestore:       âœ” converts null
@firebase/firestore:       âœ” converts Nan
@firebase/firestore:       âœ” converts not null
@firebase/firestore:       âœ” converts not NaN
@firebase/firestore:     to/from CompositeFilter
@firebase/firestore:       âœ” converts deep collections
@firebase/firestore:     to/from CompositeFilter
@firebase/firestore:       âœ” converts deep collections
@firebase/firestore:     toTarget
@firebase/firestore:       âœ” converts first-level key queries
@firebase/firestore:       âœ” converts first-level ancestor queries
@firebase/firestore:       âœ” converts nested ancestor queries
@firebase/firestore:       âœ” converts single filters at first-level collections
@firebase/firestore:       âœ” converts multiple filters at first-level collections
@firebase/firestore:       âœ” converts single filters on deeper collections
@firebase/firestore:       âœ” converts multi-layer composite filters with OR at the first layer
@firebase/firestore:       âœ” converts multi-layer composite filters with AND at the first layer
@firebase/firestore:       âœ” converts order bys
@firebase/firestore:       âœ” converts limits
@firebase/firestore:       âœ” converts startAt/endAt
@firebase/firestore:       âœ” converts resume tokens
@firebase/firestore:     to/from OperatorName
@firebase/firestore:       âœ” contains all Operators
@firebase/firestore:     to/from Direction
@firebase/firestore:       âœ” contains all Directions
@firebase/firestore:     to/from PropertyOrder
@firebase/firestore:       âœ” renders ascending
@firebase/firestore:       âœ” renders descending
@firebase/firestore:     fromWatchChange
@firebase/firestore:       âœ” converts target change with added
@firebase/firestore:       âœ” converts target change with removed
@firebase/firestore:       âœ” converts target change with no_change
@firebase/firestore:       âœ” converts target change with no_change (omitted in JSON)
@firebase/firestore:       âœ” converts target change with snapshot version
@firebase/firestore:       âœ” converts document change with target ids
@firebase/firestore:       âœ” converts document change with removed target ids
@firebase/firestore:       âœ” converts document change with deletions
@firebase/firestore:       âœ” converts document removes
@firebase/firestore:   Bundles:
@firebase/firestore:     âœ” (Persistence) Newer docs from bundles should overwrite cache (44ms)
@firebase/firestore:     âœ” (Memory) Newer docs from bundles should overwrite cache
@firebase/firestore:     âœ” (Persistence) Newer deleted docs from bundles should delete cached docs (40ms)
@firebase/firestore:     âœ” (Memory) Newer deleted docs from bundles should delete cached docs
@firebase/firestore:     âœ” (Persistence) Older deleted docs from bundles should do nothing (38ms)
@firebase/firestore:     âœ” (Memory) Older deleted docs from bundles should do nothing
@firebase/firestore:     âœ” (Persistence) Newer docs from bundles should raise snapshot only when Watch catches up with acknowledged writes (64ms)
@firebase/firestore:     âœ” (Memory) Newer docs from bundles should raise snapshot only when Watch catches up with acknowledged writes
@firebase/firestore:     âœ” (Persistence) Newer docs from bundles should keep not raise snapshot if there are unacknowledged writes (47ms)
@firebase/firestore:     âœ” (Memory) Newer docs from bundles should keep not raise snapshot if there are unacknowledged writes
@firebase/firestore:     âœ” (Persistence) Newer docs from bundles might lead to limbo doc (48ms)
@firebase/firestore:     âœ” (Memory) Newer docs from bundles might lead to limbo doc
@firebase/firestore:     âœ” (Persistence) Bundles query can be resumed from same query.
@firebase/firestore:     âœ” (Memory) Bundles query can be resumed from same query.
@firebase/firestore:     âœ” (Persistence) Bundles query can be loaded and resumed from different tabs (67ms)
@firebase/firestore:     - (Memory) Bundles query can be loaded and resumed from different tabs
@firebase/firestore:     âœ” (Persistence) Load from secondary clients and observe from primary (50ms)
@firebase/firestore:     - (Memory) Load from secondary clients and observe from primary
@firebase/firestore:     âœ” (Persistence) Load and observe from same secondary client (60ms)
@firebase/firestore:     - (Memory) Load and observe from same secondary client
@firebase/firestore:     âœ” (Persistence) Load from primary client and observe from secondary (55ms)
@firebase/firestore:     - (Memory) Load from primary client and observe from secondary
@firebase/firestore:   Collections:
@firebase/firestore:     âœ” (Persistence) Events are raised after watch ack
@firebase/firestore:     âœ” (Memory) Events are raised after watch ack
@firebase/firestore:     âœ” (Persistence) Events are raised for local sets before watch ack
@firebase/firestore:     âœ” (Memory) Events are raised for local sets before watch ack
@firebase/firestore:   Existence Filters:
@firebase/firestore:     âœ” (Persistence) Existence filter match
@firebase/firestore:     âœ” (Memory) Existence filter match
@firebase/firestore:     âœ” (Persistence) Existence filter match after pending update
@firebase/firestore:     âœ” (Memory) Existence filter match after pending update
@firebase/firestore:     âœ” (Persistence) Existence filter with empty target
@firebase/firestore:     âœ” (Memory) Existence filter with empty target
@firebase/firestore:     âœ” (Persistence) Existence filter ignored with pending target (43ms)
@firebase/firestore:     âœ” (Memory) Existence filter ignored with pending target
@firebase/firestore:     âœ” (Persistence) Existence filter mismatch triggers re-run of query (49ms)
@firebase/firestore:     âœ” (Memory) Existence filter mismatch triggers re-run of query
@firebase/firestore:     âœ” (Persistence) Existence filter mismatch will drop resume token (51ms)
@firebase/firestore:     âœ” (Memory) Existence filter mismatch will drop resume token
@firebase/firestore:     âœ” (Persistence) Existence filter handled at global snapshot (45ms)
@firebase/firestore:     âœ” (Memory) Existence filter handled at global snapshot
@firebase/firestore:     âœ” (Persistence) Existence filter synthesizes deletes
@firebase/firestore:     âœ” (Memory) Existence filter synthesizes deletes
@firebase/firestore:     âœ” (Persistence) Existence filter limbo resolution is denied (49ms)
@firebase/firestore:     âœ” (Memory) Existence filter limbo resolution is denied
@firebase/firestore:     âœ” (Persistence) Existence filter clears resume token (47ms)
@firebase/firestore:     - (Memory) Existence filter clears resume token
@firebase/firestore:     âœ” (Persistence) Full re-query is skipped when bloom filter can identify documents deleted (47ms)
@firebase/firestore:     âœ” (Memory) Full re-query is skipped when bloom filter can identify documents deleted
@firebase/firestore:     âœ” (Persistence) Full re-query is triggered when bloom filter cannot identify documents deleted (38ms)
@firebase/firestore:     âœ” (Memory) Full re-query is triggered when bloom filter cannot identify documents deleted
@firebase/firestore:     âœ” (Persistence) Bloom filter can process special characters in document name
@firebase/firestore:     âœ” (Memory) Bloom filter can process special characters in document name
@firebase/firestore:     âœ” (Persistence) Bloom filter fills in default values for undefined padding and hashCount (40ms)
@firebase/firestore:     âœ” (Memory) Bloom filter fills in default values for undefined padding and hashCount
@firebase/firestore:     âœ” (Persistence) Full re-query is triggered when bloom filter bitmap is invalid (38ms)
@firebase/firestore:     âœ” (Memory) Full re-query is triggered when bloom filter bitmap is invalid
@firebase/firestore:     âœ” (Persistence) Full re-query is triggered when bloom filter hashCount is invalid (41ms)
@firebase/firestore:     âœ” (Memory) Full re-query is triggered when bloom filter hashCount is invalid
@firebase/firestore:     âœ” (Persistence) Full re-query is triggered when bloom filter is empty (41ms)
@firebase/firestore:     âœ” (Memory) Full re-query is triggered when bloom filter is empty
@firebase/firestore:     âœ” (Persistence) Same documents can have different bloom filters (60ms)
@firebase/firestore:     âœ” (Memory) Same documents can have different bloom filters
@firebase/firestore:     âœ” (Persistence) Bloom filter is handled at global snapshot
@firebase/firestore:     âœ” (Memory) Bloom filter is handled at global snapshot
@firebase/firestore:     âœ” (Persistence) Bloom filter limbo resolution is denied (44ms)
@firebase/firestore:     âœ” (Memory) Bloom filter limbo resolution is denied
@firebase/firestore:     âœ” (Persistence) Bloom filter with large size works as expected (175ms)
@firebase/firestore:     âœ” (Memory) Bloom filter with large size works as expected (55ms)
@firebase/firestore:     âœ” (Persistence) Resume a query with bloom filter when there is no document changes (41ms)
@firebase/firestore:     âœ” (Memory) Resume a query with bloom filter when there is no document changes
@firebase/firestore:     âœ” (Persistence) Resume a query with bloom filter when new documents are added (42ms)
@firebase/firestore:     âœ” (Memory) Resume a query with bloom filter when new documents are added
@firebase/firestore:     âœ” (Persistence) Resume a query with bloom filter when existing docs are updated (41ms)
@firebase/firestore:     âœ” (Memory) Resume a query with bloom filter when existing docs are updated
@firebase/firestore:     âœ” (Persistence) Resume a query with bloom filter when documents are updated to no longer match the query (42ms)
@firebase/firestore:     âœ” (Memory) Resume a query with bloom filter when documents are updated to no longer match the query
@firebase/firestore:     âœ” (Persistence) Resume a query with bloom filter when documents are added, removed and deleted (46ms)
@firebase/firestore:     âœ” (Memory) Resume a query with bloom filter when documents are added, removed and deleted
@firebase/firestore:   Garbage Collection:
@firebase/firestore:     - (Persistence) Contents of query are cleared when listen is removed.
@firebase/firestore:     âœ” (Memory) Contents of query are cleared when listen is removed.
@firebase/firestore:     âœ” (Persistence) Contents of query are kept after listen is removed.
@firebase/firestore:     âœ” (Memory) Contents of query are kept after listen is removed.
@firebase/firestore:     âœ” (Persistence) Contents of query are kept after listen is removed, and GC threshold is not reached
@firebase/firestore:     âœ” (Memory) Contents of query are kept after listen is removed, and GC threshold is not reached
@firebase/firestore:     âœ” (Persistence) Contents of query are removed after listen is removed, and GC threshold is reached (42ms)
@firebase/firestore:     âœ” (Memory) Contents of query are removed after listen is removed, and GC threshold is reached
@firebase/firestore:     âœ” (Persistence) Contents of active query are kept while inactive results are removed after GC (90ms)
@firebase/firestore:     âœ” (Memory) Contents of active query are kept while inactive results are removed after GC
@firebase/firestore:   Client Side Index
@firebase/firestore:     âœ” (Persistence) Index Creation visible on all clients
@firebase/firestore:     - (Memory) Index Creation visible on all clients
@firebase/firestore:     âœ” (Persistence) Index Creation succeeds even if not primary
@firebase/firestore:     - (Memory) Index Creation succeeds even if not primary
@firebase/firestore:   Limbo Documents:
@firebase/firestore:     âœ” (Persistence) Limbo documents are deleted without an existence filter (44ms)
@firebase/firestore:     âœ” (Memory) Limbo documents are deleted without an existence filter
@firebase/firestore:     âœ” (Persistence) Limbo documents are deleted with an existence filter (40ms)
@firebase/firestore:     âœ” (Memory) Limbo documents are deleted with an existence filter
@firebase/firestore:     âœ” (Persistence) Limbo documents are resolved with updates (42ms)
@firebase/firestore:     âœ” (Memory) Limbo documents are resolved with updates
@firebase/firestore:     âœ” (Persistence) Limbo documents are resolved with updates in different snapshot than "current" (55ms)
@firebase/firestore:     âœ” (Memory) Limbo documents are resolved with updates in different snapshot than "current"
@firebase/firestore:     âœ” (Persistence) Document remove message will cause docs to go in limbo (41ms)
@firebase/firestore:     âœ” (Memory) Document remove message will cause docs to go in limbo
@firebase/firestore:     âœ” (Persistence) Limbo resolution handles snapshot before CURRENT (72ms)
@firebase/firestore:     âœ” (Memory) Limbo resolution handles snapshot before CURRENT
@firebase/firestore:     âœ” (Persistence) Limbo resolution handles snapshot before CURRENT [no document update] (78ms)
@firebase/firestore:     âœ” (Memory) Limbo resolution handles snapshot before CURRENT [no document update]
@firebase/firestore:     âœ” (Persistence) Failed limbo resolution removes document from view (64ms)
@firebase/firestore:     âœ” (Memory) Failed limbo resolution removes document from view
@firebase/firestore:     âœ” (Persistence) Limbo docs are resolved by primary client (61ms)
@firebase/firestore:     - (Memory) Limbo docs are resolved by primary client
@firebase/firestore:     âœ” (Persistence) Limbo documents are resolved after primary tab failover (75ms)
@firebase/firestore:     - (Memory) Limbo documents are resolved after primary tab failover
@firebase/firestore:     âœ” (Persistence) Limbo documents survive primary state transitions (116ms)
@firebase/firestore:     - (Memory) Limbo documents survive primary state transitions
@firebase/firestore:     âœ” (Persistence) Limbo documents stay consistent between views (64ms)
@firebase/firestore:     âœ” (Memory) Limbo documents stay consistent between views
@firebase/firestore:     âœ” (Persistence) LimitToLast query from secondary results in no expected limbo doc (60ms)
@firebase/firestore:     - (Memory) LimitToLast query from secondary results in no expected limbo doc
@firebase/firestore:     âœ” (Persistence) LimitToLast query from secondary results in expected limbo doc (60ms)
@firebase/firestore:     - (Memory) LimitToLast query from secondary results in expected limbo doc
@firebase/firestore:     âœ” (Persistence) Limbo resolution throttling with all results at once from watch (66ms)
@firebase/firestore:     âœ” (Memory) Limbo resolution throttling with all results at once from watch
@firebase/firestore:     âœ” (Persistence) Limbo resolution throttling with results one at a time from watch (75ms)
@firebase/firestore:     âœ” (Memory) Limbo resolution throttling with results one at a time from watch
@firebase/firestore:     âœ” (Persistence) Limbo resolution throttling when a limbo listen is rejected. (46ms)
@firebase/firestore:     âœ” (Memory) Limbo resolution throttling when a limbo listen is rejected.
@firebase/firestore:     âœ” (Persistence) Limbo resolution throttling with existence filter mismatch (70ms)
@firebase/firestore:     âœ” (Memory) Limbo resolution throttling with existence filter mismatch
@firebase/firestore:     âœ” (Persistence) Limbo resolution should wait for full re-query result if there is an existence filter mismatch  (59ms)
@firebase/firestore:     âœ” (Memory) Limbo resolution should wait for full re-query result if there is an existence filter mismatch 
@firebase/firestore:     âœ” (Persistence) Limbo resolution throttling with bloom filter application (52ms)
@firebase/firestore:     âœ” (Memory) Limbo resolution throttling with bloom filter application
@firebase/firestore:     âœ” (Persistence) A limbo resolution for a document should not be started if one is already active (54ms)
@firebase/firestore:     âœ” (Memory) A limbo resolution for a document should not be started if one is already active
@firebase/firestore:     âœ” (Persistence) A limbo resolution for a document should not be enqueued if one is already enqueued (85ms)
@firebase/firestore:     âœ” (Memory) A limbo resolution for a document should not be enqueued if one is already enqueued
@firebase/firestore:     âœ” (Persistence) A limbo resolution for a document should be removed from the queue when the last query listen stops (85ms)
@firebase/firestore:     âœ” (Memory) A limbo resolution for a document should be removed from the queue when the last query listen stops
@firebase/firestore:     âœ” (Persistence) Fix #8474 - Limbo resolution for document is removed even if document updates for the document occurred before documentDelete in the global snapshot window (59ms)
@firebase/firestore:     âœ” (Memory) Fix #8474 - Limbo resolution for document is removed even if document updates for the document occurred before documentDelete in the global snapshot window
@firebase/firestore:     âœ” (Persistence) Fix #8474 - Limbo resolution for document is removed even if document updates for the document occurred in the global snapshot window and no document delete was received for the limbo resolution query (59ms)
@firebase/firestore:     âœ” (Memory) Fix #8474 - Limbo resolution for document is removed even if document updates for the document occurred in the global snapshot window and no document delete was received for the limbo resolution query
@firebase/firestore:     âœ” (Persistence) Fix #8474 - Handles code path of no ack for limbo resolution query before global snapshot (59ms)
@firebase/firestore:     âœ” (Memory) Fix #8474 - Handles code path of no ack for limbo resolution query before global snapshot
@firebase/firestore:   Limits:
@firebase/firestore:     âœ” (Persistence) Documents in limit are replaced by remote event
@firebase/firestore:     âœ” (Memory) Documents in limit are replaced by remote event
@firebase/firestore:     âœ” (Persistence) Documents outside of limit don't raise hasPendingWrites (45ms)
@firebase/firestore:     âœ” (Memory) Documents outside of limit don't raise hasPendingWrites
@firebase/firestore:     âœ” (Persistence) Deleted Document in limbo in full limit query (48ms)
@firebase/firestore:     âœ” (Memory) Deleted Document in limbo in full limit query
@firebase/firestore:     âœ” (Persistence) Documents in limit can handle removed messages
@firebase/firestore:     âœ” (Memory) Documents in limit can handle removed messages
@firebase/firestore:     âœ” (Persistence) Documents in limit are can handle removed messages for only one of many query (48ms)
@firebase/firestore:     âœ” (Memory) Documents in limit are can handle removed messages for only one of many query
@firebase/firestore:     âœ” (Persistence) Limits are re-filled from cache (48ms)
@firebase/firestore:     âœ” (Memory) Limits are re-filled from cache
@firebase/firestore:     âœ” (Persistence) Initial snapshots for limit queries are re-filled from cache (with removal) (58ms)
@firebase/firestore:     âœ” (Memory) Initial snapshots for limit queries are re-filled from cache (with removal)
@firebase/firestore:     âœ” (Persistence) Initial snapshots for limit queries are re-filled from cache (with latency-compensated edit) (62ms)
@firebase/firestore:     âœ” (Memory) Initial snapshots for limit queries are re-filled from cache (with latency-compensated edit)
@firebase/firestore:     âœ” (Persistence) Initial snapshots for limit queries are re-filled from cache (with update from backend) (64ms)
@firebase/firestore:     âœ” (Memory) Initial snapshots for limit queries are re-filled from cache (with update from backend)
@firebase/firestore:     âœ” (Persistence) Resumed limit queries exclude deleted documents  (92ms)
@firebase/firestore:     - (Memory) Resumed limit queries exclude deleted documents 
@firebase/firestore:     âœ” (Persistence) Resumed limit queries use updated documents  (49ms)
@firebase/firestore:     âœ” (Memory) Resumed limit queries use updated documents 
@firebase/firestore:     âœ” (Persistence) Multiple docs in limbo in full limit query (94ms)
@firebase/firestore:     âœ” (Memory) Multiple docs in limbo in full limit query
@firebase/firestore:     âœ” (Persistence) Limit query is refilled by primary client (56ms)
@firebase/firestore:     - (Memory) Limit query is refilled by primary client
@firebase/firestore:     âœ” (Persistence) Limit query includes write from secondary client  (82ms)
@firebase/firestore:     - (Memory) Limit query includes write from secondary client 
@firebase/firestore:   Listens source options:
@firebase/firestore:     - (Persistence) Contents of query are cleared when listen is removed.
@firebase/firestore:     âœ” (Memory) Contents of query are cleared when listen is removed.
@firebase/firestore:     - (Persistence) Documents are cleared when listen is removed.
@firebase/firestore:     âœ” (Memory) Documents are cleared when listen is removed.
@firebase/firestore:     âœ” (Persistence) Doesn't include unknown documents in cached result
@firebase/firestore:     âœ” (Memory) Doesn't include unknown documents in cached result
@firebase/firestore:     âœ” (Persistence) Doesn't raise 'hasPendingWrites' for deletes (51ms)
@firebase/firestore:     âœ” (Memory) Doesn't raise 'hasPendingWrites' for deletes
@firebase/firestore:     âœ” (Persistence) onSnapshotsInSync fires for multiple listeners (57ms)
@firebase/firestore:     âœ” (Memory) onSnapshotsInSync fires for multiple listeners
@firebase/firestore:     âœ” (Persistence) Empty initial snapshot is raised from cache
@firebase/firestore:     âœ” (Memory) Empty initial snapshot is raised from cache
@firebase/firestore:     âœ” (Persistence) Empty-due-to-delete initial snapshot is raised from cache (42ms)
@firebase/firestore:     âœ” (Memory) Empty-due-to-delete initial snapshot is raised from cache
@firebase/firestore:     âœ” (Persistence) Newer docs from bundles should overwrite cache (48ms)
@firebase/firestore:     âœ” (Memory) Newer docs from bundles should overwrite cache
@firebase/firestore:     âœ” (Persistence) Newer deleted docs from bundles should delete cached docs (47ms)
@firebase/firestore:     âœ” (Memory) Newer deleted docs from bundles should delete cached docs
@firebase/firestore:     âœ” (Persistence) Older deleted docs from bundles should do nothing (46ms)
@firebase/firestore:     âœ” (Memory) Older deleted docs from bundles should do nothing
@firebase/firestore:     âœ” (Persistence) Newer docs from bundles should keep not raise snapshot if there are unacknowledged writes (51ms)
@firebase/firestore:     âœ” (Memory) Newer docs from bundles should keep not raise snapshot if there are unacknowledged writes
@firebase/firestore:     âœ” (Persistence) Newer docs from bundles should raise snapshot only when Watch catches up with acknowledged writes (73ms)
@firebase/firestore:     âœ” (Memory) Newer docs from bundles should raise snapshot only when Watch catches up with acknowledged writes
@firebase/firestore:     âœ” (Persistence) Primary client should not invoke watch request while all clients are listening to cache
@firebase/firestore:     - (Memory) Primary client should not invoke watch request while all clients are listening to cache
@firebase/firestore:     âœ” (Persistence) Local mutations notifies listeners sourced from cache in all tabs (50ms)
@firebase/firestore:     - (Memory) Local mutations notifies listeners sourced from cache in all tabs
@firebase/firestore:     âœ” (Persistence) Listeners with different source shares watch changes between primary and secondary clients (70ms)
@firebase/firestore:     - (Memory) Listeners with different source shares watch changes between primary and secondary clients
@firebase/firestore:     âœ” (Persistence) Clients can have multiple listeners with different sources (60ms)
@firebase/firestore:     - (Memory) Clients can have multiple listeners with different sources
@firebase/firestore:     âœ” (Persistence) Query is executed by primary client even if primary client only has listeners sourced from cache (59ms)
@firebase/firestore:     - (Memory) Query is executed by primary client even if primary client only has listeners sourced from cache
@firebase/firestore:     âœ” (Persistence) Query only raises events in participating clients (70ms)
@firebase/firestore:     - (Memory) Query only raises events in participating clients
@firebase/firestore:     âœ” (Persistence) Mirror queries being listened in different clients sourced from cache  (68ms)
@firebase/firestore:     - (Memory) Mirror queries being listened in different clients sourced from cache 
@firebase/firestore:     âœ” (Persistence) Mirror queries being listened in the same secondary client sourced from cache (62ms)
@firebase/firestore:     - (Memory) Mirror queries being listened in the same secondary client sourced from cache
@firebase/firestore:     âœ” (Persistence) Mirror queries being listened from different sources while listening to server in primary tab (54ms)
@firebase/firestore:     - (Memory) Mirror queries being listened from different sources while listening to server in primary tab
@firebase/firestore:     âœ” (Persistence) Mirror queries from different sources while listening to server in secondary tab (64ms)
@firebase/firestore:     - (Memory) Mirror queries from different sources while listening to server in secondary tab
@firebase/firestore:     âœ” (Persistence) Un-listen to listeners from different source (55ms)
@firebase/firestore:     - (Memory) Un-listen to listeners from different source
@firebase/firestore:   Listens:
@firebase/firestore:     - (Persistence) Contents of query are cleared when listen is removed.
@firebase/firestore:     âœ” (Memory) Contents of query are cleared when listen is removed.
@firebase/firestore:     - (Persistence) Documents outside of view are cleared when listen is removed.
@firebase/firestore:     âœ” (Memory) Documents outside of view are cleared when listen is removed.
@firebase/firestore:     âœ” (Persistence) Contents of query update when new data is received.
@firebase/firestore:     âœ” (Memory) Contents of query update when new data is received.
@firebase/firestore:     âœ” (Persistence) Doesn't raise events for empty target (39ms)
@firebase/firestore:     âœ” (Memory) Doesn't raise events for empty target
@firebase/firestore:     âœ” (Persistence) Doesn't include unknown documents in cached result (43ms)
@firebase/firestore:     âœ” (Memory) Doesn't include unknown documents in cached result
@firebase/firestore:     âœ” (Persistence) Doesn't raise 'hasPendingWrites' for deletes (51ms)
@firebase/firestore:     âœ” (Memory) Doesn't raise 'hasPendingWrites' for deletes
@firebase/firestore:     âœ” (Persistence) Ensure correct query results with latency-compensated deletes (43ms)
@firebase/firestore:     âœ” (Memory) Ensure correct query results with latency-compensated deletes
@firebase/firestore:     âœ” (Persistence) Does not raise event for initial document delete
@firebase/firestore:     âœ” (Memory) Does not raise event for initial document delete
@firebase/firestore:     âœ” (Persistence) Will process removals without waiting for a consistent snapshot
@firebase/firestore:     âœ” (Memory) Will process removals without waiting for a consistent snapshot
@firebase/firestore:     âœ” (Persistence) Will re-issue listen for errored target
@firebase/firestore:     âœ” (Memory) Will re-issue listen for errored target
@firebase/firestore:     âœ” (Persistence) Will gracefully process failed targets (39ms)
@firebase/firestore:     âœ” (Memory) Will gracefully process failed targets
@firebase/firestore:     âœ” (Persistence) Will gracefully handle watch stream reverting snapshots (49ms)
@firebase/firestore:     âœ” (Memory) Will gracefully handle watch stream reverting snapshots
@firebase/firestore:     âœ” (Persistence) Will gracefully handle watch stream reverting snapshots (with restart) (52ms)
@firebase/firestore:     - (Memory) Will gracefully handle watch stream reverting snapshots (with restart)
@firebase/firestore:     âœ” (Persistence) Individual documents cannot revert (73ms)
@firebase/firestore:     âœ” (Memory) Individual documents cannot revert
@firebase/firestore:     âœ” (Persistence) Individual (deleted) documents cannot revert (73ms)
@firebase/firestore:     âœ” (Memory) Individual (deleted) documents cannot revert
@firebase/firestore:     âœ” (Persistence) Waits until Watch catches up to local deletes  (81ms)
@firebase/firestore:     âœ” (Memory) Waits until Watch catches up to local deletes 
@firebase/firestore:     âœ” (Persistence) Listens are reestablished after network disconnect (45ms)
@firebase/firestore:     âœ” (Memory) Listens are reestablished after network disconnect
@firebase/firestore:     âœ” (Persistence) Synthesizes deletes for missing document (55ms)
@firebase/firestore:     âœ” (Memory) Synthesizes deletes for missing document
@firebase/firestore:     âœ” (Persistence) Re-opens target without existence filter (45ms)
@firebase/firestore:     âœ” (Memory) Re-opens target without existence filter
@firebase/firestore:     âœ” (Persistence) Ignores update from inactive target (40ms)
@firebase/firestore:     âœ” (Memory) Ignores update from inactive target
@firebase/firestore:     âœ” (Persistence) Does not synthesize deletes for previously acked documents (40ms)
@firebase/firestore:     âœ” (Memory) Does not synthesize deletes for previously acked documents
@firebase/firestore:     âœ” (Persistence) Query is rejected and re-listened to
@firebase/firestore:     âœ” (Memory) Query is rejected and re-listened to
@firebase/firestore:     âœ” (Persistence) Persists resume token sent with target (50ms)
@firebase/firestore:     âœ” (Memory) Persists resume token sent with target
@firebase/firestore:     âœ” (Persistence) Array-contains queries support resuming (52ms)
@firebase/firestore:     âœ” (Memory) Array-contains queries support resuming
@firebase/firestore:     âœ” (Persistence) Persists global resume tokens on unlisten (48ms)
@firebase/firestore:     âœ” (Memory) Persists global resume tokens on unlisten
@firebase/firestore:     âœ” (Persistence) Omits global resume tokens for a short while (56ms)
@firebase/firestore:     - (Memory) Omits global resume tokens for a short while
@firebase/firestore:     âœ” (Persistence) Persists global resume tokens if the snapshot is old enough (55ms)
@firebase/firestore:     - (Memory) Persists global resume tokens if the snapshot is old enough
@firebase/firestore:     âœ” (Persistence) Query is executed by primary client (55ms)
@firebase/firestore:     - (Memory) Query is executed by primary client
@firebase/firestore:     âœ” (Persistence) Query is shared between primary and secondary client (68ms)
@firebase/firestore:     - (Memory) Query is shared between primary and secondary client
@firebase/firestore:     âœ” (Persistence) Query is joined by primary client (66ms)
@firebase/firestore:     - (Memory) Query is joined by primary client
@firebase/firestore:     âœ” (Persistence) Query only raises events in participating clients (63ms)
@firebase/firestore:     - (Memory) Query only raises events in participating clients
@firebase/firestore:     âœ” (Persistence) Query is unlistened to by primary client (58ms)
@firebase/firestore:     - (Memory) Query is unlistened to by primary client
@firebase/firestore:     âœ” (Persistence) Query is resumed by secondary client (63ms)
@firebase/firestore:     - (Memory) Query is resumed by secondary client
@firebase/firestore:     âœ” (Persistence) Query is rejected by primary client
@firebase/firestore:     - (Memory) Query is rejected by primary client
@firebase/firestore:     âœ” (Persistence) Query is rejected and re-listened to by secondary client (51ms)
@firebase/firestore:     - (Memory) Query is rejected and re-listened to by secondary client
@firebase/firestore:     âœ” (Persistence) Secondary client raises latency compensated snapshot from primary mutation (67ms)
@firebase/firestore:     - (Memory) Secondary client raises latency compensated snapshot from primary mutation
@firebase/firestore:     - (Persistence) Secondary client advances query state with global snapshot from primary
@firebase/firestore:     - (Memory) Secondary client advances query state with global snapshot from primary
@firebase/firestore:     âœ” (Persistence) Mirror queries from same secondary client (62ms)
@firebase/firestore:     - (Memory) Mirror queries from same secondary client
@firebase/firestore:     âœ” (Persistence) Mirror queries from different secondary client (66ms)
@firebase/firestore:     - (Memory) Mirror queries from different secondary client
@firebase/firestore:     âœ” (Persistence) Mirror queries from primary and secondary client (68ms)
@firebase/firestore:     - (Memory) Mirror queries from primary and secondary client
@firebase/firestore:     âœ” (Persistence) Can listen/unlisten to mirror queries. (50ms)
@firebase/firestore:     âœ” (Memory) Can listen/unlisten to mirror queries.
@firebase/firestore:     âœ” (Persistence) Secondary client uses primary client's online state (62ms)
@firebase/firestore:     - (Memory) Secondary client uses primary client's online state
@firebase/firestore:     âœ” (Persistence) New client uses existing online state (60ms)
@firebase/firestore:     - (Memory) New client uses existing online state
@firebase/firestore:     âœ” (Persistence) New client becomes primary if no client has its network enabled (69ms)
@firebase/firestore:     - (Memory) New client becomes primary if no client has its network enabled
@firebase/firestore:     âœ” (Persistence) Secondary client's online state is ignored (70ms)
@firebase/firestore:     - (Memory) Secondary client's online state is ignored
@firebase/firestore:     âœ” (Persistence) Offline state doesn't persist if primary is shut down (39ms)
@firebase/firestore:     - (Memory) Offline state doesn't persist if primary is shut down
@firebase/firestore:     âœ” (Persistence) Listen is re-listened to after primary tab failover (77ms)
@firebase/firestore:     - (Memory) Listen is re-listened to after primary tab failover
@firebase/firestore:     âœ” (Persistence) Listen is established in new primary tab (75ms)
@firebase/firestore:     - (Memory) Listen is established in new primary tab
@firebase/firestore:     âœ” (Persistence) Query recovers after primary takeover (79ms)
@firebase/firestore:     - (Memory) Query recovers after primary takeover
@firebase/firestore:     âœ” (Persistence) Query bounces between primaries (109ms)
@firebase/firestore:     - (Memory) Query bounces between primaries
@firebase/firestore:     âœ” (Persistence) Unresponsive primary ignores watch update (66ms)
@firebase/firestore:     - (Memory) Unresponsive primary ignores watch update
@firebase/firestore:     âœ” (Persistence) Listen is established in newly started primary (73ms)
@firebase/firestore:     - (Memory) Listen is established in newly started primary
@firebase/firestore:     âœ” (Persistence) Previous primary immediately regains primary lease (71ms)
@firebase/firestore:     - (Memory) Previous primary immediately regains primary lease
@firebase/firestore:     âœ” (Persistence) onSnapshotsInSync should not fire for doc changes if there are no listeners
@firebase/firestore:     âœ” (Memory) onSnapshotsInSync should not fire for doc changes if there are no listeners
@firebase/firestore:     âœ” (Persistence) onSnapshotsInSync fires when called even if there are no local listeners (43ms)
@firebase/firestore:     âœ” (Memory) onSnapshotsInSync fires when called even if there are no local listeners
@firebase/firestore:     âœ” (Persistence) onSnapshotsInSync fires for metadata changes (53ms)
@firebase/firestore:     âœ” (Memory) onSnapshotsInSync fires for metadata changes
@firebase/firestore:     âœ” (Persistence) onSnapshotsInSync fires once for multiple event snapshots (66ms)
@firebase/firestore:     âœ” (Memory) onSnapshotsInSync fires once for multiple event snapshots
@firebase/firestore:     âœ” (Persistence) onSnapshotsInSync fires for multiple listeners (55ms)
@firebase/firestore:     âœ” (Memory) onSnapshotsInSync fires for multiple listeners
@firebase/firestore:     âœ” (Persistence) Empty initial snapshot is raised from cache (38ms)
@firebase/firestore:     âœ” (Memory) Empty initial snapshot is raised from cache
@firebase/firestore:     âœ” (Persistence) Empty-due-to-delete initial snapshot is raised from cache (39ms)
@firebase/firestore:     âœ” (Memory) Empty-due-to-delete initial snapshot is raised from cache
@firebase/firestore:     âœ” (Persistence) Empty initial snapshot is raised from cache in multiple tabs (53ms)
@firebase/firestore:     - (Memory) Empty initial snapshot is raised from cache in multiple tabs
@firebase/firestore:     âœ” (Persistence) Empty-due-to-delete initial snapshot is raised from cache in multiple tabs (69ms)
@firebase/firestore:     - (Memory) Empty-due-to-delete initial snapshot is raised from cache in multiple tabs
@firebase/firestore:     âœ” (Persistence) Resuming a query should specify expectedCount when adding the target (51ms)
@firebase/firestore:     âœ” (Memory) Resuming a query should specify expectedCount when adding the target
@firebase/firestore:     âœ” (Persistence) Resuming a query should specify expectedCount that does not include pending mutations (43ms)
@firebase/firestore:     âœ” (Memory) Resuming a query should specify expectedCount that does not include pending mutations
@firebase/firestore:     âœ” (Persistence) ExpectedCount in listen request should work after coming back online (39ms)
@firebase/firestore:     âœ” (Memory) ExpectedCount in listen request should work after coming back online
@firebase/firestore:     âœ” (Persistence) Global snapshots would not alter query state if there is no changes (63ms)
@firebase/firestore:     - (Memory) Global snapshots would not alter query state if there is no changes
@firebase/firestore:   Offline:
@firebase/firestore:     âœ” (Persistence) Empty queries are resolved if client goes offline
@firebase/firestore:     âœ” (Memory) Empty queries are resolved if client goes offline
@firebase/firestore:     âœ” (Persistence) A successful message delays offline status
@firebase/firestore:     âœ” (Memory) A successful message delays offline status
@firebase/firestore:     - (Persistence) Removing all listeners delays "Offline" status on next listen
@firebase/firestore:     âœ” (Memory) Removing all listeners delays "Offline" status on next listen
@firebase/firestore:     âœ” (Persistence) Queries revert to fromCache=true when offline. (40ms)
@firebase/firestore:     âœ” (Memory) Queries revert to fromCache=true when offline.
@firebase/firestore:     âœ” (Persistence) Queries with limbo documents handle going offline. (51ms)
@firebase/firestore:     âœ” (Memory) Queries with limbo documents handle going offline.
@firebase/firestore:     âœ” (Persistence) OnlineState timeout triggers offline behavior (40ms)
@firebase/firestore:     âœ” (Memory) OnlineState timeout triggers offline behavior
@firebase/firestore:     âœ” (Persistence) New queries return immediately with fromCache=true when offline due to stream failures.
@firebase/firestore:     âœ” (Memory) New queries return immediately with fromCache=true when offline due to stream failures.
@firebase/firestore:     âœ” (Persistence) New queries return immediately with fromCache=true when offline due to OnlineState timeout.
@firebase/firestore:     âœ” (Memory) New queries return immediately with fromCache=true when offline due to OnlineState timeout.
@firebase/firestore:     - (Persistence) Queries return from cache when network disabled
@firebase/firestore:     âœ” (Memory) Queries return from cache when network disabled
@firebase/firestore:     âœ” (Persistence) Client stays offline during credential change
@firebase/firestore:     âœ” (Memory) Client stays offline during credential change
@firebase/firestore:   OrderBy:
@firebase/firestore:     âœ” (Persistence) orderBy applies filtering based on local state (49ms)
@firebase/firestore:     âœ” (Memory) orderBy applies filtering based on local state
@firebase/firestore:     âœ” (Persistence) orderBy applies to existing documents (46ms)
@firebase/firestore:     âœ” (Memory) orderBy applies to existing documents
@firebase/firestore:   Performance Tests [10 iterations]:
@firebase/firestore:     - (Persistence) Insert a new document
@firebase/firestore:     - (Memory) Insert a new document
@firebase/firestore:     - (Persistence) Start a listen, write a document, ack the write, handle watch snapshot, unlisten
@firebase/firestore:     - (Memory) Start a listen, write a document, ack the write, handle watch snapshot, unlisten
@firebase/firestore:     - (Persistence) Write 100 documents and raise a snapshot
@firebase/firestore:     - (Memory) Write 100 documents and raise a snapshot
@firebase/firestore:     - (Persistence) Update a single document
@firebase/firestore:     - (Memory) Update a single document
@firebase/firestore:     - (Persistence) Update a document and wait for snapshot with existing listen
@firebase/firestore:     - (Memory) Update a document and wait for snapshot with existing listen
@firebase/firestore:     - (Persistence) Process 100 documents from Watch and wait for snapshot
@firebase/firestore:     - (Memory) Process 100 documents from Watch and wait for snapshot
@firebase/firestore:     - (Persistence) Process 100 documents from Watch and wait for snapshot, then unlisten and wait for a cached snapshot
@firebase/firestore:     - (Memory) Process 100 documents from Watch and wait for snapshot, then unlisten and wait for a cached snapshot
@firebase/firestore:     - (Persistence) Process 25 target updates and wait for snapshot
@firebase/firestore:     - (Memory) Process 25 target updates and wait for snapshot
@firebase/firestore:     - (Persistence) Add 500 documents, issue 10 queries that return 10 documents each, unlisten
@firebase/firestore:     - (Memory) Add 500 documents, issue 10 queries that return 10 documents each, unlisten
@firebase/firestore:   Persistence:
@firebase/firestore:     âœ” (Persistence) Local mutations are persisted and re-sent (55ms)
@firebase/firestore:     - (Memory) Local mutations are persisted and re-sent
@firebase/firestore:     âœ” (Persistence) Persisted local mutations are visible to listeners (46ms)
@firebase/firestore:     - (Memory) Persisted local mutations are visible to listeners
@firebase/firestore:     âœ” (Persistence) Remote documents are persisted (43ms)
@firebase/firestore:     - (Memory) Remote documents are persisted
@firebase/firestore:     âœ” (Persistence) Remote documents from watch are not GC'd
@firebase/firestore:     âœ” (Memory) Remote documents from watch are not GC'd
@firebase/firestore:     âœ” (Persistence) Remote documents from user sets are not GC'd
@firebase/firestore:     âœ” (Memory) Remote documents from user sets are not GC'd
@firebase/firestore:     âœ” (Persistence) Mutation Queue is persisted across uid switches (69ms)
@firebase/firestore:     âœ” (Memory) Mutation Queue is persisted across uid switches
@firebase/firestore:     âœ” (Persistence) Mutation Queue is persisted across uid switches (with restarts) (94ms)
@firebase/firestore:     - (Memory) Mutation Queue is persisted across uid switches (with restarts)
@firebase/firestore:     âœ” (Persistence) Visible mutations reflect uid switches (65ms)
@firebase/firestore:     âœ” (Memory) Visible mutations reflect uid switches
@firebase/firestore:     âœ” (Persistence) Detects all active clients
@firebase/firestore:     - (Memory) Detects all active clients
@firebase/firestore:     âœ” (Persistence) Single tab acquires primary lease (38ms)
@firebase/firestore:     - (Memory) Single tab acquires primary lease
@firebase/firestore:     âœ” (Persistence) Foreground tab acquires primary lease (47ms)
@firebase/firestore:     - (Memory) Foreground tab acquires primary lease
@firebase/firestore:     âœ” (Persistence) Primary lease bound to network state (54ms)
@firebase/firestore:     - (Memory) Primary lease bound to network state
@firebase/firestore:     âœ” (Persistence) clearPersistence() shuts down other clients (40ms)
@firebase/firestore:     - (Memory) clearPersistence() shuts down other clients
@firebase/firestore:   Queries:
@firebase/firestore:     âœ” (Persistence) Collection Group query (101ms)
@firebase/firestore:     âœ” (Memory) Collection Group query
@firebase/firestore:     âœ” (Persistence) Collection Group query with mutations (77ms)
@firebase/firestore:     âœ” (Memory) Collection Group query with mutations
@firebase/firestore:     âœ” (Persistence) Latency-compensated updates are included in query results (46ms)
@firebase/firestore:     âœ” (Memory) Latency-compensated updates are included in query results
@firebase/firestore:     âœ” (Persistence) Queries in different tabs will not interfere (63ms)
@firebase/firestore:     - (Memory) Queries in different tabs will not interfere
@firebase/firestore:   Persistence Recovery
@firebase/firestore:     âœ” (Persistence) Write is acknowledged by primary client (with recovery) (45ms)
@firebase/firestore:     - (Memory) Write is acknowledged by primary client (with recovery)
@firebase/firestore:     âœ” (Persistence) Clients fail to lookup mutations (with recovery) (43ms)
@firebase/firestore:     - (Memory) Clients fail to lookup mutations (with recovery)
@firebase/firestore:     âœ” (Persistence) Query raises events in secondary client (with recovery) (44ms)
@firebase/firestore:     - (Memory) Query raises events in secondary client (with recovery)
@firebase/firestore:     âœ” (Persistence) Query is listened to by primary (with recovery) (40ms)
@firebase/firestore:     - (Memory) Query is listened to by primary (with recovery)
@firebase/firestore:     âœ” (Persistence) Query with active view recovers after primary tab failover (with recovery) (60ms)
@firebase/firestore:     - (Memory) Query with active view recovers after primary tab failover (with recovery)
@firebase/firestore:     âœ” (Persistence) Query without active view recovers after primary tab failover (with recovery) (77ms)
@firebase/firestore:     - (Memory) Query without active view recovers after primary tab failover (with recovery)
@firebase/firestore:     âœ” (Persistence) Ignores intermittent lease refresh failures (with recovery) (38ms)
@firebase/firestore:     - (Memory) Ignores intermittent lease refresh failures (with recovery)
@firebase/firestore:     âœ” (Persistence) Recovers when write cannot be persisted (56ms)
@firebase/firestore:     âœ” (Memory) Recovers when write cannot be persisted
@firebase/firestore:     âœ” (Persistence) Does not surface non-persisted writes (64ms)
@firebase/firestore:     âœ” (Memory) Does not surface non-persisted writes
@firebase/firestore:     âœ” (Persistence) Recovers when write acknowledgment cannot be persisted (57ms)
@firebase/firestore:     âœ” (Memory) Recovers when write acknowledgment cannot be persisted
@firebase/firestore:     âœ” (Persistence) Recovers when write rejection cannot be persisted (54ms)
@firebase/firestore:     âœ” (Memory) Recovers when write rejection cannot be persisted
@firebase/firestore:     âœ” (Persistence) Recovers when write acknowledgment cannot be persisted (with restart) (66ms)
@firebase/firestore:     - (Memory) Recovers when write acknowledgment cannot be persisted (with restart)
@firebase/firestore:     âœ” (Persistence) Writes are pending until acknowledgement is persisted (69ms)
@firebase/firestore:     âœ” (Memory) Writes are pending until acknowledgement is persisted
@firebase/firestore:     âœ” (Persistence) Surfaces local documents if notifyLocalViewChanges fails (45ms)
@firebase/firestore:     âœ” (Memory) Surfaces local documents if notifyLocalViewChanges fails
@firebase/firestore:     âœ” (Persistence) Excludes documents from future queries even if notifyLocalViewChanges fails (44ms)
@firebase/firestore:     âœ” (Memory) Excludes documents from future queries even if notifyLocalViewChanges fails
@firebase/firestore:     âœ” (Persistence) Fails targets that cannot be allocated (41ms)
@firebase/firestore:     âœ” (Memory) Fails targets that cannot be allocated
@firebase/firestore:     âœ” (Persistence) Can re-add failed target
@firebase/firestore:     âœ” (Memory) Can re-add failed target
@firebase/firestore:     âœ” (Persistence) Recovers when watch update cannot be persisted (42ms)
@firebase/firestore:     âœ” (Memory) Recovers when watch update cannot be persisted
@firebase/firestore:     âœ” (Persistence) Handles rejections that cannot be persisted (53ms)
@firebase/firestore:     âœ” (Memory) Handles rejections that cannot be persisted
@firebase/firestore:     âœ” (Persistence) Recovers when Limbo acknowledgement cannot be persisted (60ms)
@firebase/firestore:     âœ” (Memory) Recovers when Limbo acknowledgement cannot be persisted
@firebase/firestore:     âœ” (Persistence) Recovers when Limbo rejection cannot be persisted (59ms)
@firebase/firestore:     âœ” (Memory) Recovers when Limbo rejection cannot be persisted
@firebase/firestore:     âœ” (Persistence) User change handles transaction failures (with recovery) (42ms)
@firebase/firestore:     - (Memory) User change handles transaction failures (with recovery)
@firebase/firestore:     âœ” (Persistence) Multiple user changes during transaction failure (with recovery) (43ms)
@firebase/firestore:     - (Memory) Multiple user changes during transaction failure (with recovery)
@firebase/firestore:     âœ” (Persistence) Unlisten succeeds when target release fails
@firebase/firestore:     âœ” (Memory) Unlisten succeeds when target release fails
@firebase/firestore:     âœ” (Persistence) Can re-listen to query when unlisten fails (42ms)
@firebase/firestore:     âœ” (Memory) Can re-listen to query when unlisten fails
@firebase/firestore:   Remote store:
@firebase/firestore:     âœ” (Persistence) Waits for watch to remove targets (40ms)
@firebase/firestore:     âœ” (Memory) Waits for watch to remove targets
@firebase/firestore:     âœ” (Persistence) Waits for watch to ack last target add (70ms)
@firebase/firestore:     âœ” (Memory) Waits for watch to ack last target add
@firebase/firestore:     âœ” (Persistence) Cleans up watch state correctly
@firebase/firestore:     âœ” (Memory) Cleans up watch state correctly
@firebase/firestore:     âœ” (Persistence) Handles user changes while offline (b/74749605).
@firebase/firestore:     âœ” (Memory) Handles user changes while offline (b/74749605).
@firebase/firestore:   Resume tokens:
@firebase/firestore:     âœ” (Persistence) Resume tokens are sent after watch stream restarts
@firebase/firestore:     âœ” (Memory) Resume tokens are sent after watch stream restarts
@firebase/firestore:     âœ” (Persistence) Resume tokens are used across new listens (40ms)
@firebase/firestore:     âœ” (Memory) Resume tokens are used across new listens
@firebase/firestore:   Writes:
@firebase/firestore:     âœ” (Persistence) Two sequential writes to different documents smoke test. (69ms)
@firebase/firestore:     âœ” (Memory) Two sequential writes to different documents smoke test.
@firebase/firestore:     âœ” (Persistence) Event is raised for a local set before and after the write ack (52ms)
@firebase/firestore:     âœ” (Memory) Event is raised for a local set before and after the write ack
@firebase/firestore:     âœ” (Persistence) Raises snapshot with 'hasPendingWrites' for unacknowledged write
@firebase/firestore:     âœ” (Memory) Raises snapshot with 'hasPendingWrites' for unacknowledged write
@firebase/firestore:     âœ” (Persistence) Doesn't raise 'hasPendingWrites' for committed write and new listen
@firebase/firestore:     âœ” (Memory) Doesn't raise 'hasPendingWrites' for committed write and new listen
@firebase/firestore:     âœ” (Persistence) Doesn't raise event for document with pending patch (54ms)
@firebase/firestore:     âœ” (Memory) Doesn't raise event for document with pending patch
@firebase/firestore:     âœ” (Persistence) Cache will not keep data for an outdated write ack (49ms)
@firebase/firestore:     âœ” (Memory) Cache will not keep data for an outdated write ack
@firebase/firestore:     âœ” (Persistence) Cache raises correct event if write is acked before watch delivers it (49ms)
@firebase/firestore:     âœ” (Memory) Cache raises correct event if write is acked before watch delivers it
@firebase/firestore:     âœ” (Persistence) Cache will hold local write until watch catches up (67ms)
@firebase/firestore:     âœ” (Memory) Cache will hold local write until watch catches up
@firebase/firestore:     âœ” (Persistence) Local patch is applied to query until watch catches up (91ms)
@firebase/firestore:     âœ” (Memory) Local patch is applied to query until watch catches up
@firebase/firestore:     âœ” (Persistence) Writes are pipelined (372ms)
@firebase/firestore:     âœ” (Memory) Writes are pipelined
@firebase/firestore:     âœ” (Persistence) Pipelined writes can fail (250ms)
@firebase/firestore:     âœ” (Memory) Pipelined writes can fail
@firebase/firestore:     âœ” (Persistence) Failed writes are released immediately. (67ms)
@firebase/firestore:     âœ” (Memory) Failed writes are released immediately.
@firebase/firestore:     âœ” (Persistence) Writes are not re-sent. (68ms)
@firebase/firestore:     âœ” (Memory) Writes are not re-sent.
@firebase/firestore:     âœ” (Persistence) Writes are not re-sent after disable/enable network. (59ms)
@firebase/firestore:     âœ” (Memory) Writes are not re-sent after disable/enable network.
@firebase/firestore:     - (Persistence) Writes are released when there are no queries left
@firebase/firestore:     âœ” (Memory) Writes are released when there are no queries left
@firebase/firestore:     âœ” (Persistence) Writes that fail with code invalid-argument are rejected (39ms)
@firebase/firestore:     âœ” (Memory) Writes that fail with code invalid-argument are rejected
@firebase/firestore:     âœ” (Persistence) Writes that fail with code not-found are rejected
@firebase/firestore:     âœ” (Memory) Writes that fail with code not-found are rejected
@firebase/firestore:     âœ” (Persistence) Writes that fail with code already-exists are rejected (39ms)
@firebase/firestore:     âœ” (Memory) Writes that fail with code already-exists are rejected
@firebase/firestore:     âœ” (Persistence) Writes that fail with code permission-denied are rejected (39ms)
@firebase/firestore:     âœ” (Memory) Writes that fail with code permission-denied are rejected
@firebase/firestore:     âœ” (Persistence) Writes that fail with code failed-precondition are rejected
@firebase/firestore:     âœ” (Memory) Writes that fail with code failed-precondition are rejected
@firebase/firestore:     âœ” (Persistence) Writes that fail with code out-of-range are rejected (38ms)
@firebase/firestore:     âœ” (Memory) Writes that fail with code out-of-range are rejected
@firebase/firestore:     âœ” (Persistence) Writes that fail with code unimplemented are rejected
@firebase/firestore:     âœ” (Memory) Writes that fail with code unimplemented are rejected
@firebase/firestore:     âœ” (Persistence) Writes that fail with code data-loss are rejected
@firebase/firestore:     âœ” (Memory) Writes that fail with code data-loss are rejected
@firebase/firestore:     âœ” (Persistence) Writes that fail with code resource_exhausted are not rejected
@firebase/firestore:     âœ” (Memory) Writes that fail with code resource_exhausted are not rejected
@firebase/firestore:     âœ” (Persistence) Writes that fail with code aborted are retried (46ms)
@firebase/firestore:     âœ” (Memory) Writes that fail with code aborted are retried
@firebase/firestore:     âœ” (Persistence) Writes that fail with code cancelled are retried (47ms)
@firebase/firestore:     âœ” (Memory) Writes that fail with code cancelled are retried
@firebase/firestore:     âœ” (Persistence) Writes that fail with code unknown are retried (45ms)
@firebase/firestore:     âœ” (Memory) Writes that fail with code unknown are retried
@firebase/firestore:     âœ” (Persistence) Writes that fail with code deadline-exceeded are retried (45ms)
@firebase/firestore:     âœ” (Memory) Writes that fail with code deadline-exceeded are retried
@firebase/firestore:     âœ” (Persistence) Writes that fail with code internal are retried (44ms)
@firebase/firestore:     âœ” (Memory) Writes that fail with code internal are retried
@firebase/firestore:     âœ” (Persistence) Writes that fail with code unavailable are retried (48ms)
@firebase/firestore:     âœ” (Memory) Writes that fail with code unavailable are retried
@firebase/firestore:     âœ” (Persistence) Writes that fail with code unauthenticated are retried (46ms)
@firebase/firestore:     âœ” (Memory) Writes that fail with code unauthenticated are retried
@firebase/firestore:     âœ” (Persistence) Ensure correct events after patching a doc (including a delete) and getting watcher events. (53ms)
@firebase/firestore:     âœ” (Memory) Ensure correct events after patching a doc (including a delete) and getting watcher events.
@firebase/firestore:     âœ” (Persistence) Writes are resent after network disconnect (38ms)
@firebase/firestore:     âœ” (Memory) Writes are resent after network disconnect
@firebase/firestore:     âœ” (Persistence) New writes are sent after write failure (43ms)
@firebase/firestore:     âœ” (Memory) New writes are sent after write failure
@firebase/firestore:     âœ” (Persistence) Primary client acknowledges write (40ms)
@firebase/firestore:     - (Memory) Primary client acknowledges write
@firebase/firestore:     âœ” (Persistence) Primary client rejects write (45ms)
@firebase/firestore:     - (Memory) Primary client rejects write
@firebase/firestore:     âœ” (Persistence) Pending writes are shared between clients (68ms)
@firebase/firestore:     - (Memory) Pending writes are shared between clients
@firebase/firestore:     âœ” (Persistence) Pending write is acknowledged by primary client (70ms)
@firebase/firestore:     - (Memory) Pending write is acknowledged by primary client
@firebase/firestore:     âœ” (Persistence) Pending write is rejected by primary client (63ms)
@firebase/firestore:     - (Memory) Pending write is rejected by primary client
@firebase/firestore:     âœ” (Persistence) Writes are released by primary client (64ms)
@firebase/firestore:     - (Memory) Writes are released by primary client
@firebase/firestore:     âœ” (Persistence) Writes are held during primary failover (89ms)
@firebase/firestore:     - (Memory) Writes are held during primary failover
@firebase/firestore:     âœ” (Persistence) Write are sequenced by multiple clients (204ms)
@firebase/firestore:     - (Memory) Write are sequenced by multiple clients
@firebase/firestore:     âœ” (Persistence) Write is executed after primary tab failover (63ms)
@firebase/firestore:     - (Memory) Write is executed after primary tab failover
@firebase/firestore:     âœ” (Persistence) Secondary tabs handle user change (94ms)
@firebase/firestore:     - (Memory) Secondary tabs handle user change
@firebase/firestore:     âœ” (Persistence) Mutations are scoped by user (49ms)
@firebase/firestore:     - (Memory) Mutations are scoped by user
@firebase/firestore:     âœ” (Persistence) Mutation recovers after primary takeover (75ms)
@firebase/firestore:     - (Memory) Mutation recovers after primary takeover
@firebase/firestore:     âœ” (Persistence) Write is sent by newly started primary (46ms)
@firebase/firestore:     - (Memory) Write is sent by newly started primary
@firebase/firestore:     âœ” (Persistence) Unresponsive primary ignores acknowledged write (75ms)
@firebase/firestore:     - (Memory) Unresponsive primary ignores acknowledged write
@firebase/firestore:     âœ” (Persistence) Unresponsive primary ignores rejected write (81ms)
@firebase/firestore:     - (Memory) Unresponsive primary ignores rejected write
@firebase/firestore:     âœ” (Persistence) Mutation are not sent twice after primary failover (84ms)
@firebase/firestore:     - (Memory) Mutation are not sent twice after primary failover
@firebase/firestore:     âœ” (Persistence) Wait for pending writes resolves after write acknowledgment (47ms)
@firebase/firestore:     âœ” (Memory) Wait for pending writes resolves after write acknowledgment
@firebase/firestore:     âœ” (Persistence) Wait for pending writes resolves with no writes
@firebase/firestore:     âœ” (Memory) Wait for pending writes resolves with no writes
@firebase/firestore:     âœ” (Persistence) Wait for pending writes resolves multiple times
@firebase/firestore:     âœ” (Memory) Wait for pending writes resolves multiple times
@firebase/firestore:     âœ” (Persistence) Wait for pending writes resolves if another write is issued (41ms)
@firebase/firestore:     âœ” (Memory) Wait for pending writes resolves if another write is issued
@firebase/firestore:     âœ” (Persistence) Wait for pending writes waits after restart (44ms)
@firebase/firestore:     - (Memory) Wait for pending writes waits after restart
@firebase/firestore:     âœ” (Persistence) Wait for pending writes resolves for write in secondary tab (41ms)
@firebase/firestore:     - (Memory) Wait for pending writes resolves for write in secondary tab
@firebase/firestore:     âœ” (Persistence) Wait for pending writes resolves independently for different tabs (72ms)
@firebase/firestore:     - (Memory) Wait for pending writes resolves independently for different tabs
@firebase/firestore:   diffArrays
@firebase/firestore:     âœ” Missing Element
@firebase/firestore:     âœ” AddedElement
@firebase/firestore:     âœ” Without Ordering
@firebase/firestore:     âœ” Empty Lists
@firebase/firestore:   AsyncQueue
@firebase/firestore:     âœ” schedules ops in right order
@firebase/firestore:     âœ” handles failures
@firebase/firestore:     âœ” can schedule ops in the future
@firebase/firestore:     âœ” Can cancel delayed operations
@firebase/firestore:     âœ” Can run all delayed operations early
@firebase/firestore:     âœ” Can run some delayed operations early
@firebase/firestore:     âœ” Retries retryable operations
@firebase/firestore:     âœ” Doesn't retry internal exceptions
@firebase/firestore:     âœ” Schedules first retryable attempt with no delay
@firebase/firestore:     âœ” Retries retryable operations with backoff
@firebase/firestore:     âœ” Retries retryable operations in order
@firebase/firestore:     âœ” Does not delay retryable operations that succeed
@firebase/firestore:     âœ” Catches up when retryable operation fails
@firebase/firestore:     âœ” Can drain (non-delayed) operations
@firebase/firestore:     âœ” Schedules operations with respect to shut down
@firebase/firestore:     âœ” Does not run existing operations if opted out
@firebase/firestore:   atob
@firebase/firestore:     âœ” decodes with native support
@firebase/firestore:     âœ” roundtrips with native support
@firebase/firestore:     âœ” decodes with polyfill
@firebase/firestore:     âœ” roundtrips with polyfill
@firebase/firestore:   btoa
@firebase/firestore:     âœ” encodes with native support
@firebase/firestore:     âœ” roundtrips with native support
@firebase/firestore:     âœ” encodes with polyfill
@firebase/firestore:     âœ” roundtrips with polyfill
@firebase/firestore:   byteStreamReaderFromString()
@firebase/firestore:     âœ” returns a reader stepping readable stream
@firebase/firestore:   Bundle 
@firebase/firestore:     âœ” reads with query and doc with bytesPerRead 1
@firebase/firestore:     âœ” reads with unexpected orders with bytesPerRead 1
@firebase/firestore:     âœ” reads without named query with bytesPerRead 1
@firebase/firestore:     âœ” reads with deleted doc with bytesPerRead 1
@firebase/firestore:     âœ” reads without documents or query with bytesPerRead 1
@firebase/firestore:     âœ” throws with ill-formatted bundle with bytesPerRead 1
@firebase/firestore:     âœ” reads with query and doc with bytesPerRead 4
@firebase/firestore:     âœ” reads with unexpected orders with bytesPerRead 4
@firebase/firestore:     âœ” reads without named query with bytesPerRead 4
@firebase/firestore:     âœ” reads with deleted doc with bytesPerRead 4
@firebase/firestore:     âœ” reads without documents or query with bytesPerRead 4
@firebase/firestore:     âœ” throws with ill-formatted bundle with bytesPerRead 4
@firebase/firestore:     âœ” reads with query and doc with bytesPerRead 64
@firebase/firestore:     âœ” reads with unexpected orders with bytesPerRead 64
@firebase/firestore:     âœ” reads without named query with bytesPerRead 64
@firebase/firestore:     âœ” reads with deleted doc with bytesPerRead 64
@firebase/firestore:     âœ” reads without documents or query with bytesPerRead 64
@firebase/firestore:     âœ” throws with ill-formatted bundle with bytesPerRead 64
@firebase/firestore:     âœ” reads with query and doc with bytesPerRead 1024
@firebase/firestore:     âœ” reads with unexpected orders with bytesPerRead 1024
@firebase/firestore:     âœ” reads without named query with bytesPerRead 1024
@firebase/firestore:     âœ” reads with deleted doc with bytesPerRead 1024
@firebase/firestore:     âœ” reads without documents or query with bytesPerRead 1024
@firebase/firestore:     âœ” throws with ill-formatted bundle with bytesPerRead 1024
@firebase/firestore:   LogicUtils
@firebase/firestore:     âœ” implements field filter associativity
@firebase/firestore:     âœ” implements composite filter associativity
@firebase/firestore:     âœ” implements field filter distribution over field filter
@firebase/firestore:     âœ” implements field filter distribution over and filter
@firebase/firestore:     âœ” implements field filter distribution over or filter
@firebase/firestore:     âœ” implements in expansion for field filters
@firebase/firestore:     âœ” implements in expansion for composite filters
@firebase/firestore:     âœ” implements field filter distribution over or filter
@firebase/firestore:     âœ” implements and filter distribution with and filter
@firebase/firestore:     âœ” implements and filter distribution with or filter
@firebase/firestore:     âœ” implements or filter distribution with and filter
@firebase/firestore:     âœ” implements or filter distribution with or filter
@firebase/firestore:     âœ” implements field filter compute DNF
@firebase/firestore:     âœ” implements compute dnf flat AND filter
@firebase/firestore:     âœ” implements compute dnf flat OR filter
@firebase/firestore:     âœ” compute DNF1
@firebase/firestore:     âœ” compute DNF2
@firebase/firestore:     âœ” compute DNF3
@firebase/firestore:     âœ” compute DNF4
@firebase/firestore:     âœ” compute DNF5
@firebase/firestore:     âœ” compute DNF6
@firebase/firestore:     âœ” compute DNF7
@firebase/firestore:     âœ” compute DNF8
@firebase/firestore:   immediateSuccessor
@firebase/firestore:     âœ” generates the correct immediate successors
@firebase/firestore:   typeCast
@firebase/firestore:     âœ” can cast types
@firebase/firestore:     âœ” validates types
@firebase/firestore:   FieldMask
@firebase/firestore:     âœ” cannot contain duplicate fields
@firebase/firestore:   CompareUtf8Strings
@firebase/firestore:     âœ” compareUtf8Strings should return correct results (5880ms)
@firebase/firestore:   nodePromise
@firebase/firestore:     âœ” resolves on success value
@firebase/firestore:     âœ” rejects on error
@firebase/firestore:   ObjectMap
@firebase/firestore:     âœ” can get/put/delete values
@firebase/firestore:     âœ” can handle collisions
@firebase/firestore:   SortedMap Tests
@firebase/firestore:     âœ” Create node
@firebase/firestore:     âœ” You can search a map for a specific key
@firebase/firestore:     âœ” You can insert a new key/value pair into the tree
@firebase/firestore:     âœ” You can remove a key/value pair from the map
@firebase/firestore:     âœ” More removals
@firebase/firestore:     âœ” Removal bug
@firebase/firestore:     âœ” Test increasing
@firebase/firestore:     âœ” The structure should be valid after insertion (1)
@firebase/firestore:     âœ” The structure should be valid after insertion (2)
@firebase/firestore:     âœ” Rotate left leaves the tree in a valid state
@firebase/firestore:     âœ” Rotate right leaves the tree in a valid state
@firebase/firestore:     âœ” The structure should be valid after insertion (3)
@firebase/firestore:     âœ” you can overwrite a value
@firebase/firestore:     âœ” removing the last element returns an empty map
@firebase/firestore:     âœ” empty .get()
@firebase/firestore:     âœ” empty .size
@firebase/firestore:     âœ” empty .remove()
@firebase/firestore:     âœ” .reverseTraversal() works.
@firebase/firestore:     âœ” insertion and removal of 100 items in random order.
@firebase/firestore:     - Perf
@firebase/firestore:     - Perf: Insertion and removal with various # of items.
@firebase/firestore:     - Perf: Comparison with {}: Insertion and removal with various # of items.
@firebase/firestore:     âœ” SortedMapIterator empty test.
@firebase/firestore:     âœ” forward iterator without start key
@firebase/firestore:     âœ” forward iterator with start key.
@firebase/firestore:     âœ” forward iterator with start key larger than max key
@firebase/firestore:     âœ” forward iterator with start key smaller than min key
@firebase/firestore:     âœ” reverse iterator without start key
@firebase/firestore:     âœ” reverse iterator with start key.
@firebase/firestore:     âœ” reverse iterator with start key smaller than min key
@firebase/firestore:     âœ” reverse iterator with start key larger than max key
@firebase/firestore:     âœ” SortedMap.indexOf returns index.
@firebase/firestore:   SortedSet
@firebase/firestore:     âœ” keeps elements in the right order
@firebase/firestore:     âœ” adds and deletes elements
@firebase/firestore:     âœ” updates elements
@firebase/firestore:     âœ” can iterate over all elements within a range
@firebase/firestore:     âœ” can iterate over all elements while condition
@firebase/firestore:     âœ” can find element equal or greater to provided.
@firebase/firestore:     âœ” can unionWith another set.
@firebase/firestore:     âœ” returns indexes of elements
@firebase/firestore:     âœ” diff sorted sets with missing element
@firebase/firestore:     âœ” diff sorted sets with added element
@firebase/firestore:     âœ” diff sorted sets with empty sets
@firebase/firestore:   2984 passing (2m)
@firebase/firestore:   186 pending
@firebase/firestore: Shutting down emulator, pid: [87211] ...
@firebase/firestore: Deleting the emulator jar at /var/folders/4p/60jxf65d6tsb3k2s8r8jzwk000j4dz/T/tmp-87145-SGUzNPTt5flO/cloud-firestore-emulator-v1.18.1.jar
@firebase/firestore: > @firebase/firestore@4.7.9 test:lite:browser
@firebase/firestore: > karma start --lite
@firebase/firestore: The 'BROWSER' environment variable is undefined. Defaulting to 'ChromeHeadless'.
@firebase/firestore: START:
@firebase/firestore: Webpack bundling...
@firebase/firestore: assets by path [1m[32m../../../../../../Users/chholland/repos/fb-FRESH/packages/firestore/dist/firestore/src/[39m[22m 842 KiB 259 assets
@firebase/firestore: assets by path [1m[32m../../../../../../Users/chholland/repos/fb-FRESH/packages/firestore/dist/firestore/test/[39m[22m 171 KiB
@firebase/firestore:   assets by path [1m[32m../../../../../../Users/chholland/repos/fb-FRESH/packages/firestore/dist/firestore/test/unit/[39m[22m 109 KiB 102 assets
@firebase/firestore:   assets by path [1m[32m../../../../../../Users/chholland/repos/fb-FRESH/packages/firestore/dist/firestore/test/integration/[39m[22m 37.5 KiB 37 assets
@firebase/firestore:   assets by path [1m[32m../../../../../../Users/chholland/repos/fb-FRESH/packages/firestore/dist/firestore/test/util/*.ts[39m[22m 19.7 KiB
@firebase/firestore:     asset [1m[32m../../../../../../Users/chholland/repos/fb-FRESH/packages/firestore/dist/firestore/test/util/helpers.d.ts[39m[22m 11.6 KiB [1m[33m[compared for emit][39m[22m
@firebase/firestore:     + 6 assets
@firebase/firestore:   assets by path [1m[32m../../../../../../Users/chholland/repos/fb-FRESH/packages/firestore/dist/firestore/test/lite/*.ts[39m[22m 3.43 KiB
@firebase/firestore:     asset [1m[32m../../../../../../Users/chholland/repos/fb-FRESH/packages/firestore/dist/firestore/test/lite/helpers.d.ts[39m[22m 2.23 KiB [1m[33m[compared for emit][39m[22m
@firebase/firestore:     + 2 assets
@firebase/firestore:   asset [1m[32m../../../../../../Users/chholland/repos/fb-FRESH/packages/firestore/dist/firestore/test/register.d.ts[39m[22m 616 bytes [1m[33m[compared for emit][39m[22m
@firebase/firestore: assets by path [1m[32m../../../../../../Users/chholland/repos/fb-FRESH/packages/firestore/dist/firestore/lite/*.ts[39m[22m 3.38 KiB
@firebase/firestore:   asset [1m[32m../../../../../../Users/chholland/repos/fb-FRESH/packages/firestore/dist/firestore/lite/index.d.ts[39m[22m 2.57 KiB [1m[33m[compared for emit][39m[22m
@firebase/firestore:   asset [1m[32m../../../../../../Users/chholland/repos/fb-FRESH/packages/firestore/dist/firestore/lite/register.d.ts[39m[22m 829 bytes [1m[33m[compared for emit][39m[22m
@firebase/firestore: asset [1m[32mbootstrap.2509163044.js[39m[22m 6.83 MiB [1m[32m[emitted][39m[22m (name: bootstrap.2509163044) 1 related asset
@firebase/firestore: webpack 5.97.1 compiled [1m[32msuccessfully[39m[22m in 7538 ms
@firebase/firestore: [33m04 03 2025 15:04:19.170:WARN [preprocessor.sourcemap]: [39mmissing external source map for /Users/chholland/repos/fb-FRESH/packages/firestore/test/lite/bootstrap.ts
@firebase/firestore: [33m04 03 2025 15:04:19.178:WARN [preprocessor.sourcemap]: [39mmissing external source map for /Users/chholland/repos/fb-FRESH/packages/firestore/test/lite/bootstrap.ts
@firebase/firestore: [32m04 03 2025 15:04:19.185:INFO [karma-server]: [39mKarma v6.4.4 server started at http://localhost:8089/
@firebase/firestore: [32m04 03 2025 15:04:19.185:INFO [launcher]: [39mLaunching browsers ChromeHeadless with concurrency 1
@firebase/firestore: [32m04 03 2025 15:04:19.189:INFO [launcher]: [39mStarting browser ChromeHeadless
@firebase/firestore: [32m04 03 2025 15:04:19.892:INFO [Chrome Headless 133.0.0.0 (Mac OS 10.15.7)]: [39mConnected on socket c6y4_Za70dQ8Ycz-AAAB with id 40881038
@firebase/firestore: Chrome Headless 133.0.0.0 (Mac OS 10.15.7) LOG: 'Default Settings: {"host":"firestore.googleapis.com","ssl":true}'
@firebase/firestore: Chrome Headless 133.0.0.0 (Mac OS 10.15.7) LOG: 'Default Settings: {"host":"firestore.googleapis.com","ssl":true}'
@firebase/firestore: Chrome Headless 133.0.0.0 (Mac OS 10.15.7) LOG: 'Default DatabaseId: "(default)"'
@firebase/firestore: Chrome Headless 133.0.0.0 (Mac OS 10.15.7) LOG: 'Default DatabaseId: "(default)"'
@firebase/firestore:   Firestore
@firebase/firestore:     âœ” can provide setting
@firebase/firestore:     âœ” returns same default instance from named app
@firebase/firestore:     âœ” returns different instance from named app
@firebase/firestore:     âœ” returns same default instance from default app
@firebase/firestore:     âœ” returns different instance from different named app
@firebase/firestore:     âœ” cannot call initializeFirestore() twice
@firebase/firestore:     âœ” cannot use once terminated
@firebase/firestore:     âœ” can call terminate() multiple times
@firebase/firestore:   doc
@firebase/firestore:     âœ” can be used relative to Firestore root
@firebase/firestore:     âœ” can be used relative to collection
@firebase/firestore:     âœ” can be used with multiple arguments
@firebase/firestore:     âœ” strips leading and trailing slashes
@firebase/firestore:     âœ” can be relative to doc
@firebase/firestore:     âœ” validates path
@firebase/firestore:     âœ” supports AutoId
@firebase/firestore:   collection
@firebase/firestore:     âœ” can be used relative to Firestore root
@firebase/firestore:     âœ” can be used relative to Firestore root with multiple arguments
@firebase/firestore:     âœ” can be used relative to collection
@firebase/firestore:     âœ” can be used relative to doc
@firebase/firestore:     âœ” can be used relative to collection with multiple arguments
@firebase/firestore:     âœ” validates path
@firebase/firestore:   parent
@firebase/firestore:     âœ” returns CollectionReferences for DocumentReferences
@firebase/firestore:     âœ” returns DocumentReferences for CollectionReferences
@firebase/firestore:     âœ” returns null for root collection
@firebase/firestore:   getDoc()
@firebase/firestore:     âœ” can get a non-existing document
@firebase/firestore:     âœ” can get an existing document
@firebase/firestore:   delete
@firebase/firestore:     âœ” can delete a non-existing document
@firebase/firestore:     âœ” can delete an existing document
@firebase/firestore:   set
@firebase/firestore:     âœ” can set a new document
@firebase/firestore:     âœ” can merge a document
@firebase/firestore:     âœ” can merge a document with mergeFields
@firebase/firestore:     âœ” supports partials with merge
@firebase/firestore:     âœ” supports partials with mergeFields
@firebase/firestore:     âœ” throws when user input fails validation
@firebase/firestore:     âœ” can ignore 'undefined'
@firebase/firestore:   update
@firebase/firestore:     âœ” can update a document
@firebase/firestore:     âœ” can update a document (using varargs)
@firebase/firestore: WARN: '[2025-03-04T23:04:25.941Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x2c48a089 failed with error: ', '{"code":"not-found","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/test-collection/zYsM3rlE4ZEMc0FFjCUI","fields":{"foo":{"integerValue":"2"},"baz":{"integerValue":"2"}}},"updateMask":{"fieldPaths":["baz","foo"]},"currentDocument":{"exists":true}}]}'
@firebase/firestore: WARN: '[2025-03-04T23:04:25.941Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x2c48a089 failed with error: ', '{"code":"not-found","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/test-collection/zYsM3rlE4ZEMc0FFjCUI","fields":{"foo":{"integerValue":"2"},"baz":{"integerValue":"2"}}},"updateMask":{"fieldPaths":["baz","foo"]},"currentDocument":{"exists":true}}]}'
@firebase/firestore:     âœ” enforces that document exists
@firebase/firestore:     âœ” throws when user input fails validation
@firebase/firestore:   WriteBatch
@firebase/firestore:     âœ” can add multiple operations
@firebase/firestore:     âœ” cannot add write after commit
@firebase/firestore:     delete
@firebase/firestore:       âœ” can delete a non-existing document
@firebase/firestore:       âœ” can delete an existing document
@firebase/firestore:     set
@firebase/firestore:       âœ” can set a new document
@firebase/firestore:       âœ” can merge a document
@firebase/firestore:       âœ” can merge a document with mergeFields
@firebase/firestore:       âœ” supports partials with merge
@firebase/firestore:       âœ” supports partials with mergeFields
@firebase/firestore:       âœ” throws when user input fails validation
@firebase/firestore:       âœ” can ignore 'undefined'
@firebase/firestore:     update
@firebase/firestore:       âœ” can update a document
@firebase/firestore:       âœ” can update a document (using varargs)
@firebase/firestore: WARN: '[2025-03-04T23:04:30.159Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x2c48a0a6 failed with error: ', '{"code":"not-found","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/test-collection/JwpDpkyMWP7c11LU6C18","fields":{"foo":{"integerValue":"2"},"baz":{"integerValue":"2"}}},"updateMask":{"fieldPaths":["baz","foo"]},"currentDocument":{"exists":true}}]}'
@firebase/firestore: WARN: '[2025-03-04T23:04:30.159Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x2c48a0a6 failed with error: ', '{"code":"not-found","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/test-collection/JwpDpkyMWP7c11LU6C18","fields":{"foo":{"integerValue":"2"},"baz":{"integerValue":"2"}}},"updateMask":{"fieldPaths":["baz","foo"]},"currentDocument":{"exists":true}}]}'
@firebase/firestore:       âœ” enforces that document exists
@firebase/firestore:       âœ” throws when user input fails validation
@firebase/firestore:   Transaction
@firebase/firestore:     âœ” can read and then write
@firebase/firestore:     âœ” can read non-existing doc then write
@firebase/firestore:     âœ” can read deleted doc then write
@firebase/firestore: WARN: '[2025-03-04T23:04:32.209Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x2c48a0b5 failed with error: ', '{"code":"aborted","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/test-collection/2ywtPcBJXPOba7ScIPB2","fields":{"counter":{"integerValue":"1"}}},"currentDocument":{"exists":false}}]}'
@firebase/firestore: WARN: '[2025-03-04T23:04:32.209Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x2c48a0b5 failed with error: ', '{"code":"aborted","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:commit', 'request:', '{"writes":[{"update":{"name":"projects/jscore-sandbox-141b5/databases/(default)/documents/test-collection/2ywtPcBJXPOba7ScIPB2","fields":{"counter":{"integerValue":"1"}}},"currentDocument":{"exists":false}}]}'
@firebase/firestore:     âœ” retries when document is modified
@firebase/firestore:     delete
@firebase/firestore:       âœ” can delete a non-existing document
@firebase/firestore:       âœ” can delete an existing document
@firebase/firestore:     set
@firebase/firestore:       âœ” can set a new document
@firebase/firestore:       âœ” can merge a document
@firebase/firestore:       âœ” can merge a document with mergeFields
@firebase/firestore:       âœ” supports partials with merge
@firebase/firestore:       âœ” supports partials with mergeFields
@firebase/firestore:       âœ” throws when user input fails validation
@firebase/firestore:       âœ” can ignore 'undefined'
@firebase/firestore:     update
@firebase/firestore:       âœ” can update a document
@firebase/firestore:       âœ” can update a document (using varargs)
@firebase/firestore:       âœ– enforces that document exists (skipped)
@firebase/firestore:       âœ” throws when user input fails validation
@firebase/firestore:   addDoc()
@firebase/firestore:     âœ” can add a document
@firebase/firestore:     âœ” throws when user input fails validation
@firebase/firestore:   DocumentSnapshot
@firebase/firestore:     âœ” can represent missing data
@firebase/firestore:     âœ” can return data
@firebase/firestore:     âœ” can return single field
@firebase/firestore:     âœ” can return nested field
@firebase/firestore:     âœ” is properly typed
@firebase/firestore:     âœ” returns Bytes
@firebase/firestore:   deleteDoc()
@firebase/firestore:     âœ” can delete a non-existing document
@firebase/firestore:   FieldValue
@firebase/firestore:     âœ” support equality checking with isEqual()
@firebase/firestore:     âœ” support instanceof checks
@firebase/firestore:     âœ” can apply arrayUnion
@firebase/firestore:     âœ” can apply arrayRemove
@firebase/firestore:     âœ” can apply serverTimestamp
@firebase/firestore:     âœ” can delete field
@firebase/firestore:   Query
@firebase/firestore:     âœ” supports default query
@firebase/firestore:     âœ” supports empty results
@firebase/firestore:     âœ” supports filtered query
@firebase/firestore:     âœ” supports filtered query (with FieldPath)
@firebase/firestore:     âœ” supports ordered query (with default order)
@firebase/firestore:     âœ” supports ordered query (with asc)
@firebase/firestore:     âœ” supports ordered query (with desc)
@firebase/firestore:     âœ” supports limit query
@firebase/firestore:     âœ” supports limitToLast query
@firebase/firestore:     âœ” supports startAt
@firebase/firestore:     âœ” supports startAfter
@firebase/firestore:     âœ” supports endAt
@firebase/firestore:     âœ” supports endBefore
@firebase/firestore:     âœ” supports pagination
@firebase/firestore:     âœ” supports collection groups
@firebase/firestore:     âœ” validates collection groups
@firebase/firestore:     âœ” supports query over collection path with special characters
@firebase/firestore:   equality
@firebase/firestore:     âœ” for collection references
@firebase/firestore:     âœ” for document references
@firebase/firestore:     âœ” for queries
@firebase/firestore:     âœ” for query snapshots
@firebase/firestore:     âœ” for document snapshots
@firebase/firestore:   withConverter() support
@firebase/firestore:     âœ” for DocumentReference.withConverter()
@firebase/firestore:     âœ” for DocumentReference.withConverter(null) applies default converter
@firebase/firestore:     âœ” for CollectionReference.withConverter()
@firebase/firestore:     âœ” for CollectionReference.withConverter(null) applies default converter
@firebase/firestore:     âœ” for Query.withConverter()
@firebase/firestore:     âœ” for Query.withConverter(null) applies default converter
@firebase/firestore:     âœ” keeps the converter when calling parent() with a DocumentReference
@firebase/firestore:     âœ” drops the converter when calling parent() with a CollectionReference
@firebase/firestore:     âœ” checks converter when comparing with isEqual()
@firebase/firestore:     âœ” requires the correct converter for Partial usage
@firebase/firestore:     âœ” supports primitive types with valid converter
@firebase/firestore:     types test
@firebase/firestore:       nested partial support
@firebase/firestore:         âœ” supports FieldValues
@firebase/firestore:         âœ” validates types in outer and inner fields
@firebase/firestore:         âœ” checks for nonexistent properties
@firebase/firestore:         âœ” allows omitting fields
@firebase/firestore:       WithFieldValue
@firebase/firestore:         âœ” supports FieldValues
@firebase/firestore:         âœ” requires all outer fields to be present
@firebase/firestore:         âœ” requires all nested fields to be present
@firebase/firestore:         âœ” validates inner and outer fields
@firebase/firestore:         âœ” checks for nonexistent properties
@firebase/firestore:         âœ” allows certain types but not others
@firebase/firestore:         used as a type
@firebase/firestore:           âœ” supports passing in the object as `T`
@firebase/firestore:           âœ” does not allow primitive types to use FieldValue
@firebase/firestore:       UpdateData
@firebase/firestore:         âœ” supports FieldValues
@firebase/firestore:         âœ” validates inner and outer fields
@firebase/firestore:         âœ” supports string-separated fields
@firebase/firestore:         âœ” supports optional fields
@firebase/firestore:         âœ” supports null fields
@firebase/firestore:         âœ” supports union fields
@firebase/firestore:         âœ” checks for nonexistent fields
@firebase/firestore:       methods
@firebase/firestore:         âœ” addDoc()
@firebase/firestore:         âœ” WriteBatch.set()
@firebase/firestore:         âœ” WriteBatch.update()
@firebase/firestore:         âœ” Transaction.set()
@firebase/firestore:         âœ” Transaction.update()
@firebase/firestore:   Count queries
@firebase/firestore:     âœ” AggregateQuerySnapshot inherits the original query
@firebase/firestore:     âœ” can run count query getCount with special chars in the document path: so!@#$%^&*()_+special/sub
@firebase/firestore:     âœ” can run count query getCount with special chars in the document path: b1/so!@#$%^&*()_+special
@firebase/firestore:     âœ” run count query on empty collection
@firebase/firestore:     âœ” run count query on collection with 3 docs
@firebase/firestore: WARN: '[2025-03-04T23:04:56.010Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'RunAggregationQuery' 0x2c48a171 failed with error: ', '{"code":"failed-precondition","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:runAggregationQuery', 'request:', '{"structuredAggregationQuery":{"aggregations":[{"alias":"aggregate_0","count":{}}],"structuredQuery":{"from":[{"collectionId":"__badpath__"}]}}}'
@firebase/firestore: WARN: '[2025-03-04T23:04:56.010Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'RunAggregationQuery' 0x2c48a171 failed with error: ', '{"code":"failed-precondition","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:runAggregationQuery', 'request:', '{"structuredAggregationQuery":{"aggregations":[{"alias":"aggregate_0","count":{}}],"structuredQuery":{"from":[{"collectionId":"__badpath__"}]}}}'
@firebase/firestore:     âœ” run count query fails on invalid collection reference
@firebase/firestore:     âœ” count query supports filter
@firebase/firestore:     âœ” count query supports filter and a small limit size
@firebase/firestore:     âœ” count query supports filter and a large limit size
@firebase/firestore:     âœ” count query supports order by
@firebase/firestore:     âœ” count query supports order by and startAt
@firebase/firestore:     âœ” count query supports order by and startAfter
@firebase/firestore:     âœ” count query supports order by and endAt
@firebase/firestore:     âœ” count query supports order by and endBefore
@firebase/firestore:     âœ” count query doesn't use converter
@firebase/firestore:     âœ” count query supports collection groups
@firebase/firestore:     âœ” aggregateQuerySnapshotEqual on same queries be truthy
@firebase/firestore:     âœ” aggregateQuerySnapshotEqual on same queries with different documents size be falsy
@firebase/firestore:     âœ” aggregateQuerySnapshotEqual on different queries be falsy
@firebase/firestore:     âœ” count query fails on a terminated Firestore
@firebase/firestore:     âœ” terminate Firestore not effect count query in flight
@firebase/firestore: WARN: '[2025-03-04T23:05:03.423Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'RunAggregationQuery' 0x2c48a1b4 failed with error: ', '{"code":"failed-precondition","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:runAggregationQuery', 'request:', '{"structuredAggregationQuery":{"aggregations":[{"alias":"aggregate_0","count":{}}],"structuredQuery":{"from":[{"collectionId":"EbklJXkUERtw2hupuaj9"}],"where":{"compositeFilter":{"op":"AND","filters":[{"fieldFilter":{"field":{"fieldPath":"key1"},"op":"EQUAL","value":{"integerValue":"42"}}},{"fieldFilter":{"field":{"fieldPath":"key2"},"op":"LESS_THAN","value":{"integerValue":"42"}}}]}}}}}'
@firebase/firestore: WARN: '[2025-03-04T23:05:03.423Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'RunAggregationQuery' 0x2c48a1b4 failed with error: ', '{"code":"failed-precondition","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:runAggregationQuery', 'request:', '{"structuredAggregationQuery":{"aggregations":[{"alias":"aggregate_0","count":{}}],"structuredQuery":{"from":[{"collectionId":"EbklJXkUERtw2hupuaj9"}],"where":{"compositeFilter":{"op":"AND","filters":[{"fieldFilter":{"field":{"fieldPath":"key1"},"op":"EQUAL","value":{"integerValue":"42"}}},{"fieldFilter":{"field":{"fieldPath":"key2"},"op":"LESS_THAN","value":{"integerValue":"42"}}}]}}}}}'
@firebase/firestore:     âœ” getCount error message contains console link if missing index
@firebase/firestore:   Aggregate queries
@firebase/firestore:     âœ” AggregateQuerySnapshot inherits the original query
@firebase/firestore:     âœ” run aggregate query on empty collection
@firebase/firestore:     âœ” run aggregate query on collection with 3 docs
@firebase/firestore:     âœ” run aggregate query with duplicate aggregates
@firebase/firestore: WARN: '[2025-03-04T23:05:04.585Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'RunAggregationQuery' 0x2c48a1bf failed with error: ', '{"code":"failed-precondition","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:runAggregationQuery', 'request:', '{"structuredAggregationQuery":{"aggregations":[{"alias":"aggregate_0","count":{}}],"structuredQuery":{"from":[{"collectionId":"__badpath__"}]}}}'
@firebase/firestore: WARN: '[2025-03-04T23:05:04.585Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'RunAggregationQuery' 0x2c48a1bf failed with error: ', '{"code":"failed-precondition","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:runAggregationQuery', 'request:', '{"structuredAggregationQuery":{"aggregations":[{"alias":"aggregate_0","count":{}}],"structuredQuery":{"from":[{"collectionId":"__badpath__"}]}}}'
@firebase/firestore:     âœ” run aggregate query fails on invalid collection reference
@firebase/firestore:     âœ” aggregate query supports filter
@firebase/firestore:     âœ” aggregate query supports filter and a small limit size
@firebase/firestore:     âœ” aggregate query supports filter and a large limit size
@firebase/firestore:     âœ” aggregate query supports order by
@firebase/firestore:     âœ” aggregate query supports order by and startAt
@firebase/firestore:     âœ” aggregate query supports order by and startAfter
@firebase/firestore:     âœ” aggregate query supports order by and endAt
@firebase/firestore:     âœ” aggregate query supports order by and endBefore
@firebase/firestore:     âœ” aggregate query doesn't use converter
@firebase/firestore:     âœ” aggregate query supports collection groups
@firebase/firestore:     âœ” aggregateQuerySnapshotEqual on same queries be truthy
@firebase/firestore:     âœ” aggregateQuerySnapshotEqual on same queries with different documents size be falsy
@firebase/firestore:     âœ” aggregateQuerySnapshotEqual on different queries be falsy
@firebase/firestore:     âœ” aggregate query fails on a terminated Firestore
@firebase/firestore:     âœ” terminate Firestore not effect aggregate query in flight
@firebase/firestore: WARN: '[2025-03-04T23:05:11.970Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'RunAggregationQuery' 0x2c48a202 failed with error: ', '{"code":"failed-precondition","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:runAggregationQuery', 'request:', '{"structuredAggregationQuery":{"aggregations":[{"alias":"aggregate_0","count":{}}],"structuredQuery":{"from":[{"collectionId":"Logx2Vp8weliI2lovaqo"}],"where":{"compositeFilter":{"op":"AND","filters":[{"fieldFilter":{"field":{"fieldPath":"key1"},"op":"EQUAL","value":{"integerValue":"42"}}},{"fieldFilter":{"field":{"fieldPath":"key2"},"op":"LESS_THAN","value":{"integerValue":"42"}}}]}}}}}'
@firebase/firestore: WARN: '[2025-03-04T23:05:11.970Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'RunAggregationQuery' 0x2c48a202 failed with error: ', '{"code":"failed-precondition","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:runAggregationQuery', 'request:', '{"structuredAggregationQuery":{"aggregations":[{"alias":"aggregate_0","count":{}}],"structuredQuery":{"from":[{"collectionId":"Logx2Vp8weliI2lovaqo"}],"where":{"compositeFilter":{"op":"AND","filters":[{"fieldFilter":{"field":{"fieldPath":"key1"},"op":"EQUAL","value":{"integerValue":"42"}}},{"fieldFilter":{"field":{"fieldPath":"key2"},"op":"LESS_THAN","value":{"integerValue":"42"}}}]}}}}}'
@firebase/firestore:     âœ” getAggregate error message contains console link if missing index
@firebase/firestore:   Aggregate queries - sum / average
@firebase/firestore:     âœ” aggregateQuerySnapshotEqual on different aggregations to be falsy
@firebase/firestore:     âœ” aggregateQuerySnapshotEqual on same aggregations with different aliases to be falsy
@firebase/firestore:     âœ” aggregateQuerySnapshotEqual on same aggregations with same aliases to be truthy
@firebase/firestore:     âœ” can run sum query getAggregationFromServer
@firebase/firestore:     âœ” can run average query getAggregationFromServer
@firebase/firestore:     âœ” can get multiple aggregations using getAggregationFromServer
@firebase/firestore: WARN: '[2025-03-04T23:05:15.196Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'RunAggregationQuery' 0x2c48a220 failed with error: ', '{"code":"failed-precondition","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:runAggregationQuery', 'request:', '{"structuredAggregationQuery":{"aggregations":[{"alias":"aggregate_0","sum":{"field":{"fieldPath":"pages"}}},{"alias":"aggregate_1","avg":{"field":{"fieldPath":"pages"}}},{"alias":"aggregate_2","count":{}},{"alias":"aggregate_3","sum":{"field":{"fieldPath":"pages"}}},{"alias":"aggregate_4","avg":{"field":{"fieldPath":"pages"}}},{"alias":"aggregate_5","count":{}}],"structuredQuery":{"from":[{"collectionId":"CUvKLtiwbPDggol4l2D2"}]}}}'
@firebase/firestore: WARN: '[2025-03-04T23:05:15.196Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'RunAggregationQuery' 0x2c48a220 failed with error: ', '{"code":"failed-precondition","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/(default)/documents:runAggregationQuery', 'request:', '{"structuredAggregationQuery":{"aggregations":[{"alias":"aggregate_0","sum":{"field":{"fieldPath":"pages"}}},{"alias":"aggregate_1","avg":{"field":{"fieldPath":"pages"}}},{"alias":"aggregate_2","count":{}},{"alias":"aggregate_3","sum":{"field":{"fieldPath":"pages"}}},{"alias":"aggregate_4","avg":{"field":{"fieldPath":"pages"}}},{"alias":"aggregate_5","count":{}}],"structuredQuery":{"from":[{"collectionId":"CUvKLtiwbPDggol4l2D2"}]}}}'
@firebase/firestore:     âœ” fails when exceeding the max (5) aggregations using getAggregationFromServer
@firebase/firestore:     (Persistence=memory_lru_gc) queries requiring indexes
@firebase/firestore:       âœ– performs aggregations on documents with all aggregated fields using getAggregationFromServer (skipped)
@firebase/firestore:     (Persistence=indexeddb) queries requiring indexes
@firebase/firestore:       âœ– performs aggregations on documents with all aggregated fields using getAggregationFromServer (skipped)
@firebase/firestore:   Vectors
@firebase/firestore:     âœ” can be read and written using the lite SDK
@firebase/firestore: Finished in 55.626 secs / 55.414 secs @ 15:05:15 GMT-0800 (Pacific Standard Time)
@firebase/firestore: SUMMARY:
@firebase/firestore: âœ” 193 tests completed
@firebase/firestore: â„¹ 3 tests skipped
@firebase/firestore: TOTAL: 193 SUCCESS
@firebase/firestore: > @firebase/firestore@4.7.9 test:browser:prod:nameddb
@firebase/firestore: > karma start --targetBackend=prod --databaseId=test-db
@firebase/firestore: The 'BROWSER' environment variable is undefined. Defaulting to 'ChromeHeadless'.
@firebase/firestore: START:
@firebase/firestore: Webpack bundling...
@firebase/firestore: assets by path [1m[32m../../../../../../Users/chholland/repos/fb-FRESH/packages/firestore/dist/firestore/src/[39m[22m 842 KiB 259 assets
@firebase/firestore: assets by path [1m[32m../../../../../../Users/chholland/repos/fb-FRESH/packages/firestore/dist/firestore/test/[39m[22m 171 KiB
@firebase/firestore:   assets by path [1m[32m../../../../../../Users/chholland/repos/fb-FRESH/packages/firestore/dist/firestore/test/unit/[39m[22m 109 KiB 102 assets
@firebase/firestore:   assets by path [1m[32m../../../../../../Users/chholland/repos/fb-FRESH/packages/firestore/dist/firestore/test/integration/[39m[22m 37.5 KiB 37 assets
@firebase/firestore:   assets by path [1m[32m../../../../../../Users/chholland/repos/fb-FRESH/packages/firestore/dist/firestore/test/util/*.ts[39m[22m 19.7 KiB 7 assets
@firebase/firestore:   assets by path [1m[32m../../../../../../Users/chholland/repos/fb-FRESH/packages/firestore/dist/firestore/test/lite/*.ts[39m[22m 3.43 KiB
@firebase/firestore:     asset [1m[32m../../../../../../Users/chholland/repos/fb-FRESH/packages/firestore/dist/firestore/test/lite/helpers.d.ts[39m[22m 2.23 KiB [1m[33m[compared for emit][39m[22m
@firebase/firestore:     + 2 assets
@firebase/firestore:   asset [1m[32m../../../../../../Users/chholland/repos/fb-FRESH/packages/firestore/dist/firestore/test/register.d.ts[39m[22m 616 bytes [1m[33m[compared for emit][39m[22m
@firebase/firestore: assets by status 17.9 MiB [1m[32m[emitted][39m[22m
@firebase/firestore:   asset [1m[32mbootstrap.430169083.js[39m[22m 10.1 MiB [1m[32m[emitted][39m[22m (name: bootstrap.430169083) 1 related asset
@firebase/firestore:   asset [1m[32mbootstrap.2569352933.js[39m[22m 7.78 MiB [1m[32m[emitted][39m[22m (name: bootstrap.2569352933) 1 related asset
@firebase/firestore: assets by path [1m[32m../../../../../../Users/chholland/repos/fb-FRESH/packages/firestore/dist/firestore/lite/*.ts[39m[22m 3.38 KiB
@firebase/firestore:   asset [1m[32m../../../../../../Users/chholland/repos/fb-FRESH/packages/firestore/dist/firestore/lite/index.d.ts[39m[22m 2.57 KiB [1m[33m[compared for emit][39m[22m
@firebase/firestore:   asset [1m[32m../../../../../../Users/chholland/repos/fb-FRESH/packages/firestore/dist/firestore/lite/register.d.ts[39m[22m 829 bytes [1m[33m[compared for emit][39m[22m
@firebase/firestore: webpack 5.97.1 compiled [1m[32msuccessfully[39m[22m in 8646 ms
@firebase/firestore: [33m04 03 2025 15:05:25.531:WARN [preprocessor.sourcemap]: [39mmissing external source map for /Users/chholland/repos/fb-FRESH/packages/firestore/test/integration/bootstrap.ts
@firebase/firestore: [33m04 03 2025 15:05:25.538:WARN [preprocessor.sourcemap]: [39mmissing external source map for /Users/chholland/repos/fb-FRESH/packages/firestore/test/unit/bootstrap.ts
@firebase/firestore: [33m04 03 2025 15:05:25.553:WARN [preprocessor.sourcemap]: [39mmissing external source map for /Users/chholland/repos/fb-FRESH/packages/firestore/test/unit/bootstrap.ts
@firebase/firestore: [33m04 03 2025 15:05:25.560:WARN [preprocessor.sourcemap]: [39mmissing external source map for /Users/chholland/repos/fb-FRESH/packages/firestore/test/integration/bootstrap.ts
@firebase/firestore: [32m04 03 2025 15:05:25.568:INFO [karma-server]: [39mKarma v6.4.4 server started at http://localhost:8089/
@firebase/firestore: [32m04 03 2025 15:05:25.568:INFO [launcher]: [39mLaunching browsers ChromeHeadless with concurrency 1
@firebase/firestore: [32m04 03 2025 15:05:25.570:INFO [launcher]: [39mStarting browser ChromeHeadless
@firebase/firestore: [32m04 03 2025 15:05:26.214:INFO [Chrome Headless 133.0.0.0 (Mac OS 10.15.7)]: [39mConnected on socket MhA-J7CD56_zwAw-AAAB with id 60461609
@firebase/firestore: Chrome Headless 133.0.0.0 (Mac OS 10.15.7) LOG: 'Default Settings: {"host":"firestore.googleapis.com","ssl":true}'
@firebase/firestore: Chrome Headless 133.0.0.0 (Mac OS 10.15.7) LOG: 'Default Settings: {"host":"firestore.googleapis.com","ssl":true}'
@firebase/firestore: Chrome Headless 133.0.0.0 (Mac OS 10.15.7) LOG: 'Default DatabaseId: "test-db"'
@firebase/firestore: Chrome Headless 133.0.0.0 (Mac OS 10.15.7) LOG: 'Default DatabaseId: "test-db"'
@firebase/firestore:   âœ” token is not invalidated once the stream is healthy
@firebase/firestore:   aggregateFieldEqual
@firebase/firestore:     âœ” equates two equal aggregate fields
@firebase/firestore:     âœ” differentiates two different aggregate fields
@firebase/firestore:   Bytes
@firebase/firestore:     âœ” constructs values from Base64
@firebase/firestore:     âœ” constructs values from Uint8Array
@firebase/firestore:     âœ” works with instanceof checks
@firebase/firestore:     âœ” support equality checking with isEqual()
@firebase/firestore:   CollectionReference
@firebase/firestore:     âœ” support equality checking with isEqual()
@firebase/firestore:     âœ” JSON.stringify() does not throw
@firebase/firestore:   DocumentReference
@firebase/firestore:     âœ” support equality checking with isEqual()
@firebase/firestore:     âœ” JSON.stringify() does not throw
@firebase/firestore:   DocumentSnapshot
@firebase/firestore:     âœ” support equality checking with isEqual()
@firebase/firestore:     âœ” JSON.stringify() does not throw
@firebase/firestore:   Query
@firebase/firestore:     âœ” support equality checking with isEqual()
@firebase/firestore:     âœ” JSON.stringify() does not throw
@firebase/firestore:   QuerySnapshot
@firebase/firestore:     âœ” support equality checking with isEqual()
@firebase/firestore:     âœ” JSON.stringify() does not throw
@firebase/firestore:   SnapshotMetadata
@firebase/firestore:     âœ” from DocumentSnapshot support equality checking with isEqual()
@firebase/firestore:     âœ” from QuerySnapshot support equality checking with isEqual()
@firebase/firestore:   Settings
@firebase/firestore:     âœ” cannot use mutually exclusive settings together
@firebase/firestore:     âœ” long polling should be in auto-detect mode by default
@firebase/firestore:     âœ” long polling should be in force mode if force=true
@firebase/firestore:     âœ” long polling should be in auto-detect mode if autoDetect=true
@firebase/firestore:     âœ” long polling should be in auto-detect mode if force=false
@firebase/firestore:     âœ” long polling should be disabled if autoDetect=false
@firebase/firestore:     âœ” long polling should be in auto-detect mode if autoDetect=true and force=false
@firebase/firestore:     âœ” long polling should be in force mode if autoDetect=false and force=true
@firebase/firestore:     âœ” long polling should be disabled if autoDetect=false and force=false
@firebase/firestore:     âœ” timeoutSeconds is undefined by default
@firebase/firestore:     âœ” timeoutSeconds minimum value is allowed
@firebase/firestore:     âœ” timeoutSeconds maximum value is allowed
@firebase/firestore:     âœ” timeoutSeconds typical value is allowed
@firebase/firestore:     âœ” timeoutSeconds floating point value is allowed
@firebase/firestore:     âœ” timeoutSeconds value one less than minimum throws
@firebase/firestore:     âœ” timeoutSeconds value one more than maximum throws
@firebase/firestore:     âœ” timeoutSeconds value of 0 throws
@firebase/firestore:     âœ” timeoutSeconds value of -0 throws
@firebase/firestore:     âœ” timeoutSeconds value of -1 throws
@firebase/firestore:     âœ” timeoutSeconds value of -infinity throws
@firebase/firestore:     âœ” timeoutSeconds value of +infinity throws
@firebase/firestore:     âœ” timeoutSeconds value of NaN throws
@firebase/firestore:     âœ” long polling autoDetect=[something truthy] should be coerced to true
@firebase/firestore:     âœ” long polling autoDetect=[something falsy] should be coerced to false
@firebase/firestore:     âœ” long polling autoDetect=null should be coerced to false
@firebase/firestore:     âœ” long polling force=[something truthy] should be coerced to true
@firebase/firestore:     âœ” long polling force=[something falsy] should be coerced to false
@firebase/firestore:     âœ” long polling force=null should be coerced to false
@firebase/firestore:     âœ” gets settings from useEmulator
@firebase/firestore:     âœ” gets privateSettings from useEmulator
@firebase/firestore: WARN: '[2025-03-04T23:05:27.194Z]  @firebase/firestore:', 'Firestore (11.3.0): Host has been set in both settings() and connectFirestoreEmulator(), emulator host will be used.'
@firebase/firestore: WARN: '[2025-03-04T23:05:27.194Z]  @firebase/firestore:', 'Firestore (11.3.0): Host has been set in both settings() and connectFirestoreEmulator(), emulator host will be used.'
@firebase/firestore:     âœ” prefers host from useEmulator to host from settings
@firebase/firestore:     âœ” sets credentials based on mockUserToken object
@firebase/firestore:     âœ” sets credentials based on mockUserToken string
@firebase/firestore:   DocumentChange:
@firebase/firestore:     âœ” positions are correct for additions
@firebase/firestore:     âœ” positions are correct for deletions
@firebase/firestore:     âœ” positions are correct for modifications
@firebase/firestore:     âœ” positions are correct for sort order changes
@firebase/firestore:     âœ” positions are correct for randomly chosen examples
@firebase/firestore:   FieldPath
@firebase/firestore:     âœ” support equality checking with isEqual()
@firebase/firestore:   FieldValue
@firebase/firestore:     âœ” support equality checking with isEqual()
@firebase/firestore:     âœ” support instanceof checks
@firebase/firestore:     âœ” JSON.stringify() does not throw
@firebase/firestore:   GeoPoint
@firebase/firestore:     âœ” constructs values
@firebase/firestore:     âœ” GeoPoints throw on invalid values
@firebase/firestore:     âœ” compares correctly
@firebase/firestore:     âœ” support equality checking with isEqual()
@firebase/firestore:     âœ” serializes to JSON
@firebase/firestore:   long_polling_options
@firebase/firestore:     âœ” longPollingOptionsEqual() should return true for empty objects
@firebase/firestore:     âœ” longPollingOptionsEqual() should return true if both objects have the same timeoutSeconds
@firebase/firestore:     âœ” longPollingOptionsEqual() should return false if the objects have different timeoutSeconds
@firebase/firestore:     âœ” longPollingOptionsEqual() should ignore properties not defined in ExperimentalLongPollingOptions
@firebase/firestore:     âœ” cloneLongPollingOptions() with an empty object should return an empty object
@firebase/firestore:     âœ” cloneLongPollingOptions() should copy timeoutSeconds
@firebase/firestore:     âœ” cloneLongPollingOptions() should not copy properties not defined in ExperimentalLongPollingOptions
@firebase/firestore:   Timestamp
@firebase/firestore:     âœ” constructor should validate the "seconds" argument and store it
@firebase/firestore:     âœ” constructor should validate the "nanoseconds" argument and store it
@firebase/firestore:     âœ” fromDate
@firebase/firestore:     âœ” valueOf
@firebase/firestore:     âœ” arithmetic comparison of a Timestamp object to itself
@firebase/firestore:     âœ” arithmetic comparison of equivalent, but distinct, Timestamp objects
@firebase/firestore:     âœ” arithmetic comparison of Timestamp objects whose nanoseconds differ
@firebase/firestore:     âœ” arithmetic comparison of Timestamp objects whose seconds differ
@firebase/firestore:     âœ” arithmetic comparison of the smallest and largest Timestamp objects
@firebase/firestore:     âœ” handles decimal inputs in fromMillis()
@firebase/firestore:     âœ” serializes to JSON
@firebase/firestore:   EventManager
@firebase/firestore:     âœ” handles many listenables per query
@firebase/firestore:     âœ” handles unlisten on unknown listenable gracefully
@firebase/firestore:     âœ” notifies listenables in the right order
@firebase/firestore:     âœ” will forward onOnlineStateChange calls
@firebase/firestore:   QueryListener
@firebase/firestore:     âœ” raises collection events
@firebase/firestore:     âœ” raises error event
@firebase/firestore:     âœ” raises event for empty collection after sync
@firebase/firestore:     âœ” raises 'hasPendingWrites' for pending mutation in initial snapshot
@firebase/firestore:     âœ” doesn't raise 'hasPendingWrites' for committed mutation in initial snapshot
@firebase/firestore:     âœ” does not raise events for metadata changes unless specified
@firebase/firestore:     âœ” raises metadata events only when specified
@firebase/firestore:     âœ” Metadata-only document changes are filtered out when includeMetadataChanges is false
@firebase/firestore:     âœ” Suppresses write acknowledgment if Watch hasn't caught up
@firebase/firestore:     âœ” Will wait for sync if online
@firebase/firestore:     âœ” Will raise initial event when going offline
@firebase/firestore:     âœ” Will raise initial event when going offline and there are no docs
@firebase/firestore:     âœ” Will raise initial event when offline and there are no docs
@firebase/firestore:   FieldFilter
@firebase/firestore:     âœ” exposes field filter members
@firebase/firestore:   CompositeFilter
@firebase/firestore:     âœ” exposes composite filter members for AND filter
@firebase/firestore:     âœ” exposes composite filter members for OR filter
@firebase/firestore:     âœ” has working composite filter nested checks
@firebase/firestore:     âœ” computes canonical id of flat conjunctions
@firebase/firestore:   ListenSequence
@firebase/firestore:     âœ” writes the new sequence number to the syncer
@firebase/firestore:     âœ” bumps the next value based on notifications from the syncer
@firebase/firestore:   Bound
@firebase/firestore:     âœ” implements isEqual
@firebase/firestore:     âœ” can get collection group
@firebase/firestore:     âœ” matches based on document key
@firebase/firestore:     âœ” matches correctly for shallow ancestor query
@firebase/firestore:     âœ” matches primitive values for filters
@firebase/firestore:     âœ” matches array-contains filters
@firebase/firestore:     âœ” matches array-contains filters with object values
@firebase/firestore:     âœ” matches IN filters
@firebase/firestore:     âœ” matches IN filters with object values
@firebase/firestore:     âœ” matches not-in filters
@firebase/firestore:     âœ” matches not-in filters with object values
@firebase/firestore:     âœ” matches array-contains-any filters
@firebase/firestore:     âœ” matches array-contains-any filters with object values
@firebase/firestore:     âœ” matches NaN for filters
@firebase/firestore:     âœ” matches null for filters
@firebase/firestore:     âœ” matches complex objects for filters
@firebase/firestore:     âœ” doesn't crash querying unset fields
@firebase/firestore:     âœ” doesn't remove complex objects with orderBy
@firebase/firestore:     âœ” filters based on array value
@firebase/firestore:     âœ” filters based on object value
@firebase/firestore:     âœ” sorts documents in the correct order
@firebase/firestore:     âœ” sorts documents using multiple fields
@firebase/firestore:     âœ” sorts documents with descending too
@firebase/firestore:     âœ” generates canonical ids
@firebase/firestore:     âœ” canonical ids are stable
@firebase/firestore:     âœ” generates the correct implicit order by's
@firebase/firestore:     âœ” generates the correct implicit order by's for multiple inequality
@firebase/firestore:     âœ” matchesAllDocuments() considers filters, orders and bounds
@firebase/firestore:     âœ” matches composite queries
@firebase/firestore:     âœ” matches composite queries with multiple inequality
@firebase/firestore:     âœ” generates appropriate order-bys for aggregate and non-aggregate targets
@firebase/firestore:     âœ” generated order-bys are not affected by previously memoized targets
@firebase/firestore:   View
@firebase/firestore:     âœ” adds documents based on query
@firebase/firestore:     âœ” removes documents
@firebase/firestore:     âœ” returns null if there are no changes
@firebase/firestore:     âœ” does not return null for the first changes
@firebase/firestore:     âœ” filters documents based on query with filter
@firebase/firestore:     âœ” updates documents based on query with filter
@firebase/firestore:     âœ” removes documents for query with limit
@firebase/firestore:     âœ” doesn't report changes for documents beyond limit of query
@firebase/firestore:     âœ” keeps track of limbo documents
@firebase/firestore:     âœ” is marked from cache with limbo documents
@firebase/firestore:     âœ” resumes queries without creating limbo documents
@firebase/firestore:     âœ” returns needsRefill on delete limit query
@firebase/firestore:     âœ” returns needsRefill on reorder in limit query
@firebase/firestore:     âœ” doesn't need refill on reorder within limit
@firebase/firestore:     âœ” doesn't need refill on reorder after limit query
@firebase/firestore:     âœ” doesn't need refill for additions after the limit
@firebase/firestore:     âœ” doesn't need refill for deletions when not near the limit
@firebase/firestore:     âœ” handles applying irrelevant docs
@firebase/firestore:     âœ” computes mutatedDocKeys
@firebase/firestore:     âœ” computes removes keys from mutatedDocKeys when new doc does not have local changes
@firebase/firestore:     âœ” remembers local mutations from previous snapshot
@firebase/firestore:     âœ” remembers local mutations from previous call to computeDocChanges
@firebase/firestore:   Md5
@firebase/firestore:     âœ” constructor should create distinct instances
@firebase/firestore:     âœ” update() should accept a string
@firebase/firestore:     âœ” update() should accept a string of non-standard characters
@firebase/firestore:     âœ” update() should accept a string of UTF-8 encoded non-standard characters 
@firebase/firestore:     âœ” update() should accept an array of number
@firebase/firestore:     âœ” update() should accept a Uint8Array
@firebase/firestore:     âœ” update() should honor opt_length on a string
@firebase/firestore:     âœ” update() should honor opt_length on an array of number
@firebase/firestore:     âœ” update() should honor opt_length on a Uint8Array
@firebase/firestore:     âœ” reset() should reset
@firebase/firestore:   Integer
@firebase/firestore:     âœ” constructor should create distinct instances
@firebase/firestore:     âœ” constructor should construct 1 and -1, 2 and -2
@firebase/firestore:     âœ” constructor should construct big positive values
@firebase/firestore:     âœ” constructor should construct big negative values
@firebase/firestore:     âœ” add() should produce the sum of the two numbers
@firebase/firestore:     âœ” multiply() should produce the product of the two numbers
@firebase/firestore:     âœ” modulo() should produce the division remainder of the two numbers
@firebase/firestore:     âœ” compare() should correctly compare two numbers for order
@firebase/firestore:     âœ” toNumber() should return the correct number
@firebase/firestore:     âœ” toString() should return the correct number
@firebase/firestore:     âœ” fromNumber() create a new Integer with the given value
@firebase/firestore:     âœ” fromString() create a new Integer with the given value
@firebase/firestore:     âœ” getBits() create a new Integer with the given value
@firebase/firestore:   Ordered Code Writer
@firebase/firestore:     âœ” computes number of leading zeros
@firebase/firestore:     âœ” converts numbers to bits
@firebase/firestore:     âœ” orders numbers correctly
@firebase/firestore:     âœ” converts strings to bits
@firebase/firestore:     âœ” orders strings correctly
@firebase/firestore:     âœ” converts bytes to bits
@firebase/firestore:     âœ” orders bytes correctly
@firebase/firestore:     âœ” encodes infinity
@firebase/firestore:     âœ” seeds bytes
@firebase/firestore:   Firestore Index Value Writer
@firebase/firestore:     can gracefully handle different format of timestamp
@firebase/firestore:       âœ” can handle different format of timestamp
@firebase/firestore:       âœ” can handle timestamps with 0 nanoseconds
@firebase/firestore:       âœ” can compare timestamps with  different formats
@firebase/firestore:       âœ” sorts vector as a different type from array and map, with unique rules
@firebase/firestore:   UpdateData - v9
@firebase/firestore:     âœ” Supports properties with primitive types
@firebase/firestore:     âœ” Supports properties with custom types
@firebase/firestore:     given properties with dots
@firebase/firestore:       âœ” preserves the value type
@firebase/firestore:       âœ” does not allow matching a sub-string|path
@firebase/firestore:     given nested objects without index properties
@firebase/firestore:       âœ” supports object replacement at each layer (with partial)
@firebase/firestore:       âœ” errors for unexpected value types at each layer
@firebase/firestore:       âœ” does not allow properties that were not on the original type
@firebase/firestore:       âœ” preserves value types for dot notation
@firebase/firestore:     given nested objects with index properties
@firebase/firestore:       âœ” supports object replacement at each layer (with partial)
@firebase/firestore:       âœ” errors for unexpected value types at each layer
@firebase/firestore:       âœ” does not allow properties that were not on the original type
@firebase/firestore:       âœ” preserves value types for dot notation
@firebase/firestore:     UpdateData - v10
@firebase/firestore:       given nested objects with index properties
@firebase/firestore:         âœ” supports object replacement at each layer (with partial)
@firebase/firestore:         âœ” allows dot notation for nested index types
@firebase/firestore:         âœ” allows dot notation for nested index types that are 2 layers deep
@firebase/firestore:   FirestoreTypeConverter
@firebase/firestore:     âœ” converter has the minimal typing information
@firebase/firestore:     âœ” converter has the minimal typing information plus return types
@firebase/firestore:     âœ” has the additional 'merge' version of toFirestore()
@firebase/firestore:     âœ” converter is explicitly typed as FirestoreDataConverter<T>
@firebase/firestore:     âœ” converter is explicitly typed as FirestoreDataConverter<T, U>
@firebase/firestore:     âœ” setDoc() fails to compile if AppModelType argument is missing properties
@firebase/firestore:     âœ” setDoc() fails to compile if AppModelType argument contains undeclared properties
@firebase/firestore:     âœ” setDoc() fails to compile if AppModelType argument contains a property with an incorrect type
@firebase/firestore:     âœ” updateDoc() successfully compiles even if DbModelType argument is missing properties
@firebase/firestore:     âœ” updateDoc() fails to compile if DbModelType argument contains undeclared properties
@firebase/firestore:     âœ” updateDoc() fails to compile if DbModelType argument contains a property with an incorrect type
@firebase/firestore:     âœ” getDoc() returns AppModelType
@firebase/firestore:   MemoryBundleCache
@firebase/firestore:     âœ” returns undefined when bundle id is not found
@firebase/firestore:     âœ” returns saved bundle
@firebase/firestore:     âœ” returns undefined when query name is not found
@firebase/firestore:     âœ” returns saved collection queries
@firebase/firestore:     âœ” returns saved collection group queries
@firebase/firestore:     âœ” returns expected limit queries
@firebase/firestore:     âœ” returns expected limit to last queries
@firebase/firestore:   IndexedDbBundleCache
@firebase/firestore:     âœ” returns undefined when bundle id is not found
@firebase/firestore:     âœ” returns saved bundle
@firebase/firestore:     âœ” returns undefined when query name is not found
@firebase/firestore:     âœ” returns saved collection queries
@firebase/firestore:     âœ” returns saved collection group queries
@firebase/firestore:     âœ” returns expected limit queries
@firebase/firestore:     âœ” returns expected limit to last queries
@firebase/firestore:   MemoryDocumentOverlayCache
@firebase/firestore:     âœ” returns null when overlay is not found
@firebase/firestore:     âœ” can read saved overlay
@firebase/firestore:     âœ” can read saved overlays
@firebase/firestore:     âœ” can overwrite overlays
@firebase/firestore:     âœ” can delete overlays repeatedly
@firebase/firestore:     âœ” can delete overlays
@firebase/firestore:     âœ” can get all overlays for collection
@firebase/firestore:     âœ” can get all overlays since batch ID
@firebase/firestore:     âœ” can get all overlays for collection group
@firebase/firestore:     âœ” getting overlays from collection group enforces batch ID
@firebase/firestore:     âœ” getting overlays from collection group enforces count limit
@firebase/firestore:     âœ” getting overlays from collection group does not return partial batches
@firebase/firestore:     âœ” updating an overlay removes the old entry for that overlay
@firebase/firestore:     âœ” skips non-existing overlay in batch lookup
@firebase/firestore:     âœ” supports empty batch in batch lookup
@firebase/firestore:     âœ” can read saved overlays in batches
@firebase/firestore:   IndexedDbDocumentOverlayCache
@firebase/firestore:     âœ” returns null when overlay is not found
@firebase/firestore:     âœ” can read saved overlay
@firebase/firestore:     âœ” can read saved overlays
@firebase/firestore:     âœ” can overwrite overlays
@firebase/firestore:     âœ” can delete overlays repeatedly
@firebase/firestore:     âœ” can delete overlays
@firebase/firestore:     âœ” can get all overlays for collection
@firebase/firestore:     âœ” can get all overlays since batch ID
@firebase/firestore:     âœ” can get all overlays for collection group
@firebase/firestore:     âœ” getting overlays from collection group enforces batch ID
@firebase/firestore:     âœ” getting overlays from collection group enforces count limit
@firebase/firestore:     âœ” getting overlays from collection group does not return partial batches
@firebase/firestore:     âœ” updating an overlay removes the old entry for that overlay
@firebase/firestore:     âœ” skips non-existing overlay in batch lookup
@firebase/firestore:     âœ” supports empty batch in batch lookup
@firebase/firestore:     âœ” can read saved overlays in batches
@firebase/firestore:   EncodedResourcePath
@firebase/firestore:     âœ” encodes resource paths
@firebase/firestore:     âœ” orders resource paths
@firebase/firestore:   MemoryGlobals
@firebase/firestore:     âœ” returns session token that was previously saved
@firebase/firestore:     âœ” returns empty session token that was previously saved
@firebase/firestore:   IndexedDbGlobals
@firebase/firestore:     âœ” returns session token that was previously saved
@firebase/firestore:     âœ” returns empty session token that was previously saved
@firebase/firestore:   IndexedDb IndexBackfiller
@firebase/firestore:     âœ” Writes latest read time to FieldIndex on completion
@firebase/firestore:     âœ” Fetches documents after earliest read time
@firebase/firestore:     âœ” Writes Index Entries
@firebase/firestore:     âœ” Writes oldest document first
@firebase/firestore:     âœ” Uses DocumentKey Offset for large Snapshots
@firebase/firestore:     âœ” Updates collection groups
@firebase/firestore:     âœ” Prioritizes new collection groups
@firebase/firestore:     âœ” Writes until cap
@firebase/firestore:     âœ” Uses latest read time for empty collections
@firebase/firestore:     âœ” Handles local mutations after remote docs
@firebase/firestore:     âœ” Mutations up to document limit and updates batchId on index
@firebase/firestore:     âœ” Mutation finishes mutation batch even if it exceeds limit
@firebase/firestore:     âœ” Mutations from high water mark
@firebase/firestore:     âœ” Updates existing doc to new value
@firebase/firestore:     âœ” Updates docs that no longer match
@firebase/firestore:     âœ” Does not process same document twice
@firebase/firestore:     âœ” Applies set to remote doc
@firebase/firestore:     âœ” Applies patch to remote doc
@firebase/firestore:     âœ” Applies delete to remote doc
@firebase/firestore:     âœ” Reindexes documents when new index is added
@firebase/firestore:   index_manager.ts top-level functions
@firebase/firestore:     displayNameForIndexType()
@firebase/firestore:       âœ” IndexType.NONE
@firebase/firestore:       âœ” IndexType.FULL
@firebase/firestore:       âœ” IndexType.PARTIAL
@firebase/firestore:       âœ” invalid IndexType
@firebase/firestore:   MemoryIndexManager
@firebase/firestore:     âœ” can add and read collection=>parent index entries
@firebase/firestore:   IndexedDbIndexManager
@firebase/firestore:     âœ” can add and read collection=>parent index entries
@firebase/firestore:     âœ” can add indexes
@firebase/firestore:     âœ” uses auto-incrementing index id
@firebase/firestore:     âœ” can get indexes
@firebase/firestore:     âœ” can update collection group
@firebase/firestore:     âœ” can get next collection group to update
@firebase/firestore:     âœ” deleting field index removes entry from collection group
@firebase/firestore:     âœ” deleting field index removes entry from getNextCollectionGroupToUpdate()
@firebase/firestore:     âœ” persist index offset
@firebase/firestore:     âœ” changes user
@firebase/firestore:     âœ” adds documents
@firebase/firestore:     âœ” applies orderBy
@firebase/firestore:     âœ” applies orderBy with not equals filter
@firebase/firestore:     âœ” applies equality filter
@firebase/firestore:     âœ” applies nested field equality filter
@firebase/firestore:     âœ” applies not equals filter
@firebase/firestore:     âœ” applies equals with not equals filter
@firebase/firestore:     âœ” applies array contains with not equals filter
@firebase/firestore:     âœ” applies array contains with not equals filter on same field
@firebase/firestore:     âœ” applies equals with not equals filter on same field
@firebase/firestore:     âœ” applies less than or equals filter
@firebase/firestore:     âœ” applies greater than or equals filter
@firebase/firestore:     âœ” applies greater than filter
@firebase/firestore:     âœ” applies range filter
@firebase/firestore:     âœ” applies startAt filter
@firebase/firestore:     âœ” applies startAt filter with notIn
@firebase/firestore:     âœ” applies startAfter filter
@firebase/firestore:     âœ” applies endAt filter
@firebase/firestore:     âœ” applies endBefore filter
@firebase/firestore:     âœ” applies range with bound filter
@firebase/firestore:     âœ” applies in filter
@firebase/firestore:     âœ” applies not in filter
@firebase/firestore:     âœ” applies not in filter with greater than filter
@firebase/firestore:     âœ” applies not in filter with out of bounds greater than filter
@firebase/firestore:     âœ” applies array contains filter
@firebase/firestore:     âœ” applies array contains any filter
@firebase/firestore:     âœ” validates that array contains filter only matches array
@firebase/firestore:     âœ” returns empty result when no index exists
@firebase/firestore:     âœ” handles when no matching filter exists
@firebase/firestore:     âœ” returns empty results when no matching documents exists
@firebase/firestore:     âœ” filters by field type
@firebase/firestore:     âœ” supports collection group indexes
@firebase/firestore:     âœ” applies limit filter
@firebase/firestore:     âœ” uses ordering for limit filter
@firebase/firestore:     âœ” updates index entries
@firebase/firestore:     âœ” removes index entries
@firebase/firestore:     âœ” supports order by key
@firebase/firestore:     âœ” supports order by filter
@firebase/firestore:     âœ” supports ascending order with greater than filter
@firebase/firestore:     âœ” supports descending order with less than filter
@firebase/firestore:     âœ” supports ascending order with greater than filter 
@firebase/firestore:     âœ” supports descending order with greater than filter
@firebase/firestore:     âœ” cannot expand result set from a cursor
@firebase/firestore:     âœ” can have filters on the same field
@firebase/firestore:     âœ” can index timestamp fields of different format
@firebase/firestore:     âœ” can index VectorValue fields
@firebase/firestore:     âœ” support advances queries
@firebase/firestore:     âœ” serves partial and full index
@firebase/firestore:     âœ” createTargetIndexes() creates full indexes for each sub-target
@firebase/firestore:     âœ” createTargetIndexes() upgrades a partial index to a full index
@firebase/firestore:     âœ” createTargetIndexes() does nothing if a full index already exists
@firebase/firestore:     âœ” deleteAllFieldIndexes() deletes all indexes
@firebase/firestore:   IndexedDbSchema: createOrUpgradeDb
@firebase/firestore:     âœ” can install schema version 1
@firebase/firestore:     âœ” drops the query cache from 2 to 3
@firebase/firestore:     âœ” can upgrade from schema version 3 to 4
@firebase/firestore:     âœ” can upgrade from schema version 4 to 5
@firebase/firestore:     âœ” can upgrade from version 5 to 6
@firebase/firestore:     âœ” can upgrade from version 6 to 7
@firebase/firestore:     âœ” can upgrade from version 7 to 8
@firebase/firestore:     âœ” rewrites canonical IDs during upgrade from version 9 to 10
@firebase/firestore:     âœ” can use read-time index after schema migration
@firebase/firestore:     âœ” can get recent document changes in a collection
@firebase/firestore:     âœ” can upgrade from version 11 to 12
@firebase/firestore:     âœ” can upgrade from version 12 to 13
@firebase/firestore:     âœ” can upgrade from schema version 13 to 14 (overlay migration)
@firebase/firestore:     âœ” can upgrade from version 13 to 14
@firebase/firestore:     âœ” can upgrade from version 14 to 15
@firebase/firestore:     âœ” can upgrade from version 15 to 16
@firebase/firestore:     âœ” can upgrade from version 16 to 17
@firebase/firestore:     âœ” downgrading throws a custom error
@firebase/firestore:   IndexedDb: canActAsPrimary
@firebase/firestore:     âœ” is eligible when client is offline and hidden and other client is offline and hidden
@firebase/firestore:     âœ” is eligible when client is offline and visible and other client is offline and hidden
@firebase/firestore:     âœ” is eligible when client is online and hidden and other client is offline and hidden
@firebase/firestore:     âœ” is eligible when client is online and visible and other client is offline and hidden
@firebase/firestore:     âœ” is not eligible when client is offline and hidden and other client is offline and visible
@firebase/firestore:     âœ” is eligible when client is offline and visible and other client is offline and visible
@firebase/firestore:     âœ” is eligible when client is online and hidden and other client is offline and visible
@firebase/firestore:     âœ” is eligible when client is online and visible and other client is offline and visible
@firebase/firestore:     âœ” is not eligible when client is offline and hidden and other client is online and hidden
@firebase/firestore:     âœ” is not eligible when client is offline and visible and other client is online and hidden
@firebase/firestore:     âœ” is eligible when client is online and hidden and other client is online and hidden
@firebase/firestore:     âœ” is eligible when client is online and visible and other client is online and hidden
@firebase/firestore:     âœ” is not eligible when client is offline and hidden and other client is online and visible
@firebase/firestore:     âœ” is not eligible when client is offline and visible and other client is online and visible
@firebase/firestore:     âœ” is not eligible when client is online and hidden and other client is online and visible
@firebase/firestore:     âœ” is eligible when client is online and visible and other client is online and visible
@firebase/firestore:     âœ” is eligible when only client
@firebase/firestore:     âœ” regains lease if available
@firebase/firestore:     âœ” obtains lease if forceOwningTab is set
@firebase/firestore:   IndexedDb: allowTabSynchronization
@firebase/firestore:     âœ” blocks start() on IndexedDbTransactionError when synchronization is disabled 
@firebase/firestore:     âœ” allows start() with IndexedDbTransactionError when synchronization is enabled 
@firebase/firestore:     âœ” blocks start() when getHighestListenSequenceNumber() fails
@firebase/firestore:     âœ” ignores intermittent IndexedDbTransactionError during lease refresh
@firebase/firestore:     âœ” rejects access when synchronization is disabled
@firebase/firestore:     âœ” grants access when synchronization is enabled
@firebase/firestore:   IndexedDb
@firebase/firestore:     âœ” can re-open after close
@firebase/firestore:   Local Serializer
@firebase/firestore:     âœ” SetMutation + TransformMutation (legacy) are squashed
@firebase/firestore:     âœ” PatchMutation + TransformMutation (legacy) are squashed
@firebase/firestore: ERROR: '[2025-03-04T23:05:28.262Z]  @firebase/firestore:', 'Firestore (11.3.0): FIRESTORE (11.3.0) INTERNAL ASSERTION FAILED: TransformMutation should be preceded by a patch or set mutation'
@firebase/firestore: ERROR: '[2025-03-04T23:05:28.262Z]  @firebase/firestore:', 'Firestore (11.3.0): FIRESTORE (11.3.0) INTERNAL ASSERTION FAILED: TransformMutation should be preceded by a patch or set mutation'
@firebase/firestore:     âœ” TransformMutation (legacy) + TransformMutation (legacy) throw assertion
@firebase/firestore: ERROR: '[2025-03-04T23:05:28.262Z]  @firebase/firestore:', 'Firestore (11.3.0): FIRESTORE (11.3.0) INTERNAL ASSERTION FAILED: TransformMutation should be preceded by a patch or set mutation'
@firebase/firestore: ERROR: '[2025-03-04T23:05:28.262Z]  @firebase/firestore:', 'Firestore (11.3.0): FIRESTORE (11.3.0) INTERNAL ASSERTION FAILED: TransformMutation should be preceded by a patch or set mutation'
@firebase/firestore:     âœ” DeleteMutation + TransformMutation (legacy) on its own throws assertion
@firebase/firestore:     âœ” multiple mutations are squashed
@firebase/firestore:     âœ” serializes overlay
@firebase/firestore:     âœ” serializes FieldIndex
@firebase/firestore:     âœ” serializes IndexState
@firebase/firestore:   LocalStore w/ Memory Persistence
@firebase/firestore:     âœ” localStoreSetIndexAutoCreationEnabled()
@firebase/firestore:     âœ” handles SetMutation
@firebase/firestore:     âœ” handles SetMutation -> Document
@firebase/firestore:     âœ” handles SetMutation -> Ack (Held) -> SetMutation -> Reject -> RemoteEvent (Release Ack)
@firebase/firestore:     âœ” handles NoDocument -> SetMutation -> Ack
@firebase/firestore:     âœ” handles SetMutation -> NoDocument
@firebase/firestore:     âœ” handles Document -> SetMutation -> Ack ->  Document
@firebase/firestore:     âœ” handles PatchMutation without prior document
@firebase/firestore:     âœ” handles PatchMutation -> Document -> Ack
@firebase/firestore:     âœ” handles PatchMutation -> Ack -> Document
@firebase/firestore:     âœ” handles DeleteMutation -> Ack
@firebase/firestore:     âœ” handles Document -> DeleteMutation -> Ack
@firebase/firestore:     âœ” handles DeleteMutation -> Document -> Ack
@firebase/firestore:     âœ” handles Document -> NoDocument -> Document
@firebase/firestore:     âœ” handles SetMutation -> PatchMutation -> Document -> Ack -> Ack
@firebase/firestore:     âœ” handles SetMutation + PatchMutation
@firebase/firestore:     âœ” handles SetMutation -> Ack -> PatchMutation -> Reject
@firebase/firestore:     âœ” handles SetMutation(A) + SetMutation(B) + PatchMutation(A)
@firebase/firestore:     âœ” handles DeleteMutation -> PatchMutation -> Ack -> Ack
@firebase/firestore:     âœ” collects garbage after ChangeBatch with no target ids
@firebase/firestore:     âœ” collects garbage after ChangeBatch
@firebase/firestore:     âœ” collects garbage after acknowledged mutation
@firebase/firestore:     âœ” collects garbage after rejected mutation
@firebase/firestore:     âœ” pins documents in the local view
@firebase/firestore:     âœ” throws away documents with unknown target-ids immediately
@firebase/firestore:     âœ” can execute document queries
@firebase/firestore:     âœ” can execute collection queries
@firebase/firestore:     âœ” can execute mixed collection queries
@firebase/firestore:     âœ” reads all documents for initial collection queries
@firebase/firestore:     âœ– persists resume tokens (skipped)
@firebase/firestore:     âœ– does not replace resume token with empty resume token (skipped)
@firebase/firestore:     âœ” handles SetMutation -> Transform -> Transform
@firebase/firestore:     âœ– handles SetMutation -> Ack -> Transform -> Ack -> Transform (skipped)
@firebase/firestore:     âœ” handles SetMutation -> Transform-> RemoteEvent -> Transform
@firebase/firestore:     âœ” holds back transforms
@firebase/firestore:     âœ” handles MergeMutation with Transform -> RemoteEvent
@firebase/firestore:     âœ” handles PatchMutation with Transform -> RemoteEvent
@firebase/firestore:     âœ” handles saving bundled documents
@firebase/firestore:     âœ” handles saving bundled documents with newer existing version
@firebase/firestore:     âœ” handles saving bundled documents with older existing version
@firebase/firestore:     âœ” handles saving bundled documents with same existing version should not overwrite
@firebase/firestore:     âœ” handles MergeMutation with Transform -> BundledDocuments
@firebase/firestore:     âœ” handles PatchMutation with Transform -> BundledDocuments
@firebase/firestore:     âœ” handles saving and checking bundle metadata
@firebase/firestore:     âœ” add then update while offline
@firebase/firestore:     âœ” handles saving and loading named queries
@firebase/firestore:     âœ” loading named queries allocates targets and updates target document mapping
@firebase/firestore:     âœ” handles saving and loading limit to last queries
@firebase/firestore:     âœ” computes highest unacknowledged batch id correctly
@firebase/firestore:     âœ” only persists updates for documents when version changes
@firebase/firestore:     âœ” can handle batch Ack when pending batches have other docs
@firebase/firestore:     âœ” can handle multiple field patches on remote docs
@firebase/firestore:     âœ” can handle multiple field patches in one batch on remote docs
@firebase/firestore:     âœ” can handle multiple field patches on local docs
@firebase/firestore:     âœ” update on remote doc leads to update overlay
@firebase/firestore:     âœ” handles document creation time
@firebase/firestore:     âœ” saves updateTime as createTime when receives ack for creating a new doc
@firebase/firestore:     âœ” handles createTime for Set -> Ack -> RemoteEvent
@firebase/firestore:     âœ” handles createTime for Set -> RemoteEvent -> Ack
@firebase/firestore:     âœ” saves updateTime as createTime when recreating a deleted doc
@firebase/firestore:     âœ” document createTime is preserved through Set -> Ack -> Patch -> Ack
@firebase/firestore:     âœ” document createTime is preserved through Doc Added -> Patch -> Ack
@firebase/firestore:     âœ” deeply nested server timestamps do not cause stack overflow
@firebase/firestore:     âœ” uses target mapping to execute queries
@firebase/firestore:     âœ” last limbo free snapshot is advanced during view processing
@firebase/firestore:     âœ– ignores target mapping after existence filter mismatch (skipped)
@firebase/firestore:     âœ– queries include locally modified documents (skipped)
@firebase/firestore:     âœ– queries include documents from other queries (skipped)
@firebase/firestore:     âœ– queries filter documents that no longer match (skipped)
@firebase/firestore:   LocalStore w/ IndexedDB Persistence
@firebase/firestore:     âœ” localStoreSetIndexAutoCreationEnabled()
@firebase/firestore:     âœ” handles SetMutation
@firebase/firestore:     âœ” handles SetMutation -> Document
@firebase/firestore:     âœ” handles SetMutation -> Ack (Held) -> SetMutation -> Reject -> RemoteEvent (Release Ack)
@firebase/firestore:     âœ” handles NoDocument -> SetMutation -> Ack
@firebase/firestore:     âœ” handles SetMutation -> NoDocument
@firebase/firestore:     âœ” handles Document -> SetMutation -> Ack ->  Document
@firebase/firestore:     âœ” handles PatchMutation without prior document
@firebase/firestore:     âœ” handles PatchMutation -> Document -> Ack
@firebase/firestore:     âœ” handles PatchMutation -> Ack -> Document
@firebase/firestore:     âœ” handles DeleteMutation -> Ack
@firebase/firestore:     âœ” handles Document -> DeleteMutation -> Ack
@firebase/firestore:     âœ” handles DeleteMutation -> Document -> Ack
@firebase/firestore:     âœ” handles Document -> NoDocument -> Document
@firebase/firestore:     âœ” handles SetMutation -> PatchMutation -> Document -> Ack -> Ack
@firebase/firestore:     âœ” handles SetMutation + PatchMutation
@firebase/firestore:     âœ– handles SetMutation -> Ack -> PatchMutation -> Reject (skipped)
@firebase/firestore:     âœ” handles SetMutation(A) + SetMutation(B) + PatchMutation(A)
@firebase/firestore:     âœ” handles DeleteMutation -> PatchMutation -> Ack -> Ack
@firebase/firestore:     âœ– collects garbage after ChangeBatch with no target ids (skipped)
@firebase/firestore:     âœ– collects garbage after ChangeBatch (skipped)
@firebase/firestore:     âœ– collects garbage after acknowledged mutation (skipped)
@firebase/firestore:     âœ– collects garbage after rejected mutation (skipped)
@firebase/firestore:     âœ– pins documents in the local view (skipped)
@firebase/firestore:     âœ– throws away documents with unknown target-ids immediately (skipped)
@firebase/firestore:     âœ” can execute document queries
@firebase/firestore:     âœ” can execute collection queries
@firebase/firestore:     âœ” can execute mixed collection queries
@firebase/firestore:     âœ” reads all documents for initial collection queries
@firebase/firestore:     âœ” persists resume tokens
@firebase/firestore:     âœ” does not replace resume token with empty resume token
@firebase/firestore:     âœ” handles SetMutation -> Transform -> Transform
@firebase/firestore:     âœ” handles SetMutation -> Ack -> Transform -> Ack -> Transform
@firebase/firestore:     âœ” handles SetMutation -> Transform-> RemoteEvent -> Transform
@firebase/firestore:     âœ” holds back transforms
@firebase/firestore:     âœ” handles MergeMutation with Transform -> RemoteEvent
@firebase/firestore:     âœ” handles PatchMutation with Transform -> RemoteEvent
@firebase/firestore:     âœ” handles saving bundled documents
@firebase/firestore:     âœ” handles saving bundled documents with newer existing version
@firebase/firestore:     âœ” handles saving bundled documents with older existing version
@firebase/firestore:     âœ” handles saving bundled documents with same existing version should not overwrite
@firebase/firestore:     âœ” handles MergeMutation with Transform -> BundledDocuments
@firebase/firestore:     âœ” handles PatchMutation with Transform -> BundledDocuments
@firebase/firestore:     âœ” handles saving and checking bundle metadata
@firebase/firestore:     âœ” add then update while offline
@firebase/firestore:     âœ” handles saving and loading named queries
@firebase/firestore:     âœ” loading named queries allocates targets and updates target document mapping
@firebase/firestore:     âœ” handles saving and loading limit to last queries
@firebase/firestore:     âœ” computes highest unacknowledged batch id correctly
@firebase/firestore:     âœ” only persists updates for documents when version changes
@firebase/firestore:     âœ” can handle batch Ack when pending batches have other docs
@firebase/firestore:     âœ” can handle multiple field patches on remote docs
@firebase/firestore:     âœ” can handle multiple field patches in one batch on remote docs
@firebase/firestore:     âœ” can handle multiple field patches on local docs
@firebase/firestore:     âœ” update on remote doc leads to update overlay
@firebase/firestore:     âœ” handles document creation time
@firebase/firestore:     âœ” saves updateTime as createTime when receives ack for creating a new doc
@firebase/firestore:     âœ” handles createTime for Set -> Ack -> RemoteEvent
@firebase/firestore:     âœ” handles createTime for Set -> RemoteEvent -> Ack
@firebase/firestore:     âœ” saves updateTime as createTime when recreating a deleted doc
@firebase/firestore:     âœ” document createTime is preserved through Set -> Ack -> Patch -> Ack
@firebase/firestore:     âœ” document createTime is preserved through Doc Added -> Patch -> Ack
@firebase/firestore:     âœ” deeply nested server timestamps do not cause stack overflow
@firebase/firestore:     âœ” uses target mapping to execute queries
@firebase/firestore:     âœ” last limbo free snapshot is advanced during view processing
@firebase/firestore:     âœ” ignores target mapping after existence filter mismatch
@firebase/firestore:     âœ” queries include locally modified documents
@firebase/firestore:     âœ” queries include documents from other queries
@firebase/firestore:     âœ” queries filter documents that no longer match
@firebase/firestore:   LocalStore w/ IndexedDB Persistence (Non generic)
@firebase/firestore:     âœ” Adds Indexes
@firebase/firestore:     âœ” Removes Indexes
@firebase/firestore:     âœ” Does Not Reset Index When Same Index Is Added
@firebase/firestore:     âœ” Deleted Document Removes Index
@firebase/firestore:     âœ” Uses Indexes
@firebase/firestore:     âœ” Uses Partially Indexed Remote Documents When Available
@firebase/firestore:     âœ” Uses Partially Indexed Overlays When Available
@firebase/firestore:     âœ” Does Not Use Limit When Index Is Outdated
@firebase/firestore:     âœ” Uses Index For Limit Query When Index Is Updated
@firebase/firestore:     âœ” Indexes Server Timestamps
@firebase/firestore:     âœ” can auto-create indexes
@firebase/firestore:     âœ” can auto-create indexes works with or query
@firebase/firestore:     âœ” does not auto-create indexes for small collections
@firebase/firestore:     âœ” does not auto create indexes when index lookup is expensive
@firebase/firestore:     âœ” index auto creation works when backfiller runs halfway
@firebase/firestore:     âœ” index created by index auto creation exists after turn off auto creation
@firebase/firestore:     âœ” disable index auto creation works
@firebase/firestore:     âœ” index auto creation works with mutation
@firebase/firestore:     âœ” delete all indexes works with index auto creation
@firebase/firestore:     âœ” delete all indexes works with manual added indexes
@firebase/firestore:     âœ” index auto creation does not work with multiple inequality
@firebase/firestore:   IndexedDbLruDelegate
@firebase/firestore:     âœ” picks sequence number percentile
@firebase/firestore:     âœ” removes targets up through sequence number
@firebase/firestore:     âœ” removes orphaned documents
@firebase/firestore:     âœ” removes targets then GCs
@firebase/firestore:     âœ” gets cache size
@firebase/firestore:     âœ” can be disabled
@firebase/firestore:     âœ” skips a cache that is too small
@firebase/firestore:     âœ” runs when the cache is large enough
@firebase/firestore:     âœ” caps sequence numbers to collect
@firebase/firestore:     nthSequenceNumber()
@firebase/firestore:       âœ” sequence number for no targets
@firebase/firestore:       âœ” with 50 targets
@firebase/firestore:       âœ” with multiple targets in a transaction
@firebase/firestore:       âœ” with all collected targets in a single transaction
@firebase/firestore:       âœ” with mutation and sequential targets
@firebase/firestore:       âœ” with mutations in targets
@firebase/firestore:   MemoryLruDelegate
@firebase/firestore:     âœ” picks sequence number percentile
@firebase/firestore:     âœ” removes targets up through sequence number
@firebase/firestore:     âœ” removes orphaned documents
@firebase/firestore:     âœ” removes targets then GCs
@firebase/firestore:     âœ” gets cache size
@firebase/firestore:     âœ” can be disabled
@firebase/firestore:     âœ” skips a cache that is too small
@firebase/firestore:     âœ” runs when the cache is large enough
@firebase/firestore:     âœ” caps sequence numbers to collect
@firebase/firestore:     nthSequenceNumber()
@firebase/firestore:       âœ” sequence number for no targets
@firebase/firestore:       âœ” with 50 targets
@firebase/firestore:       âœ” with multiple targets in a transaction
@firebase/firestore:       âœ” with all collected targets in a single transaction
@firebase/firestore:       âœ” with mutation and sequential targets
@firebase/firestore:       âœ” with mutations in targets
@firebase/firestore:   MemoryMutationQueue
@firebase/firestore:     âœ” can count batches
@firebase/firestore:     âœ” can lookup mutation batch
@firebase/firestore:     âœ” can getNextMutationBatchAfterBatchId()
@firebase/firestore:     âœ” can getAllMutationBatchesAffectingDocumentKey()
@firebase/firestore:     âœ” can getAllMutationBatchesAffectingDocumentKeys()
@firebase/firestore:     âœ” can getAllMutationBatchesAffectingQuery()
@firebase/firestore:     âœ” can getAllMutationBatchesAffectingQuery() with compound batches
@firebase/firestore:     âœ” can removeMutationBatch()
@firebase/firestore:   IndexedDbMutationQueue
@firebase/firestore:     âœ” can count batches
@firebase/firestore:     âœ” can lookup mutation batch
@firebase/firestore:     âœ” can getNextMutationBatchAfterBatchId()
@firebase/firestore:     âœ” can getAllMutationBatchesAffectingDocumentKey()
@firebase/firestore:     âœ” can getAllMutationBatchesAffectingDocumentKeys()
@firebase/firestore:     âœ” can getAllMutationBatchesAffectingQuery()
@firebase/firestore:     âœ” can getAllMutationBatchesAffectingQuery() with compound batches
@firebase/firestore:     âœ” can removeMutationBatch()
@firebase/firestore:   PersistencePromise
@firebase/firestore:     âœ” Can chain synchronous functions
@firebase/firestore:     âœ” Can chain asynchronous functions
@firebase/firestore:     âœ” Can catch synchronous functions
@firebase/firestore:     âœ” Can catch asynchronous functions
@firebase/firestore:     âœ” ignores catches without errors
@firebase/firestore:     âœ” ignores catches without errors async
@firebase/firestore:     âœ” can catch errors twice sync
@firebase/firestore:     âœ” can catch errors twice async
@firebase/firestore:     âœ” can return undefined sync
@firebase/firestore:     âœ” can return undefined async
@firebase/firestore:     âœ” can waitFor sync
@firebase/firestore:     âœ” can waitFor async
@firebase/firestore:     âœ” can waitFor async error
@firebase/firestore:     âœ” propagates error for waitFor()
@firebase/firestore:     âœ” propagates error for forEach()
@firebase/firestore:   MemoryTransaction
@firebase/firestore:     âœ” invokes onCommittedListener when transaction succeeds
@firebase/firestore:     âœ” does not invoke onCommittedListener when transaction fails
@firebase/firestore:   IndexedDbTransaction
@firebase/firestore:     âœ” invokes onCommittedListener when transaction succeeds
@firebase/firestore:     âœ” does not invoke onCommittedListener when transaction fails
@firebase/firestore:     âœ” only invokes onCommittedListener once with retries
@firebase/firestore:   QueryEngine
@firebase/firestore:     MemoryEagerPersistence
@firebase/firestore:       âœ” uses target mapping for initial view
@firebase/firestore:       âœ” filters non-matching changes since initial results
@firebase/firestore:       âœ” includes changes since initial results
@firebase/firestore:       âœ” does not use initial results without limbo free snapshot version
@firebase/firestore:       âœ” does not use initial results for unfiltered collection query
@firebase/firestore:       âœ” does not use initial results for limit query with document removal
@firebase/firestore:       âœ” does not use initial results for limitToLast query with document removal
@firebase/firestore:       âœ” does not use initial results for limit query when last document has pending write
@firebase/firestore:       âœ” does not use initial results for limitToLast query when first document has pending write
@firebase/firestore:       âœ” does not use initial results for limit query when last document has been updated out of band
@firebase/firestore:       âœ” does not use initial results for limitToLast query when first document in limit has been updated out of band
@firebase/firestore:       âœ” uses initial results if last document in limit is unchanged
@firebase/firestore:       âœ” does not include documents deleted by mutation
@firebase/firestore:       âœ” can perform OR queries using full collection scan
@firebase/firestore:       âœ” query does not include documents with missing fields
@firebase/firestore:       âœ” query with multiple ins on the same field
@firebase/firestore:       âœ” query with ins and not-ins on the same field
@firebase/firestore:       âœ” query with multiple ins on different fields
@firebase/firestore:       âœ” query in with array-contains-any
@firebase/firestore:       âœ” query in with array-contains
@firebase/firestore:       âœ” order by equality
@firebase/firestore:       âœ” or query with in and not-in
@firebase/firestore:       âœ” query with array membership
@firebase/firestore:     IndexedDbPersistence configureCsi=false
@firebase/firestore:       âœ” uses target mapping for initial view
@firebase/firestore:       âœ” filters non-matching changes since initial results
@firebase/firestore:       âœ” includes changes since initial results
@firebase/firestore:       âœ” does not use initial results without limbo free snapshot version
@firebase/firestore:       âœ” does not use initial results for unfiltered collection query
@firebase/firestore:       âœ” does not use initial results for limit query with document removal
@firebase/firestore:       âœ” does not use initial results for limitToLast query with document removal
@firebase/firestore:       âœ” does not use initial results for limit query when last document has pending write
@firebase/firestore:       âœ” does not use initial results for limitToLast query when first document has pending write
@firebase/firestore:       âœ” does not use initial results for limit query when last document has been updated out of band
@firebase/firestore:       âœ” does not use initial results for limitToLast query when first document in limit has been updated out of band
@firebase/firestore:       âœ” uses initial results if last document in limit is unchanged
@firebase/firestore:       âœ” does not include documents deleted by mutation
@firebase/firestore:       âœ” can perform OR queries using full collection scan
@firebase/firestore:       âœ” query does not include documents with missing fields
@firebase/firestore:       âœ” query with multiple ins on the same field
@firebase/firestore:       âœ” query with ins and not-ins on the same field
@firebase/firestore:       âœ” query with multiple ins on different fields
@firebase/firestore:       âœ” query in with array-contains-any
@firebase/firestore:       âœ” query in with array-contains
@firebase/firestore:       âœ” order by equality
@firebase/firestore:       âœ” or query with in and not-in
@firebase/firestore:       âœ” query with array membership
@firebase/firestore:     IndexedDbQueryEngine configureCsi=true
@firebase/firestore:       âœ” combines indexed with non-indexed results
@firebase/firestore:       âœ” uses partial index for limit queries
@firebase/firestore:       âœ” re-fills indexed limit queries
@firebase/firestore:       âœ” creates indexes when indexAutoCreationEnabled=true
@firebase/firestore:       âœ” does not create indexes when indexAutoCreationEnabled=false
@firebase/firestore:       âœ” creates indexes when min collection size is met exactly and relative cost is ever-so-slightly better
@firebase/firestore:       âœ” does not create indexes when min collection size is not met by only 1 document
@firebase/firestore:       âœ” does not create indexes when relative cost is equal
@firebase/firestore:       âœ” query with multiple ins on the same field
@firebase/firestore:       âœ” query with ins and not-ins on the same field
@firebase/firestore:       âœ” query with multiple ins on different fields
@firebase/firestore:       âœ” query in with array-contains-any
@firebase/firestore:       âœ” query in with array-contains
@firebase/firestore:       âœ” order by equality
@firebase/firestore:       âœ” or query with in and not-in
@firebase/firestore:       âœ” query with array membership
@firebase/firestore:   ReferenceSet
@firebase/firestore:     âœ” can add/remove references
@firebase/firestore:     âœ” can remove all references for a target ID
@firebase/firestore:   MemoryRemoteDocumentCache
@firebase/firestore:     âœ” returns an invalid document for documents not in cache
@firebase/firestore:     âœ” can set and read a document
@firebase/firestore:     âœ” can set and read a document at a long path
@firebase/firestore:     âœ” can set and read a NoDocument
@firebase/firestore:     âœ” can set document to new value
@firebase/firestore:     âœ” can set and read several documents
@firebase/firestore:     âœ” can set and read several documents with overlapping keys
@firebase/firestore:     âœ” can set and read several documents with deeply nested keys
@firebase/firestore:     âœ” can set and read several documents including missing document
@firebase/firestore:     âœ” can remove document
@firebase/firestore:     âœ” can remove nonexistent document
@firebase/firestore:     âœ” can get all documents from collection
@firebase/firestore:     âœ” getAll() excludes subcollection
@firebase/firestore:     âœ” can get all documents since read time
@firebase/firestore:     âœ” getDocumentsMatchingQuery() applies query check
@firebase/firestore:     âœ” getDocumentsMatchingQuery() respects mutated documents
@firebase/firestore:     âœ” getAll() uses read time rather than update time
@firebase/firestore:     âœ” does not apply document modifications to cache
@firebase/firestore:     âœ” doesn't keep track of size
@firebase/firestore:   LRU MemoryRemoteDocumentCache
@firebase/firestore:     âœ” returns an invalid document for documents not in cache
@firebase/firestore:     âœ” can set and read a document
@firebase/firestore:     âœ” can set and read a document at a long path
@firebase/firestore:     âœ” can set and read a NoDocument
@firebase/firestore:     âœ” can set document to new value
@firebase/firestore:     âœ” can set and read several documents
@firebase/firestore:     âœ” can set and read several documents with overlapping keys
@firebase/firestore:     âœ” can set and read several documents with deeply nested keys
@firebase/firestore:     âœ” can set and read several documents including missing document
@firebase/firestore:     âœ” can remove document
@firebase/firestore:     âœ” can remove nonexistent document
@firebase/firestore:     âœ” can get all documents from collection
@firebase/firestore:     âœ” getAll() excludes subcollection
@firebase/firestore:     âœ” can get all documents since read time
@firebase/firestore:     âœ” getDocumentsMatchingQuery() applies query check
@firebase/firestore:     âœ” getDocumentsMatchingQuery() respects mutated documents
@firebase/firestore:     âœ” getAll() uses read time rather than update time
@firebase/firestore:     âœ” does not apply document modifications to cache
@firebase/firestore:     âœ” keeps track of size
@firebase/firestore:   IndexedDbRemoteDocumentCache
@firebase/firestore:     âœ” can get next documents from collection group
@firebase/firestore:     âœ” can get next documents from collection group with limit
@firebase/firestore:     âœ” can get next documents from collection group with read time offset
@firebase/firestore:     âœ” can get next documents from collection group with document key offset
@firebase/firestore:     âœ” can get next documents from non-existing collection group
@firebase/firestore:     âœ” can get next documents from collection group 
@firebase/firestore:     âœ” can get next documents from collection group with limit 
@firebase/firestore:     âœ” can get next documents from collection group with read time offset 
@firebase/firestore:     âœ” can get next documents from collection group with document key offset 
@firebase/firestore:     âœ” can get next documents from non-existing collection group 
@firebase/firestore:     âœ” returns an invalid document for documents not in cache
@firebase/firestore:     âœ” can set and read a document
@firebase/firestore:     âœ” can set and read a document at a long path
@firebase/firestore:     âœ” can set and read a NoDocument
@firebase/firestore:     âœ” can set document to new value
@firebase/firestore:     âœ” can set and read several documents
@firebase/firestore:     âœ” can set and read several documents with overlapping keys
@firebase/firestore:     âœ” can set and read several documents with deeply nested keys
@firebase/firestore:     âœ” can set and read several documents including missing document
@firebase/firestore:     âœ” can remove document
@firebase/firestore:     âœ” can remove nonexistent document
@firebase/firestore:     âœ” can get all documents from collection
@firebase/firestore:     âœ” getAll() excludes subcollection
@firebase/firestore:     âœ” can get all documents since read time
@firebase/firestore:     âœ” getDocumentsMatchingQuery() applies query check
@firebase/firestore:     âœ” getDocumentsMatchingQuery() respects mutated documents
@firebase/firestore:     âœ” getAll() uses read time rather than update time
@firebase/firestore:     âœ” does not apply document modifications to cache
@firebase/firestore:     âœ” keeps track of size
@firebase/firestore:   RemoteDocumentChangeBuffer
@firebase/firestore:     âœ” can read unchanged entry
@firebase/firestore:     âœ” can add entry and read it back
@firebase/firestore:     âœ” can remove entry
@firebase/firestore:     âœ” can apply changes
@firebase/firestore:     âœ” can apply changes with removal
@firebase/firestore: ERROR: '[2025-03-04T23:05:29.998Z]  @firebase/firestore:', 'Firestore (11.3.0): FIRESTORE (11.3.0) INTERNAL ASSERTION FAILED: Changes have already been applied.'
@firebase/firestore: ERROR: '[2025-03-04T23:05:29.998Z]  @firebase/firestore:', 'Firestore (11.3.0): FIRESTORE (11.3.0) INTERNAL ASSERTION FAILED: Changes have already been applied.'
@firebase/firestore: ERROR: '[2025-03-04T23:05:29.998Z]  @firebase/firestore:', 'Firestore (11.3.0): FIRESTORE (11.3.0) INTERNAL ASSERTION FAILED: Changes have already been applied.'
@firebase/firestore: ERROR: '[2025-03-04T23:05:29.998Z]  @firebase/firestore:', 'Firestore (11.3.0): FIRESTORE (11.3.0) INTERNAL ASSERTION FAILED: Changes have already been applied.'
@firebase/firestore: ERROR: '[2025-03-04T23:05:29.998Z]  @firebase/firestore:', 'Firestore (11.3.0): FIRESTORE (11.3.0) INTERNAL ASSERTION FAILED: Changes have already been applied.'
@firebase/firestore: ERROR: '[2025-03-04T23:05:29.998Z]  @firebase/firestore:', 'Firestore (11.3.0): FIRESTORE (11.3.0) INTERNAL ASSERTION FAILED: Changes have already been applied.'
@firebase/firestore: ERROR: '[2025-03-04T23:05:29.999Z]  @firebase/firestore:', 'Firestore (11.3.0): FIRESTORE (11.3.0) INTERNAL ASSERTION FAILED: Changes have already been applied.'
@firebase/firestore: ERROR: '[2025-03-04T23:05:29.999Z]  @firebase/firestore:', 'Firestore (11.3.0): FIRESTORE (11.3.0) INTERNAL ASSERTION FAILED: Changes have already been applied.'
@firebase/firestore: ERROR: '[2025-03-04T23:05:29.999Z]  @firebase/firestore:', 'Firestore (11.3.0): FIRESTORE (11.3.0) INTERNAL ASSERTION FAILED: Changes have already been applied.'
@firebase/firestore: ERROR: '[2025-03-04T23:05:29.999Z]  @firebase/firestore:', 'Firestore (11.3.0): FIRESTORE (11.3.0) INTERNAL ASSERTION FAILED: Changes have already been applied.'
@firebase/firestore: ERROR: '[2025-03-04T23:05:29.999Z]  @firebase/firestore:', 'Firestore (11.3.0): FIRESTORE (11.3.0) INTERNAL ASSERTION FAILED: Changes have already been applied.'
@firebase/firestore: ERROR: '[2025-03-04T23:05:29.999Z]  @firebase/firestore:', 'Firestore (11.3.0): FIRESTORE (11.3.0) INTERNAL ASSERTION FAILED: Changes have already been applied.'
@firebase/firestore: ERROR: '[2025-03-04T23:05:29.999Z]  @firebase/firestore:', 'Firestore (11.3.0): FIRESTORE (11.3.0) INTERNAL ASSERTION FAILED: Changes have already been applied.'
@firebase/firestore: ERROR: '[2025-03-04T23:05:29.999Z]  @firebase/firestore:', 'Firestore (11.3.0): FIRESTORE (11.3.0) INTERNAL ASSERTION FAILED: Changes have already been applied.'
@firebase/firestore:     âœ” methods fail after apply.
@firebase/firestore:   SimpleDb
@firebase/firestore:     âœ” regex test
@firebase/firestore:     âœ” can get
@firebase/firestore:     âœ” can put
@firebase/firestore:     âœ” lets you explicitly abort transactions
@firebase/firestore:     âœ” aborts transactions when an error happens
@firebase/firestore:     âœ” aborts transactions when persistence promise is rejected
@firebase/firestore:     âœ” exposes error from inside a transaction
@firebase/firestore:     âœ” can delete
@firebase/firestore:     âœ” loadAll
@firebase/firestore:     âœ” loadFirst
@firebase/firestore:     âœ” deleteAll
@firebase/firestore:     âœ” deleteAll in key range
@firebase/firestore:     âœ” deleteAll in index range
@firebase/firestore:     âœ” can iterate
@firebase/firestore:     âœ” can iterate and skip keys
@firebase/firestore:     âœ” stops iteration after rejected promise
@firebase/firestore:     âœ” can iterate in reverse
@firebase/firestore:     âœ” can iterate and skip keys in reverse
@firebase/firestore:     âœ” can iterate and skip over the index
@firebase/firestore:     âœ” can iterate using index and range and stop before end
@firebase/firestore:     âœ” can iterate over index as keys-only
@firebase/firestore:     âœ” can iterate over index using a partial bound
@firebase/firestore:     âœ” can use arrays as keys and do partial bounds ranges
@firebase/firestore:     âœ” correctly sorts keys with nested arrays
@firebase/firestore:     âœ” retries transactions
@firebase/firestore:     âœ” retries transactions only three times
@firebase/firestore:     âœ” does not retry explicitly aborted transactions
@firebase/firestore:     âœ– Perf (skipped)
@firebase/firestore:   MemoryTargetCache
@firebase/firestore:     âœ” returns null for target not in cache
@firebase/firestore:     âœ” can set and read a target
@firebase/firestore:     âœ” handles canonical ID collisions
@firebase/firestore:     âœ” can set target to new value
@firebase/firestore:     âœ” can remove a target
@firebase/firestore:     âœ” can remove matching keys when a target is removed
@firebase/firestore:     âœ” adds or removes matching keys
@firebase/firestore:     âœ” can remove matching keys for a targetId
@firebase/firestore:     âœ” can get matching keys for targetId
@firebase/firestore:     âœ” can allocate target ID
@firebase/firestore:     âœ” can get / set targets metadata
@firebase/firestore:     âœ” sets the highest sequence number
@firebase/firestore:   IndexedDbTargetCache
@firebase/firestore:     âœ” returns null for target not in cache
@firebase/firestore:     âœ” can set and read a target
@firebase/firestore:     âœ” handles canonical ID collisions
@firebase/firestore:     âœ” can set target to new value
@firebase/firestore:     âœ” can remove a target
@firebase/firestore:     âœ” can remove matching keys when a target is removed
@firebase/firestore:     âœ” adds or removes matching keys
@firebase/firestore:     âœ” can remove matching keys for a targetId
@firebase/firestore:     âœ” can get matching keys for targetId
@firebase/firestore:     âœ” can allocate target ID
@firebase/firestore:     âœ” can get / set targets metadata
@firebase/firestore:     âœ” sets the highest sequence number
@firebase/firestore:     âœ” persists metadata across restarts
@firebase/firestore:   WebStorageSharedClientState
@firebase/firestore:     persists mutation batches
@firebase/firestore:       âœ” with a pending batch
@firebase/firestore:       âœ” with an acknowledged batch
@firebase/firestore:       âœ” with a rejected batch
@firebase/firestore:     persists query targets
@firebase/firestore:       âœ” when empty
@firebase/firestore:       âœ” with multiple targets
@firebase/firestore:       âœ” with a not-current target
@firebase/firestore:       âœ” with a current target
@firebase/firestore:       âœ” with an errored target
@firebase/firestore:       âœ” garbage collects entry
@firebase/firestore:     combines client state
@firebase/firestore:       âœ” with targets from existing client
@firebase/firestore:       âœ” with targets from new client
@firebase/firestore:       âœ” with online state from new client
@firebase/firestore:       âœ” ignores online state from inactive client
@firebase/firestore: ERROR: '[2025-03-04T23:05:30.150Z]  @firebase/firestore:', 'Firestore (11.3.0): SharedClientState', 'Failed to parse client data for instance 'TmWJchJ7vw3JNwMypS4e': {"activeTargetIds":[5,"invalid"]}'
@firebase/firestore: ERROR: '[2025-03-04T23:05:30.150Z]  @firebase/firestore:', 'Firestore (11.3.0): SharedClientState', 'Failed to parse client data for instance 'TmWJchJ7vw3JNwMypS4e': {"activeTargetIds":[5,"invalid"]}'
@firebase/firestore:       âœ” ignores invalid data
@firebase/firestore:     processes mutation updates
@firebase/firestore:       âœ” for pending mutation
@firebase/firestore:       âœ” for acknowledged mutation
@firebase/firestore:       âœ” for rejected mutation
@firebase/firestore:       âœ” handles unauthenticated user
@firebase/firestore:       âœ” ignores different user
@firebase/firestore: ERROR: '[2025-03-04T23:05:30.178Z]  @firebase/firestore:', 'Firestore (11.3.0): SharedClientState', 'Failed to parse mutation state for ID '1': {"state":"invalid","updateTimeMs":1741129530178}'
@firebase/firestore: ERROR: '[2025-03-04T23:05:30.178Z]  @firebase/firestore:', 'Firestore (11.3.0): SharedClientState', 'Failed to parse mutation state for ID '1': {"state":"invalid","updateTimeMs":1741129530178}'
@firebase/firestore:       âœ” ignores invalid data
@firebase/firestore:     processes target updates
@firebase/firestore:       âœ” for added target
@firebase/firestore:       âœ” for removed target
@firebase/firestore:       âœ” for not-current target
@firebase/firestore:       âœ” for current target
@firebase/firestore:       âœ” for errored target
@firebase/firestore: ERROR: '[2025-03-04T23:05:30.207Z]  @firebase/firestore:', 'Firestore (11.3.0): SharedClientState', 'Failed to parse target state for ID '1': {"state":"invalid","updateTimeMs":1741129530207}'
@firebase/firestore: ERROR: '[2025-03-04T23:05:30.207Z]  @firebase/firestore:', 'Firestore (11.3.0): SharedClientState', 'Failed to parse target state for ID '1': {"state":"invalid","updateTimeMs":1741129530207}'
@firebase/firestore:       âœ” ignores invalid data
@firebase/firestore:     syncs sequence numbers
@firebase/firestore:       âœ” writes out new sequence numbers
@firebase/firestore:       âœ” notifies on new sequence numbers
@firebase/firestore:     processes bundles
@firebase/firestore:       âœ” writes out collection groups
@firebase/firestore:       âœ” supports empty collection groups
@firebase/firestore:   Document
@firebase/firestore:     âœ” can be constructed
@firebase/firestore:     âœ” returns fields correctly
@firebase/firestore:     âœ” equals to other same documents
@firebase/firestore:   DocumentSet
@firebase/firestore:     âœ” keeps documents in the right order
@firebase/firestore:     âœ” adds and deletes elements
@firebase/firestore:     âœ” updates documents
@firebase/firestore:     âœ” adds docs equal to comparator with different keys
@firebase/firestore:     âœ” equals to other document set with the same elements and order
@firebase/firestore:   field index
@firebase/firestore:     âœ” comparator includes collection group
@firebase/firestore:     âœ” comparator ignores index id
@firebase/firestore:     âœ” comparator ignores index offset
@firebase/firestore:     âœ” comparator includes field name
@firebase/firestore:     âœ” comparator includes segment kind
@firebase/firestore:     âœ” comparator includes segment length
@firebase/firestore:   index offset
@firebase/firestore:     âœ” supports comparison
@firebase/firestore:     âœ” advances seconds
@firebase/firestore:   Mutation
@firebase/firestore:     âœ” can apply sets to documents
@firebase/firestore:     âœ” can apply patches to documents
@firebase/firestore:     âœ” can apply patches with merges to missing documents
@firebase/firestore:     âœ” can apply patches with merges to null documents
@firebase/firestore:     âœ” will delete values from the field-mask
@firebase/firestore:     âœ” will patch a primitive value
@firebase/firestore:     âœ” patching a NoDocument yields a NoDocument
@firebase/firestore:     âœ” can apply local serverTimestamp transforms to documents
@firebase/firestore:     âœ” can create arrayUnion() transform.
@firebase/firestore:     âœ” can create arrayRemove() transform.
@firebase/firestore:     âœ” can apply local arrayUnion transform to missing field
@firebase/firestore:     âœ” can apply local arrayUnion transform to non-array field
@firebase/firestore:     âœ” can apply local arrayUnion transform with non-existing elements
@firebase/firestore:     âœ” can apply local arrayUnion transform with existing elements
@firebase/firestore:     âœ” can apply local arrayUnion transform with duplicate existing elements
@firebase/firestore:     âœ” can apply local arrayUnion transform with duplicate union elements
@firebase/firestore:     âœ” can apply local arrayUnion transform with non-primitive elements
@firebase/firestore:     âœ” can apply local arrayUnion transform with partially-overlapping elements
@firebase/firestore:     âœ” can apply local arrayRemove transform to missing field
@firebase/firestore:     âœ” can apply local arrayRemove transform to non-array field
@firebase/firestore:     âœ” can apply local arrayRemove transform with non-existing elements
@firebase/firestore:     âœ” can apply local arrayRemove transform with existing elements
@firebase/firestore:     âœ” can apply local arrayRemove transform with non-primitive elements
@firebase/firestore:     âœ” can apply server-acked serverTimestamp transform to documents
@firebase/firestore:     âœ” can apply server-acked array transforms to document
@firebase/firestore:     âœ” can apply numeric add transform to document
@firebase/firestore:     âœ” can apply numeric add transform to unexpected type
@firebase/firestore:     âœ” can apply numeric add transform to missing field
@firebase/firestore:     âœ” can apply numeric add transforms consecutively
@firebase/firestore:     âœ” can apply server-acked numeric add transform to document
@firebase/firestore:     âœ” can apply deletes to documents
@firebase/firestore:     âœ” can apply sets with mutation results
@firebase/firestore:     âœ” will apply patches with mutation results
@firebase/firestore:     âœ” transitions versions correctly
@firebase/firestore:     âœ” extracts null base value for non-transform mutation
@firebase/firestore:     âœ” extracts null base value for ServerTimestamp
@firebase/firestore:     âœ” extracts base value for increment
@firebase/firestore:     âœ” increment twice
@firebase/firestore:     âœ” overlay with no mutation
@firebase/firestore:     âœ” overlay with mutations fail by preconditions
@firebase/firestore:     âœ” overlay with patch on invalid document
@firebase/firestore:     âœ” overlay with one set mutation
@firebase/firestore:     âœ” overlay with one patch mutation
@firebase/firestore:     âœ” overlay with patch then merge
@firebase/firestore:     âœ” overlay with delete then patch
@firebase/firestore:     âœ” overlay with delete then merge
@firebase/firestore:     âœ” overlay with patch then patch to delete field
@firebase/firestore:     âœ” overlay with patch then merge with array union
@firebase/firestore:     âœ” overlay with array union then remove
@firebase/firestore:     âœ” overlay with set then increment
@firebase/firestore:     âœ” overlay with set then patch on deleted doc
@firebase/firestore:     âœ” overlay with field deletion of nested field
@firebase/firestore:     âœ” overlay created from empty set with merge
@firebase/firestore:     âœ” overlay with mutation with multiple deletes
@firebase/firestore:     âœ” overlay by combinations and permutations
@firebase/firestore:     âœ” overlay by combinations and permutations for array transforms
@firebase/firestore:     âœ” overlay by combinations and permutations for increments
@firebase/firestore:   ObjectValue
@firebase/firestore:     âœ” can extract fields
@firebase/firestore:     âœ” can overwrite existing fields
@firebase/firestore:     âœ” can add new fields
@firebase/firestore:     âœ” can add multiple new fields
@firebase/firestore:     âœ” can implicitly create objects
@firebase/firestore:     âœ” can overwrite primitive values to create objects
@firebase/firestore:     âœ” can add to nested objects
@firebase/firestore:     âœ” can delete keys
@firebase/firestore:     âœ” can delete nested keys
@firebase/firestore:     âœ” can delete added keys
@firebase/firestore:     âœ” can delete, resulting in empty object
@firebase/firestore:     âœ” will not delete nested keys on primitive values
@firebase/firestore:     âœ” can delete multiple fields
@firebase/firestore:     âœ” provides field mask
@firebase/firestore:   MutableObjectValue
@firebase/firestore:     âœ” supports empty objectValues
@firebase/firestore:     âœ” sets single field
@firebase/firestore:     âœ” sets empty object
@firebase/firestore:     âœ” sets multiple fields
@firebase/firestore:     âœ” sets nested fields
@firebase/firestore:     âœ” sets two fields in nested object
@firebase/firestore:     âœ” sets field in nested object
@firebase/firestore:     âœ” sets deeply nested field in nested object
@firebase/firestore:     âœ” sets nested field multiple times
@firebase/firestore:     âœ” sets and deletes field
@firebase/firestore:     âœ” sets and deletes nested field
@firebase/firestore:     âœ” sets single field in existing object
@firebase/firestore:     âœ” overwrites field
@firebase/firestore:     âœ” overwrites nested field
@firebase/firestore:     âœ” overwrites deeply nested field
@firebase/firestore:     âœ” merges existing object
@firebase/firestore:     âœ” overwrites nested object
@firebase/firestore:     âœ” replaces nested object
@firebase/firestore:     âœ” deletes single field
@firebase/firestore:     âœ” deletes nested object
@firebase/firestore:     âœ” deletes non-existing field
@firebase/firestore:     âœ” deletes non-existing nested field
@firebase/firestore:   Path
@firebase/firestore:     âœ” can be constructed
@firebase/firestore:     âœ” can index into itself
@firebase/firestore:     âœ” can be constructed with offsets
@firebase/firestore:     âœ” can pop front repeatedly
@firebase/firestore:     âœ” can yield the last segment
@firebase/firestore:     âœ” can create child path
@firebase/firestore:     âœ” can pop last repeatedly
@firebase/firestore:     âœ” compares correctly
@firebase/firestore:     âœ” determines prefix correctly
@firebase/firestore:     âœ” escapes FieldPath with segments
@firebase/firestore:     âœ” can be constructed from field path.
@firebase/firestore:     fails to construct from invalid field path
@firebase/firestore:       âœ” ""
@firebase/firestore:       âœ” "foo\"
@firebase/firestore:       âœ” "foo\x"
@firebase/firestore:       âœ” "foo."
@firebase/firestore:       âœ” ".foo"
@firebase/firestore:       âœ” "foo..bar"
@firebase/firestore:   Target Bounds
@firebase/firestore:     âœ” empty query
@firebase/firestore:     âœ” equals query with ascending index
@firebase/firestore:     âœ” equals query with descending index
@firebase/firestore:     âœ” less than query with ascending index
@firebase/firestore:     âœ” less than query with descending index
@firebase/firestore:     âœ” less than or equals query with ascending index
@firebase/firestore:     âœ” less than or equals query with descending index
@firebase/firestore:     âœ” greater than query with ascending index
@firebase/firestore:     âœ” greater than query with descending index
@firebase/firestore:     âœ” greater than or equals query with ascending index
@firebase/firestore:     âœ” greater than or equals query with descending index
@firebase/firestore:     âœ” arrayContains query
@firebase/firestore:     âœ” arrayContainsAny query
@firebase/firestore:     âœ” orderBy query
@firebase/firestore:     âœ” orderBy query with filter
@firebase/firestore:     âœ” startAt query
@firebase/firestore:     âœ” startAt query with filter
@firebase/firestore:     âœ” startAfter query with filter
@firebase/firestore:     âœ” startAfter does not change bound if not applicable
@firebase/firestore:     âœ” endAt query
@firebase/firestore:     âœ” endAt query with filter
@firebase/firestore:     âœ” endBefore query with filter
@firebase/firestore:     âœ” endBefore does not change bound if not applicable
@firebase/firestore:     âœ” partial index match with bound
@firebase/firestore:     âœ” can use merge join
@firebase/firestore:     âœ” can use partial index
@firebase/firestore:     âœ” cannot use overspecified index
@firebase/firestore:     âœ” equalities with default order
@firebase/firestore:     âœ” equalities with ascending order
@firebase/firestore:     âœ” equalities with descending order
@firebase/firestore:     âœ” inequalities with default order
@firebase/firestore:     âœ” inequalities with ascending order
@firebase/firestore:     âœ” inequalities with descending order
@firebase/firestore:     âœ” inequality uses single field index
@firebase/firestore:     âœ” is query uses merge join
@firebase/firestore: ERROR: '[2025-03-04T23:05:31.046Z]  @firebase/firestore:', 'Firestore (11.3.0): FIRESTORE (11.3.0) INTERNAL ASSERTION FAILED: Collection IDs do not match'
@firebase/firestore: ERROR: '[2025-03-04T23:05:31.046Z]  @firebase/firestore:', 'Firestore (11.3.0): FIRESTORE (11.3.0) INTERNAL ASSERTION FAILED: Collection IDs do not match'
@firebase/firestore:     âœ” validates collection
@firebase/firestore:     âœ” with array-contains
@firebase/firestore:     âœ” array-contains is independent
@firebase/firestore:     âœ” with array-contains and order by
@firebase/firestore:     âœ” with equality and descending order
@firebase/firestore:     âœ” with multiple equalities
@firebase/firestore:     âœ” with multiple equalities and inequality
@firebase/firestore:     âœ” with orderBy
@firebase/firestore:     âœ” with not equals
@firebase/firestore:     âœ” with multiple filters
@firebase/firestore:     âœ” multiple filters require matching prefix
@firebase/firestore:     âœ” with multiple filters and orderBy
@firebase/firestore:     âœ” with multiple inequalities
@firebase/firestore:     âœ” with multiple notIns
@firebase/firestore:     âœ” with multiple orderBys
@firebase/firestore:     âœ” with in and notIn
@firebase/firestore:     âœ” with equality and different order by
@firebase/firestore:     âœ” with equals and not in
@firebase/firestore:     âœ” with in and orderBy
@firebase/firestore:     âœ” with in and orderBy on same field
@firebase/firestore:     âœ” with equality and inequality on the same field
@firebase/firestore:     buildTargetIndex()
@firebase/firestore:       âœ” queries with equalities
@firebase/firestore:       âœ” queries with inequalities
@firebase/firestore:       âœ” queries with array contains
@firebase/firestore:       âœ” queries with order bys
@firebase/firestore:       âœ” queries with inequalities uses single field index
@firebase/firestore:       âœ” query of a collection
@firebase/firestore:       âœ” query with array contains and order by
@firebase/firestore:       âœ” query with equality and descending order
@firebase/firestore:       âœ” query with multiple equalities
@firebase/firestore:       âœ” query with in and not in filters
@firebase/firestore:       âœ” query with equals and not-in filters
@firebase/firestore:       query with multiple equalities and inequality
@firebase/firestore:         âœ” inequality last
@firebase/firestore:         âœ” inequality in middle
@firebase/firestore:       query with multiple filters
@firebase/firestore:         âœ” == and > on different fields
@firebase/firestore:         âœ” >=, ==, and <= filters on the same field
@firebase/firestore:         âœ” not-in and >= on the same field
@firebase/firestore:       query with multiple order-bys
@firebase/firestore:         âœ” order by fff, bar desc, __name__
@firebase/firestore:         âœ” order by foo, bar, __name__ desc
@firebase/firestore:       query with equality and different order-by
@firebase/firestore:         âœ” filter on foo and bar, order by qux
@firebase/firestore:         âœ” filter on aaa, qqq, ccc, order by fff, bbb
@firebase/firestore:       query with in and order-by
@firebase/firestore:         âœ” on different fields
@firebase/firestore:         âœ” on the same field
@firebase/firestore:       query with multiple inequality
@firebase/firestore:         âœ” returns null
@firebase/firestore:   Values
@firebase/firestore:     âœ” compares values for equality
@firebase/firestore:     âœ” normalizes values for equality
@firebase/firestore:     âœ” orders types correctly
@firebase/firestore:     âœ” normalizes values for comparison
@firebase/firestore:     âœ” estimates size correctly for fixed sized values
@firebase/firestore:     âœ” estimates size correctly for relatively sized values
@firebase/firestore:     âœ” computes lower bound
@firebase/firestore:     âœ” computes upper bound
@firebase/firestore:     âœ” canonicalizes values
@firebase/firestore:     âœ” canonical IDs ignore sort order
@firebase/firestore:     âœ” clones properties without normalization
@firebase/firestore:   BloomFilter
@firebase/firestore:     âœ” can instantiate an empty bloom filter
@firebase/firestore:     âœ” should throw error if empty bloom filter inputs are invalid
@firebase/firestore:     âœ” can instantiate a non empty bloom filter
@firebase/firestore:     âœ” should throw error if padding is invalid
@firebase/firestore:     âœ” should throw error if hash count is negative
@firebase/firestore:     âœ” should throw error if hash count is 0 for non empty bloom filter
@firebase/firestore:     âœ” should be able to process non standard characters
@firebase/firestore:     âœ” mightContain in empty bloom filter should always return false
@firebase/firestore:     âœ” mightContain on empty string might return false positive result
@firebase/firestore:     BloomFilter golden tests
@firebase/firestore:       âœ” mightContain result for 1 document with 1 false positive rate
@firebase/firestore:       âœ” mightContain result for 1 document with 0.01 false positive rate
@firebase/firestore:       âœ” mightContain result for 1 document with 0.0001 false positive rate
@firebase/firestore:       âœ” mightContain result for 500 documents with 1 false positive rate
@firebase/firestore:       âœ” mightContain result for 500 documents with 0.01 false positive rate
@firebase/firestore:       âœ” mightContain result for 500 document with 0.0001 false positive rate
@firebase/firestore:       âœ” mightContain result for 5000 documents with 1 false positive rate
@firebase/firestore:       âœ” mightContain result for 5000 documents with 0.01 false positive rate
@firebase/firestore:       âœ” mightContain result for 5000 documents with 0.0001 false positive rate
@firebase/firestore:       âœ– mightContain result for 50000 documents with 1 false positive rate (skipped)
@firebase/firestore:       âœ– mightContain result for 50000 documents with 0.01 false positive rate (skipped)
@firebase/firestore:       âœ– mightContain result for 50000 documents with 0.0001 false positive rate (skipped)
@firebase/firestore:   Datastore
@firebase/firestore:     âœ” newDatastore() returns an an instance of Datastore
@firebase/firestore:     âœ” DatastoreImpl.invokeRPC() fails if terminated
@firebase/firestore:     âœ” Connection.terminate() invoked if Datastore terminated
@firebase/firestore:     âœ” DatastoreImpl.invokeRPC() rethrows a FirestoreError
@firebase/firestore:     âœ” DatastoreImpl.invokeRPC() wraps unknown exceptions in a FirestoreError
@firebase/firestore:     âœ” DatastoreImpl.invokeRPC() invalidates the token if unauthenticated
@firebase/firestore:     âœ” DatastoreImpl.invokeStreamingRPC() fails if terminated
@firebase/firestore:     âœ” DatastoreImpl.invokeStreamingRPC() rethrows a FirestoreError
@firebase/firestore:     âœ” DatastoreImpl.invokeStreamingRPC() wraps unknown exceptions in a FirestoreError
@firebase/firestore:     âœ” DatastoreImpl.invokeStreamingRPC() invalidates the token if unauthenticated
@firebase/firestore:   RemoteEvent
@firebase/firestore:     âœ” will accumulate document added and removed events
@firebase/firestore:     âœ” will ignore events for pending targets
@firebase/firestore:     âœ” will ignore events for removed targets
@firebase/firestore:     âœ” will keep reset mapping even with updates
@firebase/firestore:     âœ” will handle single reset
@firebase/firestore:     âœ” will handle target add and removal in same batch
@firebase/firestore:     âœ” target current change will mark the target current
@firebase/firestore:     âœ” target added change will reset previous state
@firebase/firestore:     âœ” no change will still mark the affected targets
@firebase/firestore:     âœ” existence filters clears target mapping
@firebase/firestore:     âœ” existence filters removes current changes
@firebase/firestore:     âœ” handles document update
@firebase/firestore:     âœ” only raises events for updated targets
@firebase/firestore:     âœ” synthesizes deletes
@firebase/firestore:     âœ” doesn't synthesize deletes in the wrong state
@firebase/firestore:     âœ” separates document updates
@firebase/firestore:     âœ” tracks limbo documents
@firebase/firestore:   RestConnection
@firebase/firestore:     âœ” url uses from path
@firebase/firestore:     âœ” merges headers
@firebase/firestore:     âœ” empty app check token is not added to headers
@firebase/firestore:     âœ” returns success
@firebase/firestore: WARN: '[2025-03-04T23:05:31.462Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'RunQuery' 0x1892623f failed with error: ', '{"code":"unknown","name":"FirebaseError"}', 'url: ', 'http://example.com/v1/projects/testproject/databases/(default)/documents/coll:runQuery', 'request:', '{}'
@firebase/firestore: WARN: '[2025-03-04T23:05:31.462Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'RunQuery' 0x1892623f failed with error: ', '{"code":"unknown","name":"FirebaseError"}', 'url: ', 'http://example.com/v1/projects/testproject/databases/(default)/documents/coll:runQuery', 'request:', '{}'
@firebase/firestore:     âœ” returns error
@firebase/firestore:   Serializer
@firebase/firestore:     âœ” toDocument() / fromDocument
@firebase/firestore:     âœ” encodes listen request labels
@firebase/firestore:     converts value
@firebase/firestore:       âœ” converts NullValue
@firebase/firestore:       âœ” converts BooleanValue
@firebase/firestore:       âœ” converts IntegerValue
@firebase/firestore:       âœ” converts DoubleValue
@firebase/firestore:       âœ” converts NaN
@firebase/firestore:       âœ” converts Infinity
@firebase/firestore:       âœ” converts StringValue
@firebase/firestore:       âœ” converts TimestampValue from proto
@firebase/firestore:       âœ” converts TimestampValue from string
@firebase/firestore:       âœ” converts TimestampValue to string (useProto3Json=true)
@firebase/firestore:       âœ” converts GeoPointValue
@firebase/firestore:       âœ” converts BlobValue
@firebase/firestore:       âœ” converts ArrayValue
@firebase/firestore:       âœ” converts empty ArrayValue
@firebase/firestore:       âœ” converts empty ObjectValue
@firebase/firestore:       âœ” converts nested ObjectValues
@firebase/firestore:       âœ” converts RefValue
@firebase/firestore:       âœ” converts VectorValue
@firebase/firestore:     toKey
@firebase/firestore:       âœ” converts an empty key
@firebase/firestore:       âœ” converts a regular key
@firebase/firestore:       âœ” converts a long key
@firebase/firestore:     fromKey
@firebase/firestore:       âœ” converts an empty key
@firebase/firestore:       âœ” converts a regular key
@firebase/firestore:       âœ” converts default-value containing key
@firebase/firestore:     toDocumentMask
@firebase/firestore:       âœ– converts a weird path (skipped)
@firebase/firestore:     fromDocumentMask
@firebase/firestore:       âœ– converts a weird path (skipped)
@firebase/firestore:     toMutation
@firebase/firestore:       âœ” converts DeleteMutation
@firebase/firestore:     toMutation / fromMutation
@firebase/firestore:       âœ” SetMutation
@firebase/firestore:       âœ” PatchMutation
@firebase/firestore:       âœ” PatchMutation without precondition
@firebase/firestore:       âœ” DeleteMutation
@firebase/firestore:       âœ” ServerTimestamp transform
@firebase/firestore:       âœ” Numeric Add transform
@firebase/firestore:       âœ” Array transforms
@firebase/firestore:       âœ” SetMutation with precondition
@firebase/firestore:       âœ” VerifyMutation
@firebase/firestore:     to/from UnaryOrFieldFilter
@firebase/firestore:       âœ” makes dotted-property names
@firebase/firestore:       âœ” converts NotEqual
@firebase/firestore:       âœ” converts LessThan
@firebase/firestore:       âœ” converts LessThanOrEqual
@firebase/firestore:       âœ” converts GreaterThan
@firebase/firestore:       âœ” converts GreaterThanOrEqual
@firebase/firestore:       âœ” converts key field
@firebase/firestore:       âœ” converts array-contains
@firebase/firestore:       âœ” converts IN
@firebase/firestore:       âœ” converts not-in
@firebase/firestore:       âœ” converts not-in with null
@firebase/firestore:       âœ” converts array-contains-any
@firebase/firestore:     to/from UnaryFilter
@firebase/firestore:       âœ” converts null
@firebase/firestore:       âœ” converts Nan
@firebase/firestore:       âœ” converts not null
@firebase/firestore:       âœ” converts not NaN
@firebase/firestore:     to/from CompositeFilter
@firebase/firestore:       âœ” converts deep collections
@firebase/firestore:       âœ” converts deep collections 
@firebase/firestore:     toTarget
@firebase/firestore:       âœ” converts first-level key queries
@firebase/firestore:       âœ” converts first-level ancestor queries
@firebase/firestore:       âœ” converts nested ancestor queries
@firebase/firestore:       âœ” converts single filters at first-level collections
@firebase/firestore:       âœ” converts multiple filters at first-level collections
@firebase/firestore:       âœ” converts single filters on deeper collections
@firebase/firestore:       âœ” converts multi-layer composite filters with OR at the first layer
@firebase/firestore:       âœ” converts multi-layer composite filters with AND at the first layer
@firebase/firestore:       âœ” converts order bys
@firebase/firestore:       âœ” converts limits
@firebase/firestore:       âœ” converts startAt/endAt
@firebase/firestore:       âœ” converts resume tokens
@firebase/firestore:     to/from OperatorName
@firebase/firestore:       âœ” contains all Operators
@firebase/firestore:     to/from Direction
@firebase/firestore:       âœ” contains all Directions
@firebase/firestore:     to/from PropertyOrder
@firebase/firestore:       âœ” renders ascending
@firebase/firestore:       âœ” renders descending
@firebase/firestore:     fromWatchChange
@firebase/firestore:       âœ” converts target change with added
@firebase/firestore:       âœ” converts target change with removed
@firebase/firestore:       âœ” converts target change with no_change
@firebase/firestore:       âœ” converts target change with no_change (omitted in JSON)
@firebase/firestore:       âœ” converts target change with snapshot version
@firebase/firestore:       âœ” converts document change with target ids
@firebase/firestore:       âœ” converts document change with removed target ids
@firebase/firestore:       âœ” converts document change with deletions
@firebase/firestore:       âœ” converts document removes
@firebase/firestore:   Bundles:
@firebase/firestore:     âœ” (Persistence) Newer docs from bundles should overwrite cache
@firebase/firestore:     âœ” (Memory) Newer docs from bundles should overwrite cache
@firebase/firestore:     âœ” (Persistence) Newer deleted docs from bundles should delete cached docs
@firebase/firestore:     âœ” (Memory) Newer deleted docs from bundles should delete cached docs
@firebase/firestore:     âœ” (Persistence) Older deleted docs from bundles should do nothing
@firebase/firestore:     âœ” (Memory) Older deleted docs from bundles should do nothing
@firebase/firestore:     âœ” (Persistence) Newer docs from bundles should raise snapshot only when Watch catches up with acknowledged writes
@firebase/firestore:     âœ” (Memory) Newer docs from bundles should raise snapshot only when Watch catches up with acknowledged writes
@firebase/firestore:     âœ” (Persistence) Newer docs from bundles should keep not raise snapshot if there are unacknowledged writes
@firebase/firestore:     âœ” (Memory) Newer docs from bundles should keep not raise snapshot if there are unacknowledged writes
@firebase/firestore:     âœ” (Persistence) Newer docs from bundles might lead to limbo doc
@firebase/firestore:     âœ” (Memory) Newer docs from bundles might lead to limbo doc
@firebase/firestore:     âœ” (Persistence) Bundles query can be resumed from same query.
@firebase/firestore:     âœ” (Memory) Bundles query can be resumed from same query.
@firebase/firestore:     âœ” (Persistence) Bundles query can be loaded and resumed from different tabs
@firebase/firestore:     âœ– (Memory) Bundles query can be loaded and resumed from different tabs (skipped)
@firebase/firestore:     âœ” (Persistence) Load from secondary clients and observe from primary
@firebase/firestore:     âœ– (Memory) Load from secondary clients and observe from primary (skipped)
@firebase/firestore:     âœ” (Persistence) Load and observe from same secondary client
@firebase/firestore:     âœ– (Memory) Load and observe from same secondary client (skipped)
@firebase/firestore:     âœ” (Persistence) Load from primary client and observe from secondary
@firebase/firestore:     âœ– (Memory) Load from primary client and observe from secondary (skipped)
@firebase/firestore:   Collections:
@firebase/firestore:     âœ” (Persistence) Events are raised after watch ack
@firebase/firestore:     âœ” (Memory) Events are raised after watch ack
@firebase/firestore:     âœ” (Persistence) Events are raised for local sets before watch ack
@firebase/firestore:     âœ” (Memory) Events are raised for local sets before watch ack
@firebase/firestore:   Existence Filters:
@firebase/firestore:     âœ” (Persistence) Existence filter match
@firebase/firestore:     âœ” (Memory) Existence filter match
@firebase/firestore:     âœ” (Persistence) Existence filter match after pending update
@firebase/firestore:     âœ” (Memory) Existence filter match after pending update
@firebase/firestore:     âœ” (Persistence) Existence filter with empty target
@firebase/firestore:     âœ” (Memory) Existence filter with empty target
@firebase/firestore:     âœ” (Persistence) Existence filter ignored with pending target
@firebase/firestore:     âœ” (Memory) Existence filter ignored with pending target
@firebase/firestore:     âœ” (Persistence) Existence filter mismatch triggers re-run of query
@firebase/firestore:     âœ” (Memory) Existence filter mismatch triggers re-run of query
@firebase/firestore:     âœ” (Persistence) Existence filter mismatch will drop resume token
@firebase/firestore:     âœ” (Memory) Existence filter mismatch will drop resume token
@firebase/firestore:     âœ” (Persistence) Existence filter handled at global snapshot
@firebase/firestore:     âœ” (Memory) Existence filter handled at global snapshot
@firebase/firestore:     âœ” (Persistence) Existence filter synthesizes deletes
@firebase/firestore:     âœ” (Memory) Existence filter synthesizes deletes
@firebase/firestore:     âœ” (Persistence) Existence filter limbo resolution is denied
@firebase/firestore:     âœ” (Memory) Existence filter limbo resolution is denied
@firebase/firestore:     âœ” (Persistence) Existence filter clears resume token
@firebase/firestore:     âœ– (Memory) Existence filter clears resume token (skipped)
@firebase/firestore:     âœ” (Persistence) Full re-query is skipped when bloom filter can identify documents deleted
@firebase/firestore:     âœ” (Memory) Full re-query is skipped when bloom filter can identify documents deleted
@firebase/firestore:     âœ” (Persistence) Full re-query is triggered when bloom filter cannot identify documents deleted
@firebase/firestore:     âœ” (Memory) Full re-query is triggered when bloom filter cannot identify documents deleted
@firebase/firestore:     âœ” (Persistence) Bloom filter can process special characters in document name
@firebase/firestore:     âœ” (Memory) Bloom filter can process special characters in document name
@firebase/firestore: WARN: '[2025-03-04T23:05:31.769Z]  @firebase/firestore:', 'Firestore (11.3.0): BloomFilter error: ', '{"name":"BloomFilterError"}'
@firebase/firestore: WARN: '[2025-03-04T23:05:31.769Z]  @firebase/firestore:', 'Firestore (11.3.0): BloomFilter error: ', '{"name":"BloomFilterError"}'
@firebase/firestore:     âœ” (Persistence) Bloom filter fills in default values for undefined padding and hashCount
@firebase/firestore: WARN: '[2025-03-04T23:05:31.772Z]  @firebase/firestore:', 'Firestore (11.3.0): BloomFilter error: ', '{"name":"BloomFilterError"}'
@firebase/firestore: WARN: '[2025-03-04T23:05:31.772Z]  @firebase/firestore:', 'Firestore (11.3.0): BloomFilter error: ', '{"name":"BloomFilterError"}'
@firebase/firestore:     âœ” (Memory) Bloom filter fills in default values for undefined padding and hashCount
@firebase/firestore: WARN: '[2025-03-04T23:05:31.780Z]  @firebase/firestore:', 'Firestore (11.3.0): Decoding the base64 bloom filter in existence filter failed (Invalid base64 string: InvalidCharacterError: Failed to execute 'atob' on 'Window': The string to be decoded is not correctly encoded.); ignoring the bloom filter and falling back to full re-query.'
@firebase/firestore: WARN: '[2025-03-04T23:05:31.780Z]  @firebase/firestore:', 'Firestore (11.3.0): Decoding the base64 bloom filter in existence filter failed (Invalid base64 string: InvalidCharacterError: Failed to execute 'atob' on 'Window': The string to be decoded is not correctly encoded.); ignoring the bloom filter and falling back to full re-query.'
@firebase/firestore:     âœ” (Persistence) Full re-query is triggered when bloom filter bitmap is invalid
@firebase/firestore: WARN: '[2025-03-04T23:05:31.783Z]  @firebase/firestore:', 'Firestore (11.3.0): Decoding the base64 bloom filter in existence filter failed (Invalid base64 string: InvalidCharacterError: Failed to execute 'atob' on 'Window': The string to be decoded is not correctly encoded.); ignoring the bloom filter and falling back to full re-query.'
@firebase/firestore: WARN: '[2025-03-04T23:05:31.783Z]  @firebase/firestore:', 'Firestore (11.3.0): Decoding the base64 bloom filter in existence filter failed (Invalid base64 string: InvalidCharacterError: Failed to execute 'atob' on 'Window': The string to be decoded is not correctly encoded.); ignoring the bloom filter and falling back to full re-query.'
@firebase/firestore:     âœ” (Memory) Full re-query is triggered when bloom filter bitmap is invalid
@firebase/firestore: WARN: '[2025-03-04T23:05:31.788Z]  @firebase/firestore:', 'Firestore (11.3.0): BloomFilter error: ', '{"name":"BloomFilterError"}'
@firebase/firestore: WARN: '[2025-03-04T23:05:31.788Z]  @firebase/firestore:', 'Firestore (11.3.0): BloomFilter error: ', '{"name":"BloomFilterError"}'
@firebase/firestore:     âœ” (Persistence) Full re-query is triggered when bloom filter hashCount is invalid
@firebase/firestore: WARN: '[2025-03-04T23:05:31.791Z]  @firebase/firestore:', 'Firestore (11.3.0): BloomFilter error: ', '{"name":"BloomFilterError"}'
@firebase/firestore: WARN: '[2025-03-04T23:05:31.791Z]  @firebase/firestore:', 'Firestore (11.3.0): BloomFilter error: ', '{"name":"BloomFilterError"}'
@firebase/firestore:     âœ” (Memory) Full re-query is triggered when bloom filter hashCount is invalid
@firebase/firestore:     âœ” (Persistence) Full re-query is triggered when bloom filter is empty
@firebase/firestore:     âœ” (Memory) Full re-query is triggered when bloom filter is empty
@firebase/firestore:     âœ” (Persistence) Same documents can have different bloom filters
@firebase/firestore:     âœ” (Memory) Same documents can have different bloom filters
@firebase/firestore:     âœ” (Persistence) Bloom filter is handled at global snapshot
@firebase/firestore:     âœ” (Memory) Bloom filter is handled at global snapshot
@firebase/firestore:     âœ” (Persistence) Bloom filter limbo resolution is denied
@firebase/firestore:     âœ” (Memory) Bloom filter limbo resolution is denied
@firebase/firestore:     âœ” (Persistence) Bloom filter with large size works as expected
@firebase/firestore:     âœ” (Memory) Bloom filter with large size works as expected
@firebase/firestore:     âœ” (Persistence) Resume a query with bloom filter when there is no document changes
@firebase/firestore:     âœ” (Memory) Resume a query with bloom filter when there is no document changes
@firebase/firestore:     âœ” (Persistence) Resume a query with bloom filter when new documents are added
@firebase/firestore:     âœ” (Memory) Resume a query with bloom filter when new documents are added
@firebase/firestore:     âœ” (Persistence) Resume a query with bloom filter when existing docs are updated
@firebase/firestore:     âœ” (Memory) Resume a query with bloom filter when existing docs are updated
@firebase/firestore:     âœ” (Persistence) Resume a query with bloom filter when documents are updated to no longer match the query
@firebase/firestore:     âœ” (Memory) Resume a query with bloom filter when documents are updated to no longer match the query
@firebase/firestore:     âœ” (Persistence) Resume a query with bloom filter when documents are added, removed and deleted
@firebase/firestore:     âœ” (Memory) Resume a query with bloom filter when documents are added, removed and deleted
@firebase/firestore:   Garbage Collection:
@firebase/firestore:     âœ– (Persistence) Contents of query are cleared when listen is removed. (skipped)
@firebase/firestore:     âœ” (Memory) Contents of query are cleared when listen is removed.
@firebase/firestore:     âœ” (Persistence) Contents of query are kept after listen is removed.
@firebase/firestore:     âœ” (Memory) Contents of query are kept after listen is removed.
@firebase/firestore:     âœ” (Persistence) Contents of query are kept after listen is removed, and GC threshold is not reached
@firebase/firestore:     âœ” (Memory) Contents of query are kept after listen is removed, and GC threshold is not reached
@firebase/firestore:     âœ” (Persistence) Contents of query are removed after listen is removed, and GC threshold is reached
@firebase/firestore:     âœ” (Memory) Contents of query are removed after listen is removed, and GC threshold is reached
@firebase/firestore:     âœ” (Persistence) Contents of active query are kept while inactive results are removed after GC
@firebase/firestore:     âœ” (Memory) Contents of active query are kept while inactive results are removed after GC
@firebase/firestore:   Client Side Index
@firebase/firestore:     âœ” (Persistence) Index Creation visible on all clients
@firebase/firestore:     âœ– (Memory) Index Creation visible on all clients (skipped)
@firebase/firestore:     âœ” (Persistence) Index Creation succeeds even if not primary
@firebase/firestore:     âœ– (Memory) Index Creation succeeds even if not primary (skipped)
@firebase/firestore:   Limbo Documents:
@firebase/firestore:     âœ” (Persistence) Limbo documents are deleted without an existence filter
@firebase/firestore:     âœ” (Memory) Limbo documents are deleted without an existence filter
@firebase/firestore:     âœ” (Persistence) Limbo documents are deleted with an existence filter
@firebase/firestore:     âœ” (Memory) Limbo documents are deleted with an existence filter
@firebase/firestore:     âœ” (Persistence) Limbo documents are resolved with updates
@firebase/firestore:     âœ” (Memory) Limbo documents are resolved with updates
@firebase/firestore:     âœ” (Persistence) Limbo documents are resolved with updates in different snapshot than "current"
@firebase/firestore:     âœ” (Memory) Limbo documents are resolved with updates in different snapshot than "current"
@firebase/firestore:     âœ” (Persistence) Document remove message will cause docs to go in limbo
@firebase/firestore:     âœ” (Memory) Document remove message will cause docs to go in limbo
@firebase/firestore:     âœ” (Persistence) Limbo resolution handles snapshot before CURRENT
@firebase/firestore:     âœ” (Memory) Limbo resolution handles snapshot before CURRENT
@firebase/firestore:     âœ” (Persistence) Limbo resolution handles snapshot before CURRENT [no document update]
@firebase/firestore:     âœ” (Memory) Limbo resolution handles snapshot before CURRENT [no document update]
@firebase/firestore:     âœ” (Persistence) Failed limbo resolution removes document from view
@firebase/firestore:     âœ” (Memory) Failed limbo resolution removes document from view
@firebase/firestore:     âœ” (Persistence) Limbo docs are resolved by primary client
@firebase/firestore:     âœ– (Memory) Limbo docs are resolved by primary client (skipped)
@firebase/firestore:     âœ” (Persistence) Limbo documents are resolved after primary tab failover
@firebase/firestore:     âœ– (Memory) Limbo documents are resolved after primary tab failover (skipped)
@firebase/firestore:     âœ” (Persistence) Limbo documents survive primary state transitions
@firebase/firestore:     âœ– (Memory) Limbo documents survive primary state transitions (skipped)
@firebase/firestore:     âœ” (Persistence) Limbo documents stay consistent between views
@firebase/firestore:     âœ” (Memory) Limbo documents stay consistent between views
@firebase/firestore:     âœ” (Persistence) LimitToLast query from secondary results in no expected limbo doc
@firebase/firestore:     âœ– (Memory) LimitToLast query from secondary results in no expected limbo doc (skipped)
@firebase/firestore:     âœ” (Persistence) LimitToLast query from secondary results in expected limbo doc
@firebase/firestore:     âœ– (Memory) LimitToLast query from secondary results in expected limbo doc (skipped)
@firebase/firestore:     âœ” (Persistence) Limbo resolution throttling with all results at once from watch
@firebase/firestore:     âœ” (Memory) Limbo resolution throttling with all results at once from watch
@firebase/firestore:     âœ” (Persistence) Limbo resolution throttling with results one at a time from watch
@firebase/firestore:     âœ” (Memory) Limbo resolution throttling with results one at a time from watch
@firebase/firestore:     âœ” (Persistence) Limbo resolution throttling when a limbo listen is rejected.
@firebase/firestore:     âœ” (Memory) Limbo resolution throttling when a limbo listen is rejected.
@firebase/firestore:     âœ” (Persistence) Limbo resolution throttling with existence filter mismatch
@firebase/firestore:     âœ” (Memory) Limbo resolution throttling with existence filter mismatch
@firebase/firestore:     âœ” (Persistence) Limbo resolution should wait for full re-query result if there is an existence filter mismatch 
@firebase/firestore:     âœ” (Memory) Limbo resolution should wait for full re-query result if there is an existence filter mismatch 
@firebase/firestore:     âœ” (Persistence) Limbo resolution throttling with bloom filter application
@firebase/firestore:     âœ” (Memory) Limbo resolution throttling with bloom filter application
@firebase/firestore:     âœ” (Persistence) A limbo resolution for a document should not be started if one is already active
@firebase/firestore:     âœ” (Memory) A limbo resolution for a document should not be started if one is already active
@firebase/firestore:     âœ” (Persistence) A limbo resolution for a document should not be enqueued if one is already enqueued
@firebase/firestore:     âœ” (Memory) A limbo resolution for a document should not be enqueued if one is already enqueued
@firebase/firestore:     âœ” (Persistence) A limbo resolution for a document should be removed from the queue when the last query listen stops
@firebase/firestore:     âœ” (Memory) A limbo resolution for a document should be removed from the queue when the last query listen stops
@firebase/firestore:     âœ” (Persistence) Fix #8474 - Limbo resolution for document is removed even if document updates for the document occurred before documentDelete in the global snapshot window
@firebase/firestore:     âœ” (Memory) Fix #8474 - Limbo resolution for document is removed even if document updates for the document occurred before documentDelete in the global snapshot window
@firebase/firestore:     âœ” (Persistence) Fix #8474 - Limbo resolution for document is removed even if document updates for the document occurred in the global snapshot window and no document delete was received for the limbo resolution query
@firebase/firestore:     âœ” (Memory) Fix #8474 - Limbo resolution for document is removed even if document updates for the document occurred in the global snapshot window and no document delete was received for the limbo resolution query
@firebase/firestore:     âœ” (Persistence) Fix #8474 - Handles code path of no ack for limbo resolution query before global snapshot
@firebase/firestore:     âœ” (Memory) Fix #8474 - Handles code path of no ack for limbo resolution query before global snapshot
@firebase/firestore:   Limits:
@firebase/firestore:     âœ” (Persistence) Documents in limit are replaced by remote event
@firebase/firestore:     âœ” (Memory) Documents in limit are replaced by remote event
@firebase/firestore:     âœ” (Persistence) Documents outside of limit don't raise hasPendingWrites
@firebase/firestore:     âœ” (Memory) Documents outside of limit don't raise hasPendingWrites
@firebase/firestore:     âœ” (Persistence) Deleted Document in limbo in full limit query
@firebase/firestore:     âœ” (Memory) Deleted Document in limbo in full limit query
@firebase/firestore:     âœ” (Persistence) Documents in limit can handle removed messages
@firebase/firestore:     âœ” (Memory) Documents in limit can handle removed messages
@firebase/firestore:     âœ” (Persistence) Documents in limit are can handle removed messages for only one of many query
@firebase/firestore:     âœ” (Memory) Documents in limit are can handle removed messages for only one of many query
@firebase/firestore:     âœ” (Persistence) Limits are re-filled from cache
@firebase/firestore:     âœ” (Memory) Limits are re-filled from cache
@firebase/firestore:     âœ” (Persistence) Initial snapshots for limit queries are re-filled from cache (with removal)
@firebase/firestore:     âœ” (Memory) Initial snapshots for limit queries are re-filled from cache (with removal)
@firebase/firestore:     âœ” (Persistence) Initial snapshots for limit queries are re-filled from cache (with latency-compensated edit)
@firebase/firestore:     âœ” (Memory) Initial snapshots for limit queries are re-filled from cache (with latency-compensated edit)
@firebase/firestore:     âœ” (Persistence) Initial snapshots for limit queries are re-filled from cache (with update from backend)
@firebase/firestore:     âœ” (Memory) Initial snapshots for limit queries are re-filled from cache (with update from backend)
@firebase/firestore:     âœ” (Persistence) Resumed limit queries exclude deleted documents 
@firebase/firestore:     âœ– (Memory) Resumed limit queries exclude deleted documents  (skipped)
@firebase/firestore:     âœ” (Persistence) Resumed limit queries use updated documents 
@firebase/firestore:     âœ” (Memory) Resumed limit queries use updated documents 
@firebase/firestore:     âœ” (Persistence) Multiple docs in limbo in full limit query
@firebase/firestore:     âœ” (Memory) Multiple docs in limbo in full limit query
@firebase/firestore:     âœ” (Persistence) Limit query is refilled by primary client
@firebase/firestore:     âœ– (Memory) Limit query is refilled by primary client (skipped)
@firebase/firestore:     âœ” (Persistence) Limit query includes write from secondary client 
@firebase/firestore:     âœ– (Memory) Limit query includes write from secondary client  (skipped)
@firebase/firestore:   Listens source options:
@firebase/firestore:     âœ– (Persistence) Contents of query are cleared when listen is removed. (skipped)
@firebase/firestore:     âœ” (Memory) Contents of query are cleared when listen is removed.
@firebase/firestore:     âœ– (Persistence) Documents are cleared when listen is removed. (skipped)
@firebase/firestore:     âœ” (Memory) Documents are cleared when listen is removed.
@firebase/firestore:     âœ” (Persistence) Doesn't include unknown documents in cached result
@firebase/firestore:     âœ” (Memory) Doesn't include unknown documents in cached result
@firebase/firestore:     âœ” (Persistence) Doesn't raise 'hasPendingWrites' for deletes
@firebase/firestore:     âœ” (Memory) Doesn't raise 'hasPendingWrites' for deletes
@firebase/firestore:     âœ” (Persistence) onSnapshotsInSync fires for multiple listeners
@firebase/firestore:     âœ” (Memory) onSnapshotsInSync fires for multiple listeners
@firebase/firestore:     âœ” (Persistence) Empty initial snapshot is raised from cache
@firebase/firestore:     âœ” (Memory) Empty initial snapshot is raised from cache
@firebase/firestore:     âœ” (Persistence) Empty-due-to-delete initial snapshot is raised from cache
@firebase/firestore:     âœ” (Memory) Empty-due-to-delete initial snapshot is raised from cache
@firebase/firestore:     âœ” (Persistence) Newer docs from bundles should overwrite cache
@firebase/firestore:     âœ” (Memory) Newer docs from bundles should overwrite cache
@firebase/firestore:     âœ” (Persistence) Newer deleted docs from bundles should delete cached docs
@firebase/firestore:     âœ” (Memory) Newer deleted docs from bundles should delete cached docs
@firebase/firestore:     âœ” (Persistence) Older deleted docs from bundles should do nothing
@firebase/firestore:     âœ” (Memory) Older deleted docs from bundles should do nothing
@firebase/firestore:     âœ” (Persistence) Newer docs from bundles should keep not raise snapshot if there are unacknowledged writes
@firebase/firestore:     âœ” (Memory) Newer docs from bundles should keep not raise snapshot if there are unacknowledged writes
@firebase/firestore:     âœ” (Persistence) Newer docs from bundles should raise snapshot only when Watch catches up with acknowledged writes
@firebase/firestore:     âœ” (Memory) Newer docs from bundles should raise snapshot only when Watch catches up with acknowledged writes
@firebase/firestore:     âœ” (Persistence) Primary client should not invoke watch request while all clients are listening to cache
@firebase/firestore:     âœ– (Memory) Primary client should not invoke watch request while all clients are listening to cache (skipped)
@firebase/firestore:     âœ” (Persistence) Local mutations notifies listeners sourced from cache in all tabs
@firebase/firestore:     âœ– (Memory) Local mutations notifies listeners sourced from cache in all tabs (skipped)
@firebase/firestore:     âœ” (Persistence) Listeners with different source shares watch changes between primary and secondary clients
@firebase/firestore:     âœ– (Memory) Listeners with different source shares watch changes between primary and secondary clients (skipped)
@firebase/firestore:     âœ” (Persistence) Clients can have multiple listeners with different sources
@firebase/firestore:     âœ– (Memory) Clients can have multiple listeners with different sources (skipped)
@firebase/firestore:     âœ” (Persistence) Query is executed by primary client even if primary client only has listeners sourced from cache
@firebase/firestore:     âœ– (Memory) Query is executed by primary client even if primary client only has listeners sourced from cache (skipped)
@firebase/firestore:     âœ” (Persistence) Query only raises events in participating clients
@firebase/firestore:     âœ– (Memory) Query only raises events in participating clients (skipped)
@firebase/firestore:     âœ” (Persistence) Mirror queries being listened in different clients sourced from cache 
@firebase/firestore:     âœ– (Memory) Mirror queries being listened in different clients sourced from cache  (skipped)
@firebase/firestore:     âœ” (Persistence) Mirror queries being listened in the same secondary client sourced from cache
@firebase/firestore:     âœ– (Memory) Mirror queries being listened in the same secondary client sourced from cache (skipped)
@firebase/firestore:     âœ” (Persistence) Mirror queries being listened from different sources while listening to server in primary tab
@firebase/firestore:     âœ– (Memory) Mirror queries being listened from different sources while listening to server in primary tab (skipped)
@firebase/firestore:     âœ” (Persistence) Mirror queries from different sources while listening to server in secondary tab
@firebase/firestore:     âœ– (Memory) Mirror queries from different sources while listening to server in secondary tab (skipped)
@firebase/firestore:     âœ” (Persistence) Un-listen to listeners from different source
@firebase/firestore:     âœ– (Memory) Un-listen to listeners from different source (skipped)
@firebase/firestore:   Listens:
@firebase/firestore:     âœ– (Persistence) Contents of query are cleared when listen is removed. (skipped)
@firebase/firestore:     âœ” (Memory) Contents of query are cleared when listen is removed.
@firebase/firestore:     âœ– (Persistence) Documents outside of view are cleared when listen is removed. (skipped)
@firebase/firestore:     âœ” (Memory) Documents outside of view are cleared when listen is removed.
@firebase/firestore:     âœ” (Persistence) Contents of query update when new data is received.
@firebase/firestore:     âœ” (Memory) Contents of query update when new data is received.
@firebase/firestore:     âœ” (Persistence) Doesn't raise events for empty target
@firebase/firestore:     âœ” (Memory) Doesn't raise events for empty target
@firebase/firestore:     âœ” (Persistence) Doesn't include unknown documents in cached result
@firebase/firestore:     âœ” (Memory) Doesn't include unknown documents in cached result
@firebase/firestore:     âœ” (Persistence) Doesn't raise 'hasPendingWrites' for deletes
@firebase/firestore:     âœ” (Memory) Doesn't raise 'hasPendingWrites' for deletes
@firebase/firestore:     âœ” (Persistence) Ensure correct query results with latency-compensated deletes
@firebase/firestore:     âœ” (Memory) Ensure correct query results with latency-compensated deletes
@firebase/firestore:     âœ” (Persistence) Does not raise event for initial document delete
@firebase/firestore:     âœ” (Memory) Does not raise event for initial document delete
@firebase/firestore:     âœ” (Persistence) Will process removals without waiting for a consistent snapshot
@firebase/firestore:     âœ” (Memory) Will process removals without waiting for a consistent snapshot
@firebase/firestore:     âœ” (Persistence) Will re-issue listen for errored target
@firebase/firestore:     âœ” (Memory) Will re-issue listen for errored target
@firebase/firestore:     âœ” (Persistence) Will gracefully process failed targets
@firebase/firestore:     âœ” (Memory) Will gracefully process failed targets
@firebase/firestore:     âœ” (Persistence) Will gracefully handle watch stream reverting snapshots
@firebase/firestore:     âœ” (Memory) Will gracefully handle watch stream reverting snapshots
@firebase/firestore:     âœ” (Persistence) Will gracefully handle watch stream reverting snapshots (with restart)
@firebase/firestore:     âœ– (Memory) Will gracefully handle watch stream reverting snapshots (with restart) (skipped)
@firebase/firestore:     âœ” (Persistence) Individual documents cannot revert
@firebase/firestore:     âœ” (Memory) Individual documents cannot revert
@firebase/firestore:     âœ” (Persistence) Individual (deleted) documents cannot revert
@firebase/firestore:     âœ” (Memory) Individual (deleted) documents cannot revert
@firebase/firestore:     âœ” (Persistence) Waits until Watch catches up to local deletes 
@firebase/firestore:     âœ” (Memory) Waits until Watch catches up to local deletes 
@firebase/firestore:     âœ” (Persistence) Listens are reestablished after network disconnect
@firebase/firestore:     âœ” (Memory) Listens are reestablished after network disconnect
@firebase/firestore:     âœ” (Persistence) Synthesizes deletes for missing document
@firebase/firestore:     âœ” (Memory) Synthesizes deletes for missing document
@firebase/firestore:     âœ” (Persistence) Re-opens target without existence filter
@firebase/firestore:     âœ” (Memory) Re-opens target without existence filter
@firebase/firestore:     âœ” (Persistence) Ignores update from inactive target
@firebase/firestore:     âœ” (Memory) Ignores update from inactive target
@firebase/firestore:     âœ” (Persistence) Does not synthesize deletes for previously acked documents
@firebase/firestore:     âœ” (Memory) Does not synthesize deletes for previously acked documents
@firebase/firestore:     âœ” (Persistence) Query is rejected and re-listened to
@firebase/firestore:     âœ” (Memory) Query is rejected and re-listened to
@firebase/firestore:     âœ” (Persistence) Persists resume token sent with target
@firebase/firestore:     âœ” (Memory) Persists resume token sent with target
@firebase/firestore:     âœ” (Persistence) Array-contains queries support resuming
@firebase/firestore:     âœ” (Memory) Array-contains queries support resuming
@firebase/firestore:     âœ” (Persistence) Persists global resume tokens on unlisten
@firebase/firestore:     âœ” (Memory) Persists global resume tokens on unlisten
@firebase/firestore:     âœ” (Persistence) Omits global resume tokens for a short while
@firebase/firestore:     âœ– (Memory) Omits global resume tokens for a short while (skipped)
@firebase/firestore:     âœ” (Persistence) Persists global resume tokens if the snapshot is old enough
@firebase/firestore:     âœ– (Memory) Persists global resume tokens if the snapshot is old enough (skipped)
@firebase/firestore:     âœ” (Persistence) Query is executed by primary client
@firebase/firestore:     âœ– (Memory) Query is executed by primary client (skipped)
@firebase/firestore:     âœ” (Persistence) Query is shared between primary and secondary client
@firebase/firestore:     âœ– (Memory) Query is shared between primary and secondary client (skipped)
@firebase/firestore:     âœ” (Persistence) Query is joined by primary client
@firebase/firestore:     âœ– (Memory) Query is joined by primary client (skipped)
@firebase/firestore:     âœ” (Persistence) Query only raises events in participating clients
@firebase/firestore:     âœ– (Memory) Query only raises events in participating clients (skipped)
@firebase/firestore:     âœ” (Persistence) Query is unlistened to by primary client
@firebase/firestore:     âœ– (Memory) Query is unlistened to by primary client (skipped)
@firebase/firestore:     âœ” (Persistence) Query is resumed by secondary client
@firebase/firestore:     âœ– (Memory) Query is resumed by secondary client (skipped)
@firebase/firestore:     âœ” (Persistence) Query is rejected by primary client
@firebase/firestore:     âœ– (Memory) Query is rejected by primary client (skipped)
@firebase/firestore:     âœ” (Persistence) Query is rejected and re-listened to by secondary client
@firebase/firestore:     âœ– (Memory) Query is rejected and re-listened to by secondary client (skipped)
@firebase/firestore:     âœ” (Persistence) Secondary client raises latency compensated snapshot from primary mutation
@firebase/firestore:     âœ– (Memory) Secondary client raises latency compensated snapshot from primary mutation (skipped)
@firebase/firestore:     âœ– (Persistence) Secondary client advances query state with global snapshot from primary (skipped)
@firebase/firestore:     âœ– (Memory) Secondary client advances query state with global snapshot from primary (skipped)
@firebase/firestore:     âœ” (Persistence) Mirror queries from same secondary client
@firebase/firestore:     âœ– (Memory) Mirror queries from same secondary client (skipped)
@firebase/firestore:     âœ” (Persistence) Mirror queries from different secondary client
@firebase/firestore:     âœ– (Memory) Mirror queries from different secondary client (skipped)
@firebase/firestore:     âœ” (Persistence) Mirror queries from primary and secondary client
@firebase/firestore:     âœ– (Memory) Mirror queries from primary and secondary client (skipped)
@firebase/firestore:     âœ” (Persistence) Can listen/unlisten to mirror queries.
@firebase/firestore:     âœ” (Memory) Can listen/unlisten to mirror queries.
@firebase/firestore:     âœ” (Persistence) Secondary client uses primary client's online state
@firebase/firestore:     âœ– (Memory) Secondary client uses primary client's online state (skipped)
@firebase/firestore:     âœ” (Persistence) New client uses existing online state
@firebase/firestore:     âœ– (Memory) New client uses existing online state (skipped)
@firebase/firestore:     âœ” (Persistence) New client becomes primary if no client has its network enabled
@firebase/firestore:     âœ– (Memory) New client becomes primary if no client has its network enabled (skipped)
@firebase/firestore:     âœ” (Persistence) Secondary client's online state is ignored
@firebase/firestore:     âœ– (Memory) Secondary client's online state is ignored (skipped)
@firebase/firestore:     âœ” (Persistence) Offline state doesn't persist if primary is shut down
@firebase/firestore:     âœ– (Memory) Offline state doesn't persist if primary is shut down (skipped)
@firebase/firestore:     âœ” (Persistence) Listen is re-listened to after primary tab failover
@firebase/firestore:     âœ– (Memory) Listen is re-listened to after primary tab failover (skipped)
@firebase/firestore:     âœ” (Persistence) Listen is established in new primary tab
@firebase/firestore:     âœ– (Memory) Listen is established in new primary tab (skipped)
@firebase/firestore:     âœ” (Persistence) Query recovers after primary takeover
@firebase/firestore:     âœ– (Memory) Query recovers after primary takeover (skipped)
@firebase/firestore: ERROR: '[2025-03-04T23:05:33.279Z]  @firebase/firestore:', 'Firestore (11.3.0): Failed to obtain primary lease for action 'Release target'.'
@firebase/firestore: ERROR: '[2025-03-04T23:05:33.279Z]  @firebase/firestore:', 'Firestore (11.3.0): Failed to obtain primary lease for action 'Release target'.'
@firebase/firestore:     âœ” (Persistence) Query bounces between primaries
@firebase/firestore:     âœ– (Memory) Query bounces between primaries (skipped)
@firebase/firestore: ERROR: '[2025-03-04T23:05:33.287Z]  @firebase/firestore:', 'Firestore (11.3.0): Failed to obtain primary lease for action 'Apply remote event'.'
@firebase/firestore: ERROR: '[2025-03-04T23:05:33.287Z]  @firebase/firestore:', 'Firestore (11.3.0): Failed to obtain primary lease for action 'Apply remote event'.'
@firebase/firestore:     âœ” (Persistence) Unresponsive primary ignores watch update
@firebase/firestore:     âœ– (Memory) Unresponsive primary ignores watch update (skipped)
@firebase/firestore:     âœ” (Persistence) Listen is established in newly started primary
@firebase/firestore:     âœ– (Memory) Listen is established in newly started primary (skipped)
@firebase/firestore:     âœ” (Persistence) Previous primary immediately regains primary lease
@firebase/firestore:     âœ– (Memory) Previous primary immediately regains primary lease (skipped)
@firebase/firestore:     âœ” (Persistence) onSnapshotsInSync should not fire for doc changes if there are no listeners
@firebase/firestore:     âœ” (Memory) onSnapshotsInSync should not fire for doc changes if there are no listeners
@firebase/firestore:     âœ” (Persistence) onSnapshotsInSync fires when called even if there are no local listeners
@firebase/firestore:     âœ” (Memory) onSnapshotsInSync fires when called even if there are no local listeners
@firebase/firestore:     âœ” (Persistence) onSnapshotsInSync fires for metadata changes
@firebase/firestore:     âœ” (Memory) onSnapshotsInSync fires for metadata changes
@firebase/firestore:     âœ” (Persistence) onSnapshotsInSync fires once for multiple event snapshots
@firebase/firestore:     âœ” (Memory) onSnapshotsInSync fires once for multiple event snapshots
@firebase/firestore:     âœ” (Persistence) onSnapshotsInSync fires for multiple listeners
@firebase/firestore:     âœ” (Memory) onSnapshotsInSync fires for multiple listeners
@firebase/firestore:     âœ” (Persistence) Empty initial snapshot is raised from cache
@firebase/firestore:     âœ” (Memory) Empty initial snapshot is raised from cache
@firebase/firestore:     âœ” (Persistence) Empty-due-to-delete initial snapshot is raised from cache
@firebase/firestore:     âœ” (Memory) Empty-due-to-delete initial snapshot is raised from cache
@firebase/firestore:     âœ” (Persistence) Empty initial snapshot is raised from cache in multiple tabs
@firebase/firestore:     âœ– (Memory) Empty initial snapshot is raised from cache in multiple tabs (skipped)
@firebase/firestore:     âœ” (Persistence) Empty-due-to-delete initial snapshot is raised from cache in multiple tabs
@firebase/firestore:     âœ– (Memory) Empty-due-to-delete initial snapshot is raised from cache in multiple tabs (skipped)
@firebase/firestore:     âœ” (Persistence) Resuming a query should specify expectedCount when adding the target
@firebase/firestore:     âœ” (Memory) Resuming a query should specify expectedCount when adding the target
@firebase/firestore:     âœ” (Persistence) Resuming a query should specify expectedCount that does not include pending mutations
@firebase/firestore:     âœ” (Memory) Resuming a query should specify expectedCount that does not include pending mutations
@firebase/firestore:     âœ” (Persistence) ExpectedCount in listen request should work after coming back online
@firebase/firestore:     âœ” (Memory) ExpectedCount in listen request should work after coming back online
@firebase/firestore:     âœ” (Persistence) Global snapshots would not alter query state if there is no changes
@firebase/firestore:     âœ– (Memory) Global snapshots would not alter query state if there is no changes (skipped)
@firebase/firestore: ERROR: '[2025-03-04T23:05:33.494Z]  @firebase/firestore:', 'Firestore (11.3.0): Could not reach Cloud Firestore backend. Connection failed 1 times. Most recent error: FirebaseError: [code=unavailable]: Simulated Backend Error
@firebase/firestore: This typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.'
@firebase/firestore: ERROR: '[2025-03-04T23:05:33.494Z]  @firebase/firestore:', 'Firestore (11.3.0): Could not reach Cloud Firestore backend. Connection failed 1 times. Most recent error: FirebaseError: [code=unavailable]: Simulated Backend Error
@firebase/firestore: This typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.'
@firebase/firestore:   Offline:
@firebase/firestore:     âœ” (Persistence) Empty queries are resolved if client goes offline
@firebase/firestore: ERROR: '[2025-03-04T23:05:33.497Z]  @firebase/firestore:', 'Firestore (11.3.0): Could not reach Cloud Firestore backend. Connection failed 1 times. Most recent error: FirebaseError: [code=unavailable]: Simulated Backend Error
@firebase/firestore: This typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.'
@firebase/firestore: ERROR: '[2025-03-04T23:05:33.497Z]  @firebase/firestore:', 'Firestore (11.3.0): Could not reach Cloud Firestore backend. Connection failed 1 times. Most recent error: FirebaseError: [code=unavailable]: Simulated Backend Error
@firebase/firestore: This typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.'
@firebase/firestore:     âœ” (Memory) Empty queries are resolved if client goes offline
@firebase/firestore:     âœ” (Persistence) A successful message delays offline status
@firebase/firestore:     âœ” (Memory) A successful message delays offline status
@firebase/firestore:     âœ– (Persistence) Removing all listeners delays "Offline" status on next listen (skipped)
@firebase/firestore: ERROR: '[2025-03-04T23:05:33.506Z]  @firebase/firestore:', 'Firestore (11.3.0): Could not reach Cloud Firestore backend. Connection failed 1 times. Most recent error: FirebaseError: [code=unavailable]: Simulated Backend Error
@firebase/firestore: This typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.'
@firebase/firestore: ERROR: '[2025-03-04T23:05:33.506Z]  @firebase/firestore:', 'Firestore (11.3.0): Could not reach Cloud Firestore backend. Connection failed 1 times. Most recent error: FirebaseError: [code=unavailable]: Simulated Backend Error
@firebase/firestore: This typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.'
@firebase/firestore:     âœ” (Memory) Removing all listeners delays "Offline" status on next listen
@firebase/firestore:     âœ” (Persistence) Queries revert to fromCache=true when offline.
@firebase/firestore:     âœ” (Memory) Queries revert to fromCache=true when offline.
@firebase/firestore:     âœ” (Persistence) Queries with limbo documents handle going offline.
@firebase/firestore:     âœ” (Memory) Queries with limbo documents handle going offline.
@firebase/firestore: ERROR: '[2025-03-04T23:05:33.536Z]  @firebase/firestore:', 'Firestore (11.3.0): Could not reach Cloud Firestore backend. Backend didn't respond within 10 seconds.
@firebase/firestore: This typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.'
@firebase/firestore: ERROR: '[2025-03-04T23:05:33.536Z]  @firebase/firestore:', 'Firestore (11.3.0): Could not reach Cloud Firestore backend. Backend didn't respond within 10 seconds.
@firebase/firestore: This typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.'
@firebase/firestore:     âœ” (Persistence) OnlineState timeout triggers offline behavior
@firebase/firestore: ERROR: '[2025-03-04T23:05:33.540Z]  @firebase/firestore:', 'Firestore (11.3.0): Could not reach Cloud Firestore backend. Backend didn't respond within 10 seconds.
@firebase/firestore: This typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.'
@firebase/firestore: ERROR: '[2025-03-04T23:05:33.540Z]  @firebase/firestore:', 'Firestore (11.3.0): Could not reach Cloud Firestore backend. Backend didn't respond within 10 seconds.
@firebase/firestore: This typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.'
@firebase/firestore:     âœ” (Memory) OnlineState timeout triggers offline behavior
@firebase/firestore: ERROR: '[2025-03-04T23:05:33.546Z]  @firebase/firestore:', 'Firestore (11.3.0): Could not reach Cloud Firestore backend. Connection failed 1 times. Most recent error: FirebaseError: [code=unavailable]: Simulated Backend Error
@firebase/firestore: This typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.'
@firebase/firestore: ERROR: '[2025-03-04T23:05:33.546Z]  @firebase/firestore:', 'Firestore (11.3.0): Could not reach Cloud Firestore backend. Connection failed 1 times. Most recent error: FirebaseError: [code=unavailable]: Simulated Backend Error
@firebase/firestore: This typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.'
@firebase/firestore:     âœ” (Persistence) New queries return immediately with fromCache=true when offline due to stream failures.
@firebase/firestore: ERROR: '[2025-03-04T23:05:33.549Z]  @firebase/firestore:', 'Firestore (11.3.0): Could not reach Cloud Firestore backend. Connection failed 1 times. Most recent error: FirebaseError: [code=unavailable]: Simulated Backend Error
@firebase/firestore: This typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.'
@firebase/firestore: ERROR: '[2025-03-04T23:05:33.549Z]  @firebase/firestore:', 'Firestore (11.3.0): Could not reach Cloud Firestore backend. Connection failed 1 times. Most recent error: FirebaseError: [code=unavailable]: Simulated Backend Error
@firebase/firestore: This typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.'
@firebase/firestore:     âœ” (Memory) New queries return immediately with fromCache=true when offline due to stream failures.
@firebase/firestore: ERROR: '[2025-03-04T23:05:33.555Z]  @firebase/firestore:', 'Firestore (11.3.0): Could not reach Cloud Firestore backend. Backend didn't respond within 10 seconds.
@firebase/firestore: This typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.'
@firebase/firestore: ERROR: '[2025-03-04T23:05:33.555Z]  @firebase/firestore:', 'Firestore (11.3.0): Could not reach Cloud Firestore backend. Backend didn't respond within 10 seconds.
@firebase/firestore: This typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.'
@firebase/firestore:     âœ” (Persistence) New queries return immediately with fromCache=true when offline due to OnlineState timeout.
@firebase/firestore: ERROR: '[2025-03-04T23:05:33.557Z]  @firebase/firestore:', 'Firestore (11.3.0): Could not reach Cloud Firestore backend. Backend didn't respond within 10 seconds.
@firebase/firestore: This typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.'
@firebase/firestore: ERROR: '[2025-03-04T23:05:33.557Z]  @firebase/firestore:', 'Firestore (11.3.0): Could not reach Cloud Firestore backend. Backend didn't respond within 10 seconds.
@firebase/firestore: This typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.'
@firebase/firestore:     âœ” (Memory) New queries return immediately with fromCache=true when offline due to OnlineState timeout.
@firebase/firestore:     âœ– (Persistence) Queries return from cache when network disabled (skipped)
@firebase/firestore:     âœ” (Memory) Queries return from cache when network disabled
@firebase/firestore:     âœ” (Persistence) Client stays offline during credential change
@firebase/firestore:     âœ” (Memory) Client stays offline during credential change
@firebase/firestore:   OrderBy:
@firebase/firestore:     âœ” (Persistence) orderBy applies filtering based on local state
@firebase/firestore:     âœ” (Memory) orderBy applies filtering based on local state
@firebase/firestore:     âœ” (Persistence) orderBy applies to existing documents
@firebase/firestore:     âœ” (Memory) orderBy applies to existing documents
@firebase/firestore:   Performance Tests [10 iterations]:
@firebase/firestore:     âœ– (Persistence) Insert a new document (skipped)
@firebase/firestore:     âœ– (Memory) Insert a new document (skipped)
@firebase/firestore:     âœ– (Persistence) Start a listen, write a document, ack the write, handle watch snapshot, unlisten (skipped)
@firebase/firestore:     âœ– (Memory) Start a listen, write a document, ack the write, handle watch snapshot, unlisten (skipped)
@firebase/firestore:     âœ– (Persistence) Write 100 documents and raise a snapshot (skipped)
@firebase/firestore:     âœ– (Memory) Write 100 documents and raise a snapshot (skipped)
@firebase/firestore:     âœ– (Persistence) Update a single document (skipped)
@firebase/firestore:     âœ– (Memory) Update a single document (skipped)
@firebase/firestore:     âœ– (Persistence) Update a document and wait for snapshot with existing listen (skipped)
@firebase/firestore:     âœ– (Memory) Update a document and wait for snapshot with existing listen (skipped)
@firebase/firestore:     âœ– (Persistence) Process 100 documents from Watch and wait for snapshot (skipped)
@firebase/firestore:     âœ– (Memory) Process 100 documents from Watch and wait for snapshot (skipped)
@firebase/firestore:     âœ– (Persistence) Process 100 documents from Watch and wait for snapshot, then unlisten and wait for a cached snapshot (skipped)
@firebase/firestore:     âœ– (Memory) Process 100 documents from Watch and wait for snapshot, then unlisten and wait for a cached snapshot (skipped)
@firebase/firestore:     âœ– (Persistence) Process 25 target updates and wait for snapshot (skipped)
@firebase/firestore:     âœ– (Memory) Process 25 target updates and wait for snapshot (skipped)
@firebase/firestore:     âœ– (Persistence) Add 500 documents, issue 10 queries that return 10 documents each, unlisten (skipped)
@firebase/firestore:     âœ– (Memory) Add 500 documents, issue 10 queries that return 10 documents each, unlisten (skipped)
@firebase/firestore:   Persistence:
@firebase/firestore:     âœ” (Persistence) Local mutations are persisted and re-sent
@firebase/firestore:     âœ– (Memory) Local mutations are persisted and re-sent (skipped)
@firebase/firestore:     âœ” (Persistence) Persisted local mutations are visible to listeners
@firebase/firestore:     âœ– (Memory) Persisted local mutations are visible to listeners (skipped)
@firebase/firestore:     âœ” (Persistence) Remote documents are persisted
@firebase/firestore:     âœ– (Memory) Remote documents are persisted (skipped)
@firebase/firestore:     âœ” (Persistence) Remote documents from watch are not GC'd
@firebase/firestore:     âœ” (Memory) Remote documents from watch are not GC'd
@firebase/firestore:     âœ” (Persistence) Remote documents from user sets are not GC'd
@firebase/firestore:     âœ” (Memory) Remote documents from user sets are not GC'd
@firebase/firestore:     âœ” (Persistence) Mutation Queue is persisted across uid switches
@firebase/firestore:     âœ” (Memory) Mutation Queue is persisted across uid switches
@firebase/firestore:     âœ” (Persistence) Mutation Queue is persisted across uid switches (with restarts)
@firebase/firestore:     âœ– (Memory) Mutation Queue is persisted across uid switches (with restarts) (skipped)
@firebase/firestore:     âœ” (Persistence) Visible mutations reflect uid switches
@firebase/firestore:     âœ” (Memory) Visible mutations reflect uid switches
@firebase/firestore:     âœ” (Persistence) Detects all active clients
@firebase/firestore:     âœ– (Memory) Detects all active clients (skipped)
@firebase/firestore:     âœ” (Persistence) Single tab acquires primary lease
@firebase/firestore:     âœ– (Memory) Single tab acquires primary lease (skipped)
@firebase/firestore:     âœ” (Persistence) Foreground tab acquires primary lease
@firebase/firestore:     âœ– (Memory) Foreground tab acquires primary lease (skipped)
@firebase/firestore:     âœ” (Persistence) Primary lease bound to network state
@firebase/firestore:     âœ– (Memory) Primary lease bound to network state (skipped)
@firebase/firestore:     âœ” (Persistence) clearPersistence() shuts down other clients
@firebase/firestore:     âœ– (Memory) clearPersistence() shuts down other clients (skipped)
@firebase/firestore:   Queries:
@firebase/firestore:     âœ” (Persistence) Collection Group query
@firebase/firestore:     âœ” (Memory) Collection Group query
@firebase/firestore:     âœ” (Persistence) Collection Group query with mutations
@firebase/firestore:     âœ” (Memory) Collection Group query with mutations
@firebase/firestore:     âœ” (Persistence) Latency-compensated updates are included in query results
@firebase/firestore:     âœ” (Memory) Latency-compensated updates are included in query results
@firebase/firestore:     âœ” (Persistence) Queries in different tabs will not interfere
@firebase/firestore:     âœ– (Memory) Queries in different tabs will not interfere (skipped)
@firebase/firestore:   Persistence Recovery
@firebase/firestore:     âœ” (Persistence) Write is acknowledged by primary client (with recovery)
@firebase/firestore:     âœ– (Memory) Write is acknowledged by primary client (with recovery) (skipped)
@firebase/firestore:     âœ” (Persistence) Clients fail to lookup mutations (with recovery)
@firebase/firestore:     âœ– (Memory) Clients fail to lookup mutations (with recovery) (skipped)
@firebase/firestore:     âœ” (Persistence) Query raises events in secondary client (with recovery)
@firebase/firestore:     âœ– (Memory) Query raises events in secondary client (with recovery) (skipped)
@firebase/firestore:     âœ” (Persistence) Query is listened to by primary (with recovery)
@firebase/firestore:     âœ– (Memory) Query is listened to by primary (with recovery) (skipped)
@firebase/firestore:     âœ” (Persistence) Query with active view recovers after primary tab failover (with recovery)
@firebase/firestore:     âœ– (Memory) Query with active view recovers after primary tab failover (with recovery) (skipped)
@firebase/firestore:     âœ” (Persistence) Query without active view recovers after primary tab failover (with recovery)
@firebase/firestore:     âœ– (Memory) Query without active view recovers after primary tab failover (with recovery) (skipped)
@firebase/firestore:     âœ” (Persistence) Ignores intermittent lease refresh failures (with recovery)
@firebase/firestore:     âœ– (Memory) Ignores intermittent lease refresh failures (with recovery) (skipped)
@firebase/firestore: ERROR: '[2025-03-04T23:05:33.871Z]  @firebase/firestore:', 'Firestore (11.3.0): AsyncQueue', 'Failed to persist write: IndexedDbTransactionError: [code=unavailable]: IndexedDB transaction 'Simulated error' failed: Error: Simulated retryable error: Locally write mutations'
@firebase/firestore: ERROR: '[2025-03-04T23:05:33.871Z]  @firebase/firestore:', 'Firestore (11.3.0): AsyncQueue', 'Failed to persist write: IndexedDbTransactionError: [code=unavailable]: IndexedDB transaction 'Simulated error' failed: Error: Simulated retryable error: Locally write mutations'
@firebase/firestore:     âœ” (Persistence) Recovers when write cannot be persisted
@firebase/firestore: ERROR: '[2025-03-04T23:05:33.877Z]  @firebase/firestore:', 'Firestore (11.3.0): AsyncQueue', 'Failed to persist write: IndexedDbTransactionError: [code=unavailable]: IndexedDB transaction 'Simulated error' failed: Error: Simulated retryable error: Locally write mutations'
@firebase/firestore: ERROR: '[2025-03-04T23:05:33.877Z]  @firebase/firestore:', 'Firestore (11.3.0): AsyncQueue', 'Failed to persist write: IndexedDbTransactionError: [code=unavailable]: IndexedDB transaction 'Simulated error' failed: Error: Simulated retryable error: Locally write mutations'
@firebase/firestore:     âœ” (Memory) Recovers when write cannot be persisted
@firebase/firestore: ERROR: '[2025-03-04T23:05:33.884Z]  @firebase/firestore:', 'Firestore (11.3.0): AsyncQueue', 'Failed to persist write: IndexedDbTransactionError: [code=unavailable]: IndexedDB transaction 'Simulated error' failed: Error: Simulated retryable error: Locally write mutations'
@firebase/firestore: ERROR: '[2025-03-04T23:05:33.884Z]  @firebase/firestore:', 'Firestore (11.3.0): AsyncQueue', 'Failed to persist write: IndexedDbTransactionError: [code=unavailable]: IndexedDB transaction 'Simulated error' failed: Error: Simulated retryable error: Locally write mutations'
@firebase/firestore:     âœ” (Persistence) Does not surface non-persisted writes
@firebase/firestore: ERROR: '[2025-03-04T23:05:33.892Z]  @firebase/firestore:', 'Firestore (11.3.0): AsyncQueue', 'Failed to persist write: IndexedDbTransactionError: [code=unavailable]: IndexedDB transaction 'Simulated error' failed: Error: Simulated retryable error: Locally write mutations'
@firebase/firestore: ERROR: '[2025-03-04T23:05:33.892Z]  @firebase/firestore:', 'Firestore (11.3.0): AsyncQueue', 'Failed to persist write: IndexedDbTransactionError: [code=unavailable]: IndexedDB transaction 'Simulated error' failed: Error: Simulated retryable error: Locally write mutations'
@firebase/firestore:     âœ” (Memory) Does not surface non-persisted writes
@firebase/firestore:     âœ” (Persistence) Recovers when write acknowledgment cannot be persisted
@firebase/firestore:     âœ” (Memory) Recovers when write acknowledgment cannot be persisted
@firebase/firestore:     âœ” (Persistence) Recovers when write rejection cannot be persisted
@firebase/firestore:     âœ” (Memory) Recovers when write rejection cannot be persisted
@firebase/firestore:     âœ” (Persistence) Recovers when write acknowledgment cannot be persisted (with restart)
@firebase/firestore:     âœ– (Memory) Recovers when write acknowledgment cannot be persisted (with restart) (skipped)
@firebase/firestore:     âœ” (Persistence) Writes are pending until acknowledgement is persisted
@firebase/firestore:     âœ” (Memory) Writes are pending until acknowledgement is persisted
@firebase/firestore: ERROR: '[2025-03-04T23:05:33.971Z]  @firebase/firestore:', 'Firestore (11.3.0): Could not reach Cloud Firestore backend. Backend didn't respond within 10 seconds.
@firebase/firestore: This typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.'
@firebase/firestore: ERROR: '[2025-03-04T23:05:33.971Z]  @firebase/firestore:', 'Firestore (11.3.0): Could not reach Cloud Firestore backend. Backend didn't respond within 10 seconds.
@firebase/firestore: This typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.'
@firebase/firestore:     âœ” (Persistence) Surfaces local documents if notifyLocalViewChanges fails
@firebase/firestore: ERROR: '[2025-03-04T23:05:33.978Z]  @firebase/firestore:', 'Firestore (11.3.0): Could not reach Cloud Firestore backend. Backend didn't respond within 10 seconds.
@firebase/firestore: This typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.'
@firebase/firestore: ERROR: '[2025-03-04T23:05:33.978Z]  @firebase/firestore:', 'Firestore (11.3.0): Could not reach Cloud Firestore backend. Backend didn't respond within 10 seconds.
@firebase/firestore: This typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.'
@firebase/firestore:     âœ” (Memory) Surfaces local documents if notifyLocalViewChanges fails
@firebase/firestore:     âœ” (Persistence) Excludes documents from future queries even if notifyLocalViewChanges fails
@firebase/firestore:     âœ” (Memory) Excludes documents from future queries even if notifyLocalViewChanges fails
@firebase/firestore: ERROR: '[2025-03-04T23:05:34.006Z]  @firebase/firestore:', 'Firestore (11.3.0): AsyncQueue', 'Initialization of query 'Query(target=Target(collection2, orderBy: [__name__ (asc)]); limitType=F)' failed: IndexedDbTransactionError: [code=unavailable]: IndexedDB transaction 'Simulated error' failed: Error: Simulated retryable error: Allocate target'
@firebase/firestore: ERROR: '[2025-03-04T23:05:34.006Z]  @firebase/firestore:', 'Firestore (11.3.0): AsyncQueue', 'Initialization of query 'Query(target=Target(collection2, orderBy: [__name__ (asc)]); limitType=F)' failed: IndexedDbTransactionError: [code=unavailable]: IndexedDB transaction 'Simulated error' failed: Error: Simulated retryable error: Allocate target'
@firebase/firestore:     âœ” (Persistence) Fails targets that cannot be allocated
@firebase/firestore: ERROR: '[2025-03-04T23:05:34.012Z]  @firebase/firestore:', 'Firestore (11.3.0): AsyncQueue', 'Initialization of query 'Query(target=Target(collection2, orderBy: [__name__ (asc)]); limitType=F)' failed: IndexedDbTransactionError: [code=unavailable]: IndexedDB transaction 'Simulated error' failed: Error: Simulated retryable error: Allocate target'
@firebase/firestore: ERROR: '[2025-03-04T23:05:34.012Z]  @firebase/firestore:', 'Firestore (11.3.0): AsyncQueue', 'Initialization of query 'Query(target=Target(collection2, orderBy: [__name__ (asc)]); limitType=F)' failed: IndexedDbTransactionError: [code=unavailable]: IndexedDB transaction 'Simulated error' failed: Error: Simulated retryable error: Allocate target'
@firebase/firestore:     âœ” (Memory) Fails targets that cannot be allocated
@firebase/firestore: ERROR: '[2025-03-04T23:05:34.020Z]  @firebase/firestore:', 'Firestore (11.3.0): AsyncQueue', 'Initialization of query 'Query(target=Target(collection2, orderBy: [__name__ (asc)]); limitType=F)' failed: IndexedDbTransactionError: [code=unavailable]: IndexedDB transaction 'Simulated error' failed: Error: Simulated retryable error: Allocate target'
@firebase/firestore: ERROR: '[2025-03-04T23:05:34.020Z]  @firebase/firestore:', 'Firestore (11.3.0): AsyncQueue', 'Initialization of query 'Query(target=Target(collection2, orderBy: [__name__ (asc)]); limitType=F)' failed: IndexedDbTransactionError: [code=unavailable]: IndexedDB transaction 'Simulated error' failed: Error: Simulated retryable error: Allocate target'
@firebase/firestore:     âœ” (Persistence) Can re-add failed target
@firebase/firestore: ERROR: '[2025-03-04T23:05:34.025Z]  @firebase/firestore:', 'Firestore (11.3.0): AsyncQueue', 'Initialization of query 'Query(target=Target(collection2, orderBy: [__name__ (asc)]); limitType=F)' failed: IndexedDbTransactionError: [code=unavailable]: IndexedDB transaction 'Simulated error' failed: Error: Simulated retryable error: Allocate target'
@firebase/firestore: ERROR: '[2025-03-04T23:05:34.025Z]  @firebase/firestore:', 'Firestore (11.3.0): AsyncQueue', 'Initialization of query 'Query(target=Target(collection2, orderBy: [__name__ (asc)]); limitType=F)' failed: IndexedDbTransactionError: [code=unavailable]: IndexedDB transaction 'Simulated error' failed: Error: Simulated retryable error: Allocate target'
@firebase/firestore:     âœ” (Memory) Can re-add failed target
@firebase/firestore:     âœ” (Persistence) Recovers when watch update cannot be persisted
@firebase/firestore:     âœ” (Memory) Recovers when watch update cannot be persisted
@firebase/firestore:     âœ” (Persistence) Handles rejections that cannot be persisted
@firebase/firestore:     âœ” (Memory) Handles rejections that cannot be persisted
@firebase/firestore:     âœ” (Persistence) Recovers when Limbo acknowledgement cannot be persisted
@firebase/firestore:     âœ” (Memory) Recovers when Limbo acknowledgement cannot be persisted
@firebase/firestore:     âœ” (Persistence) Recovers when Limbo rejection cannot be persisted
@firebase/firestore:     âœ” (Memory) Recovers when Limbo rejection cannot be persisted
@firebase/firestore:     âœ” (Persistence) User change handles transaction failures (with recovery)
@firebase/firestore:     âœ– (Memory) User change handles transaction failures (with recovery) (skipped)
@firebase/firestore:     âœ” (Persistence) Multiple user changes during transaction failure (with recovery)
@firebase/firestore:     âœ– (Memory) Multiple user changes during transaction failure (with recovery) (skipped)
@firebase/firestore:     âœ” (Persistence) Unlisten succeeds when target release fails
@firebase/firestore:     âœ” (Memory) Unlisten succeeds when target release fails
@firebase/firestore:     âœ” (Persistence) Can re-listen to query when unlisten fails
@firebase/firestore:     âœ” (Memory) Can re-listen to query when unlisten fails
@firebase/firestore:   Remote store:
@firebase/firestore:     âœ” (Persistence) Waits for watch to remove targets
@firebase/firestore:     âœ” (Memory) Waits for watch to remove targets
@firebase/firestore:     âœ” (Persistence) Waits for watch to ack last target add
@firebase/firestore:     âœ” (Memory) Waits for watch to ack last target add
@firebase/firestore: ERROR: '[2025-03-04T23:05:34.158Z]  @firebase/firestore:', 'Firestore (11.3.0): Could not reach Cloud Firestore backend. Connection failed 1 times. Most recent error: FirebaseError: [code=unavailable]: Simulated Backend Error
@firebase/firestore: This typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.'
@firebase/firestore: ERROR: '[2025-03-04T23:05:34.158Z]  @firebase/firestore:', 'Firestore (11.3.0): Could not reach Cloud Firestore backend. Connection failed 1 times. Most recent error: FirebaseError: [code=unavailable]: Simulated Backend Error
@firebase/firestore: This typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.'
@firebase/firestore:     âœ” (Persistence) Cleans up watch state correctly
@firebase/firestore: ERROR: '[2025-03-04T23:05:34.161Z]  @firebase/firestore:', 'Firestore (11.3.0): Could not reach Cloud Firestore backend. Connection failed 1 times. Most recent error: FirebaseError: [code=unavailable]: Simulated Backend Error
@firebase/firestore: This typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.'
@firebase/firestore: ERROR: '[2025-03-04T23:05:34.161Z]  @firebase/firestore:', 'Firestore (11.3.0): Could not reach Cloud Firestore backend. Connection failed 1 times. Most recent error: FirebaseError: [code=unavailable]: Simulated Backend Error
@firebase/firestore: This typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.'
@firebase/firestore:     âœ” (Memory) Cleans up watch state correctly
@firebase/firestore: ERROR: '[2025-03-04T23:05:34.166Z]  @firebase/firestore:', 'Firestore (11.3.0): Could not reach Cloud Firestore backend. Connection failed 1 times. Most recent error: FirebaseError: [code=unavailable]: Simulated Backend Error
@firebase/firestore: This typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.'
@firebase/firestore: ERROR: '[2025-03-04T23:05:34.166Z]  @firebase/firestore:', 'Firestore (11.3.0): Could not reach Cloud Firestore backend. Connection failed 1 times. Most recent error: FirebaseError: [code=unavailable]: Simulated Backend Error
@firebase/firestore: This typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.'
@firebase/firestore:     âœ” (Persistence) Handles user changes while offline (b/74749605).
@firebase/firestore: ERROR: '[2025-03-04T23:05:34.169Z]  @firebase/firestore:', 'Firestore (11.3.0): Could not reach Cloud Firestore backend. Connection failed 1 times. Most recent error: FirebaseError: [code=unavailable]: Simulated Backend Error
@firebase/firestore: This typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.'
@firebase/firestore: ERROR: '[2025-03-04T23:05:34.169Z]  @firebase/firestore:', 'Firestore (11.3.0): Could not reach Cloud Firestore backend. Connection failed 1 times. Most recent error: FirebaseError: [code=unavailable]: Simulated Backend Error
@firebase/firestore: This typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.'
@firebase/firestore:     âœ” (Memory) Handles user changes while offline (b/74749605).
@firebase/firestore:   Resume tokens:
@firebase/firestore:     âœ” (Persistence) Resume tokens are sent after watch stream restarts
@firebase/firestore:     âœ” (Memory) Resume tokens are sent after watch stream restarts
@firebase/firestore:     âœ” (Persistence) Resume tokens are used across new listens
@firebase/firestore:     âœ” (Memory) Resume tokens are used across new listens
@firebase/firestore:   Writes:
@firebase/firestore:     âœ” (Persistence) Two sequential writes to different documents smoke test.
@firebase/firestore:     âœ” (Memory) Two sequential writes to different documents smoke test.
@firebase/firestore:     âœ” (Persistence) Event is raised for a local set before and after the write ack
@firebase/firestore:     âœ” (Memory) Event is raised for a local set before and after the write ack
@firebase/firestore:     âœ” (Persistence) Raises snapshot with 'hasPendingWrites' for unacknowledged write
@firebase/firestore:     âœ” (Memory) Raises snapshot with 'hasPendingWrites' for unacknowledged write
@firebase/firestore:     âœ” (Persistence) Doesn't raise 'hasPendingWrites' for committed write and new listen
@firebase/firestore:     âœ” (Memory) Doesn't raise 'hasPendingWrites' for committed write and new listen
@firebase/firestore:     âœ” (Persistence) Doesn't raise event for document with pending patch
@firebase/firestore:     âœ” (Memory) Doesn't raise event for document with pending patch
@firebase/firestore:     âœ” (Persistence) Cache will not keep data for an outdated write ack
@firebase/firestore:     âœ” (Memory) Cache will not keep data for an outdated write ack
@firebase/firestore:     âœ” (Persistence) Cache raises correct event if write is acked before watch delivers it
@firebase/firestore:     âœ” (Memory) Cache raises correct event if write is acked before watch delivers it
@firebase/firestore:     âœ” (Persistence) Cache will hold local write until watch catches up
@firebase/firestore:     âœ” (Memory) Cache will hold local write until watch catches up
@firebase/firestore:     âœ” (Persistence) Local patch is applied to query until watch catches up
@firebase/firestore:     âœ” (Memory) Local patch is applied to query until watch catches up
@firebase/firestore:     âœ” (Persistence) Writes are pipelined
@firebase/firestore:     âœ” (Memory) Writes are pipelined
@firebase/firestore:     âœ” (Persistence) Pipelined writes can fail
@firebase/firestore:     âœ” (Memory) Pipelined writes can fail
@firebase/firestore:     âœ” (Persistence) Failed writes are released immediately.
@firebase/firestore:     âœ” (Memory) Failed writes are released immediately.
@firebase/firestore:     âœ” (Persistence) Writes are not re-sent.
@firebase/firestore:     âœ” (Memory) Writes are not re-sent.
@firebase/firestore:     âœ” (Persistence) Writes are not re-sent after disable/enable network.
@firebase/firestore:     âœ” (Memory) Writes are not re-sent after disable/enable network.
@firebase/firestore:     âœ– (Persistence) Writes are released when there are no queries left (skipped)
@firebase/firestore:     âœ” (Memory) Writes are released when there are no queries left
@firebase/firestore:     âœ” (Persistence) Writes that fail with code invalid-argument are rejected
@firebase/firestore:     âœ” (Memory) Writes that fail with code invalid-argument are rejected
@firebase/firestore:     âœ” (Persistence) Writes that fail with code not-found are rejected
@firebase/firestore:     âœ” (Memory) Writes that fail with code not-found are rejected
@firebase/firestore:     âœ” (Persistence) Writes that fail with code already-exists are rejected
@firebase/firestore:     âœ” (Memory) Writes that fail with code already-exists are rejected
@firebase/firestore:     âœ” (Persistence) Writes that fail with code permission-denied are rejected
@firebase/firestore:     âœ” (Memory) Writes that fail with code permission-denied are rejected
@firebase/firestore:     âœ” (Persistence) Writes that fail with code failed-precondition are rejected
@firebase/firestore:     âœ” (Memory) Writes that fail with code failed-precondition are rejected
@firebase/firestore:     âœ” (Persistence) Writes that fail with code out-of-range are rejected
@firebase/firestore:     âœ” (Memory) Writes that fail with code out-of-range are rejected
@firebase/firestore:     âœ” (Persistence) Writes that fail with code unimplemented are rejected
@firebase/firestore:     âœ” (Memory) Writes that fail with code unimplemented are rejected
@firebase/firestore:     âœ” (Persistence) Writes that fail with code data-loss are rejected
@firebase/firestore:     âœ” (Memory) Writes that fail with code data-loss are rejected
@firebase/firestore: ERROR: '[2025-03-04T23:05:34.529Z]  @firebase/firestore:', 'Firestore (11.3.0): FirebaseError: [code=resource-exhausted]: transient error'
@firebase/firestore: ERROR: '[2025-03-04T23:05:34.529Z]  @firebase/firestore:', 'Firestore (11.3.0): FirebaseError: [code=resource-exhausted]: transient error'
@firebase/firestore: ERROR: '[2025-03-04T23:05:34.529Z]  @firebase/firestore:', 'Firestore (11.3.0): Using maximum backoff delay to prevent overloading the backend.'
@firebase/firestore: ERROR: '[2025-03-04T23:05:34.529Z]  @firebase/firestore:', 'Firestore (11.3.0): Using maximum backoff delay to prevent overloading the backend.'
@firebase/firestore:     âœ” (Persistence) Writes that fail with code resource_exhausted are not rejected
@firebase/firestore: ERROR: '[2025-03-04T23:05:34.533Z]  @firebase/firestore:', 'Firestore (11.3.0): FirebaseError: [code=resource-exhausted]: transient error'
@firebase/firestore: ERROR: '[2025-03-04T23:05:34.533Z]  @firebase/firestore:', 'Firestore (11.3.0): FirebaseError: [code=resource-exhausted]: transient error'
@firebase/firestore: ERROR: '[2025-03-04T23:05:34.533Z]  @firebase/firestore:', 'Firestore (11.3.0): Using maximum backoff delay to prevent overloading the backend.'
@firebase/firestore: ERROR: '[2025-03-04T23:05:34.533Z]  @firebase/firestore:', 'Firestore (11.3.0): Using maximum backoff delay to prevent overloading the backend.'
@firebase/firestore:     âœ” (Memory) Writes that fail with code resource_exhausted are not rejected
@firebase/firestore:     âœ” (Persistence) Writes that fail with code aborted are retried
@firebase/firestore:     âœ” (Memory) Writes that fail with code aborted are retried
@firebase/firestore:     âœ” (Persistence) Writes that fail with code cancelled are retried
@firebase/firestore:     âœ” (Memory) Writes that fail with code cancelled are retried
@firebase/firestore:     âœ” (Persistence) Writes that fail with code unknown are retried
@firebase/firestore:     âœ” (Memory) Writes that fail with code unknown are retried
@firebase/firestore:     âœ” (Persistence) Writes that fail with code deadline-exceeded are retried
@firebase/firestore:     âœ” (Memory) Writes that fail with code deadline-exceeded are retried
@firebase/firestore:     âœ” (Persistence) Writes that fail with code internal are retried
@firebase/firestore:     âœ” (Memory) Writes that fail with code internal are retried
@firebase/firestore:     âœ” (Persistence) Writes that fail with code unavailable are retried
@firebase/firestore:     âœ” (Memory) Writes that fail with code unavailable are retried
@firebase/firestore:     âœ” (Persistence) Writes that fail with code unauthenticated are retried
@firebase/firestore:     âœ” (Memory) Writes that fail with code unauthenticated are retried
@firebase/firestore:     âœ” (Persistence) Ensure correct events after patching a doc (including a delete) and getting watcher events.
@firebase/firestore:     âœ” (Memory) Ensure correct events after patching a doc (including a delete) and getting watcher events.
@firebase/firestore:     âœ” (Persistence) Writes are resent after network disconnect
@firebase/firestore:     âœ” (Memory) Writes are resent after network disconnect
@firebase/firestore:     âœ” (Persistence) New writes are sent after write failure
@firebase/firestore:     âœ” (Memory) New writes are sent after write failure
@firebase/firestore:     âœ” (Persistence) Primary client acknowledges write
@firebase/firestore:     âœ– (Memory) Primary client acknowledges write (skipped)
@firebase/firestore:     âœ” (Persistence) Primary client rejects write
@firebase/firestore:     âœ– (Memory) Primary client rejects write (skipped)
@firebase/firestore:     âœ” (Persistence) Pending writes are shared between clients
@firebase/firestore:     âœ– (Memory) Pending writes are shared between clients (skipped)
@firebase/firestore:     âœ” (Persistence) Pending write is acknowledged by primary client
@firebase/firestore:     âœ– (Memory) Pending write is acknowledged by primary client (skipped)
@firebase/firestore:     âœ” (Persistence) Pending write is rejected by primary client
@firebase/firestore:     âœ– (Memory) Pending write is rejected by primary client (skipped)
@firebase/firestore:     âœ” (Persistence) Writes are released by primary client
@firebase/firestore:     âœ– (Memory) Writes are released by primary client (skipped)
@firebase/firestore:     âœ” (Persistence) Writes are held during primary failover
@firebase/firestore:     âœ– (Memory) Writes are held during primary failover (skipped)
@firebase/firestore:     âœ” (Persistence) Write are sequenced by multiple clients
@firebase/firestore:     âœ– (Memory) Write are sequenced by multiple clients (skipped)
@firebase/firestore:     âœ” (Persistence) Write is executed after primary tab failover
@firebase/firestore:     âœ– (Memory) Write is executed after primary tab failover (skipped)
@firebase/firestore:     âœ” (Persistence) Secondary tabs handle user change
@firebase/firestore:     âœ– (Memory) Secondary tabs handle user change (skipped)
@firebase/firestore:     âœ” (Persistence) Mutations are scoped by user
@firebase/firestore:     âœ– (Memory) Mutations are scoped by user (skipped)
@firebase/firestore:     âœ” (Persistence) Mutation recovers after primary takeover
@firebase/firestore:     âœ– (Memory) Mutation recovers after primary takeover (skipped)
@firebase/firestore:     âœ” (Persistence) Write is sent by newly started primary
@firebase/firestore:     âœ– (Memory) Write is sent by newly started primary (skipped)
@firebase/firestore: ERROR: '[2025-03-04T23:05:34.820Z]  @firebase/firestore:', 'Firestore (11.3.0): Failed to obtain primary lease for action 'Acknowledge batch'.'
@firebase/firestore: ERROR: '[2025-03-04T23:05:34.820Z]  @firebase/firestore:', 'Firestore (11.3.0): Failed to obtain primary lease for action 'Acknowledge batch'.'
@firebase/firestore:     âœ” (Persistence) Unresponsive primary ignores acknowledged write
@firebase/firestore:     âœ– (Memory) Unresponsive primary ignores acknowledged write (skipped)
@firebase/firestore: ERROR: '[2025-03-04T23:05:34.834Z]  @firebase/firestore:', 'Firestore (11.3.0): Failed to obtain primary lease for action 'Reject batch'.'
@firebase/firestore: ERROR: '[2025-03-04T23:05:34.834Z]  @firebase/firestore:', 'Firestore (11.3.0): Failed to obtain primary lease for action 'Reject batch'.'
@firebase/firestore:     âœ” (Persistence) Unresponsive primary ignores rejected write
@firebase/firestore:     âœ– (Memory) Unresponsive primary ignores rejected write (skipped)
@firebase/firestore:     âœ” (Persistence) Mutation are not sent twice after primary failover
@firebase/firestore:     âœ– (Memory) Mutation are not sent twice after primary failover (skipped)
@firebase/firestore:     âœ” (Persistence) Wait for pending writes resolves after write acknowledgment
@firebase/firestore:     âœ” (Memory) Wait for pending writes resolves after write acknowledgment
@firebase/firestore:     âœ” (Persistence) Wait for pending writes resolves with no writes
@firebase/firestore:     âœ” (Memory) Wait for pending writes resolves with no writes
@firebase/firestore:     âœ” (Persistence) Wait for pending writes resolves multiple times
@firebase/firestore:     âœ” (Memory) Wait for pending writes resolves multiple times
@firebase/firestore:     âœ” (Persistence) Wait for pending writes resolves if another write is issued
@firebase/firestore:     âœ” (Memory) Wait for pending writes resolves if another write is issued
@firebase/firestore:     âœ” (Persistence) Wait for pending writes waits after restart
@firebase/firestore:     âœ– (Memory) Wait for pending writes waits after restart (skipped)
@firebase/firestore:     âœ” (Persistence) Wait for pending writes resolves for write in secondary tab
@firebase/firestore:     âœ– (Memory) Wait for pending writes resolves for write in secondary tab (skipped)
@firebase/firestore:     âœ” (Persistence) Wait for pending writes resolves independently for different tabs
@firebase/firestore:     âœ– (Memory) Wait for pending writes resolves independently for different tabs (skipped)
@firebase/firestore:   diffArrays
@firebase/firestore:     âœ” Missing Element
@firebase/firestore:     âœ” AddedElement
@firebase/firestore:     âœ” Without Ordering
@firebase/firestore:     âœ” Empty Lists
@firebase/firestore:   AsyncQueue
@firebase/firestore:     âœ” schedules ops in right order
@firebase/firestore:     âœ” handles failures
@firebase/firestore:     âœ” can schedule ops in the future
@firebase/firestore:     âœ” Can cancel delayed operations
@firebase/firestore:     âœ” Can run all delayed operations early
@firebase/firestore:     âœ” Can run some delayed operations early
@firebase/firestore:     âœ” Retries retryable operations
@firebase/firestore: ERROR: '[2025-03-04T23:05:35.008Z]  @firebase/firestore:', 'Firestore (11.3.0): FIRESTORE (11.3.0) INTERNAL ASSERTION FAILED: Simulated test failure'
@firebase/firestore: ERROR: '[2025-03-04T23:05:35.008Z]  @firebase/firestore:', 'Firestore (11.3.0): FIRESTORE (11.3.0) INTERNAL ASSERTION FAILED: Simulated test failure'
@firebase/firestore: ERROR: '[2025-03-04T23:05:35.008Z]  @firebase/firestore:', 'Firestore (11.3.0): INTERNAL UNHANDLED ERROR: ', 'Error: FIRESTORE (11.3.0) INTERNAL ASSERTION FAILED: Simulated test failure
@firebase/firestore:     at fail (http://localhost:8089/absolutebootstrap.430169083.js?86d93d5a78723d17f3300e6e99995f0f06fe99b5:4413:7408)
@firebase/firestore:     at Array.<anonymous> (http://localhost:8089/absolutebootstrap.430169083.js?86d93d5a78723d17f3300e6e99995f0f06fe99b5:81503:37)
@firebase/firestore:     at AsyncQueueImpl.retryNextOp (http://localhost:8089/absolutebootstrap.430169083.js?86d93d5a78723d17f3300e6e99995f0f06fe99b5:4491:40360)
@firebase/firestore:     at http://localhost:8089/absolutebootstrap.430169083.js?86d93d5a78723d17f3300e6e99995f0f06fe99b5:4491:40078
@firebase/firestore:     at http://localhost:8089/absolutebootstrap.430169083.js?86d93d5a78723d17f3300e6e99995f0f06fe99b5:4491:39715
@firebase/firestore:     at http://localhost:8089/absolutebootstrap.430169083.js?86d93d5a78723d17f3300e6e99995f0f06fe99b5:4491:41177'
@firebase/firestore: ERROR: '[2025-03-04T23:05:35.008Z]  @firebase/firestore:', 'Firestore (11.3.0): INTERNAL UNHANDLED ERROR: ', 'Error: FIRESTORE (11.3.0) INTERNAL ASSERTION FAILED: Simulated test failure
@firebase/firestore:     at fail (http://localhost:8089/absolutebootstrap.430169083.js?86d93d5a78723d17f3300e6e99995f0f06fe99b5:4413:7408)
@firebase/firestore:     at Array.<anonymous> (http://localhost:8089/absolutebootstrap.430169083.js?86d93d5a78723d17f3300e6e99995f0f06fe99b5:81503:37)
@firebase/firestore:     at AsyncQueueImpl.retryNextOp (http://localhost:8089/absolutebootstrap.430169083.js?86d93d5a78723d17f3300e6e99995f0f06fe99b5:4491:40360)
@firebase/firestore:     at http://localhost:8089/absolutebootstrap.430169083.js?86d93d5a78723d17f3300e6e99995f0f06fe99b5:4491:40078
@firebase/firestore:     at http://localhost:8089/absolutebootstrap.430169083.js?86d93d5a78723d17f3300e6e99995f0f06fe99b5:4491:39715
@firebase/firestore:     at http://localhost:8089/absolutebootstrap.430169083.js?86d93d5a78723d17f3300e6e99995f0f06fe99b5:4491:41177'
@firebase/firestore:     âœ” Doesn't retry internal exceptions
@firebase/firestore:     âœ” Schedules first retryable attempt with no delay
@firebase/firestore:     âœ” Retries retryable operations with backoff
@firebase/firestore:     âœ” Retries retryable operations in order
@firebase/firestore:     âœ” Does not delay retryable operations that succeed
@firebase/firestore:     âœ” Catches up when retryable operation fails
@firebase/firestore:     âœ” Can drain (non-delayed) operations
@firebase/firestore:     âœ” Schedules operations with respect to shut down
@firebase/firestore:     âœ” Does not run existing operations if opted out
@firebase/firestore:   atob
@firebase/firestore:     âœ” decodes with native support
@firebase/firestore:     âœ” roundtrips with native support
@firebase/firestore:     âœ” decodes with polyfill
@firebase/firestore:     âœ” roundtrips with polyfill
@firebase/firestore:   btoa
@firebase/firestore:     âœ” encodes with native support
@firebase/firestore:     âœ” roundtrips with native support
@firebase/firestore:     âœ” encodes with polyfill
@firebase/firestore:     âœ” roundtrips with polyfill
@firebase/firestore:   byteStreamReaderFromString()
@firebase/firestore:     âœ” returns a reader stepping readable stream
@firebase/firestore:   Bundle 
@firebase/firestore:     âœ” reads with query and doc with bytesPerRead 1
@firebase/firestore:     âœ” reads with unexpected orders with bytesPerRead 1
@firebase/firestore:     âœ” reads without named query with bytesPerRead 1
@firebase/firestore:     âœ” reads with deleted doc with bytesPerRead 1
@firebase/firestore:     âœ” reads without documents or query with bytesPerRead 1
@firebase/firestore:     âœ” throws with ill-formatted bundle with bytesPerRead 1
@firebase/firestore:     âœ” reads with query and doc with bytesPerRead 4
@firebase/firestore:     âœ” reads with unexpected orders with bytesPerRead 4
@firebase/firestore:     âœ” reads without named query with bytesPerRead 4
@firebase/firestore:     âœ” reads with deleted doc with bytesPerRead 4
@firebase/firestore:     âœ” reads without documents or query with bytesPerRead 4
@firebase/firestore:     âœ” throws with ill-formatted bundle with bytesPerRead 4
@firebase/firestore:     âœ” reads with query and doc with bytesPerRead 64
@firebase/firestore:     âœ” reads with unexpected orders with bytesPerRead 64
@firebase/firestore:     âœ” reads without named query with bytesPerRead 64
@firebase/firestore:     âœ” reads with deleted doc with bytesPerRead 64
@firebase/firestore:     âœ” reads without documents or query with bytesPerRead 64
@firebase/firestore:     âœ” throws with ill-formatted bundle with bytesPerRead 64
@firebase/firestore:     âœ” reads with query and doc with bytesPerRead 1024
@firebase/firestore:     âœ” reads with unexpected orders with bytesPerRead 1024
@firebase/firestore:     âœ” reads without named query with bytesPerRead 1024
@firebase/firestore:     âœ” reads with deleted doc with bytesPerRead 1024
@firebase/firestore:     âœ” reads without documents or query with bytesPerRead 1024
@firebase/firestore:     âœ” throws with ill-formatted bundle with bytesPerRead 1024
@firebase/firestore:   LogicUtils
@firebase/firestore:     âœ” implements field filter associativity
@firebase/firestore:     âœ” implements composite filter associativity
@firebase/firestore:     âœ” implements field filter distribution over field filter
@firebase/firestore:     âœ” implements field filter distribution over and filter
@firebase/firestore:     âœ” implements field filter distribution over or filter
@firebase/firestore:     âœ” implements in expansion for field filters
@firebase/firestore:     âœ” implements in expansion for composite filters
@firebase/firestore:     âœ” implements field filter distribution over or filter 
@firebase/firestore:     âœ” implements and filter distribution with and filter
@firebase/firestore:     âœ” implements and filter distribution with or filter
@firebase/firestore:     âœ” implements or filter distribution with and filter
@firebase/firestore:     âœ” implements or filter distribution with or filter
@firebase/firestore:     âœ” implements field filter compute DNF
@firebase/firestore:     âœ” implements compute dnf flat AND filter
@firebase/firestore:     âœ” implements compute dnf flat OR filter
@firebase/firestore:     âœ” compute DNF1
@firebase/firestore:     âœ” compute DNF2
@firebase/firestore:     âœ” compute DNF3
@firebase/firestore:     âœ” compute DNF4
@firebase/firestore:     âœ” compute DNF5
@firebase/firestore:     âœ” compute DNF6
@firebase/firestore:     âœ” compute DNF7
@firebase/firestore:     âœ” compute DNF8
@firebase/firestore:   immediateSuccessor
@firebase/firestore:     âœ” generates the correct immediate successors
@firebase/firestore:   typeCast
@firebase/firestore:     âœ” can cast types
@firebase/firestore: ERROR: '[2025-03-04T23:05:35.208Z]  @firebase/firestore:', 'Firestore (11.3.0): FIRESTORE (11.3.0) INTERNAL ASSERTION FAILED: Expected type 'Bar', but was 'Foo''
@firebase/firestore: ERROR: '[2025-03-04T23:05:35.208Z]  @firebase/firestore:', 'Firestore (11.3.0): FIRESTORE (11.3.0) INTERNAL ASSERTION FAILED: Expected type 'Bar', but was 'Foo''
@firebase/firestore:     âœ” validates types
@firebase/firestore: ERROR: '[2025-03-04T23:05:35.208Z]  @firebase/firestore:', 'Firestore (11.3.0): FIRESTORE (11.3.0) INTERNAL ASSERTION FAILED: FieldMask contains field that is not unique: a'
@firebase/firestore: ERROR: '[2025-03-04T23:05:35.208Z]  @firebase/firestore:', 'Firestore (11.3.0): FIRESTORE (11.3.0) INTERNAL ASSERTION FAILED: FieldMask contains field that is not unique: a'
@firebase/firestore:   FieldMask
@firebase/firestore:     âœ” cannot contain duplicate fields
@firebase/firestore:   CompareUtf8Strings
@firebase/firestore:     âœ” compareUtf8Strings should return correct results
@firebase/firestore:   ObjectMap
@firebase/firestore:     âœ” can get/put/delete values
@firebase/firestore:     âœ” can handle collisions
@firebase/firestore:   SortedMap Tests
@firebase/firestore:     âœ” Create node
@firebase/firestore:     âœ” You can search a map for a specific key
@firebase/firestore:     âœ” You can insert a new key/value pair into the tree
@firebase/firestore:     âœ” You can remove a key/value pair from the map
@firebase/firestore:     âœ” More removals
@firebase/firestore:     âœ” Removal bug
@firebase/firestore:     âœ” Test increasing
@firebase/firestore:     âœ” The structure should be valid after insertion (1)
@firebase/firestore:     âœ” The structure should be valid after insertion (2)
@firebase/firestore:     âœ” Rotate left leaves the tree in a valid state
@firebase/firestore:     âœ” Rotate right leaves the tree in a valid state
@firebase/firestore:     âœ” The structure should be valid after insertion (3)
@firebase/firestore:     âœ” you can overwrite a value
@firebase/firestore:     âœ” removing the last element returns an empty map
@firebase/firestore:     âœ” empty .get()
@firebase/firestore:     âœ” empty .size
@firebase/firestore:     âœ” empty .remove()
@firebase/firestore:     âœ” .reverseTraversal() works.
@firebase/firestore:     âœ” insertion and removal of 100 items in random order.
@firebase/firestore:     âœ– Perf (skipped)
@firebase/firestore:     âœ– Perf: Insertion and removal with various # of items. (skipped)
@firebase/firestore:     âœ– Perf: Comparison with {}: Insertion and removal with various # of items. (skipped)
@firebase/firestore: ERROR: '[2025-03-04T23:05:43.476Z]  @firebase/firestore:', 'Firestore (11.3.0): FIRESTORE (11.3.0) INTERNAL ASSERTION FAILED: getNext() called on iterator when hasNext() is false.'
@firebase/firestore: ERROR: '[2025-03-04T23:05:43.476Z]  @firebase/firestore:', 'Firestore (11.3.0): FIRESTORE (11.3.0) INTERNAL ASSERTION FAILED: getNext() called on iterator when hasNext() is false.'
@firebase/firestore:     âœ” SortedMapIterator empty test.
@firebase/firestore:     âœ” forward iterator without start key
@firebase/firestore:     âœ” forward iterator with start key.
@firebase/firestore: ERROR: '[2025-03-04T23:05:43.476Z]  @firebase/firestore:', 'Firestore (11.3.0): FIRESTORE (11.3.0) INTERNAL ASSERTION FAILED: getNext() called on iterator when hasNext() is false.'
@firebase/firestore: ERROR: '[2025-03-04T23:05:43.476Z]  @firebase/firestore:', 'Firestore (11.3.0): FIRESTORE (11.3.0) INTERNAL ASSERTION FAILED: getNext() called on iterator when hasNext() is false.'
@firebase/firestore:     âœ” forward iterator with start key larger than max key
@firebase/firestore:     âœ” forward iterator with start key smaller than min key
@firebase/firestore:     âœ” reverse iterator without start key
@firebase/firestore:     âœ” reverse iterator with start key.
@firebase/firestore: ERROR: '[2025-03-04T23:05:43.476Z]  @firebase/firestore:', 'Firestore (11.3.0): FIRESTORE (11.3.0) INTERNAL ASSERTION FAILED: getNext() called on iterator when hasNext() is false.'
@firebase/firestore: ERROR: '[2025-03-04T23:05:43.476Z]  @firebase/firestore:', 'Firestore (11.3.0): FIRESTORE (11.3.0) INTERNAL ASSERTION FAILED: getNext() called on iterator when hasNext() is false.'
@firebase/firestore:     âœ” reverse iterator with start key smaller than min key
@firebase/firestore:     âœ” reverse iterator with start key larger than max key
@firebase/firestore:     âœ” SortedMap.indexOf returns index.
@firebase/firestore:   SortedSet
@firebase/firestore:     âœ” keeps elements in the right order
@firebase/firestore:     âœ” adds and deletes elements
@firebase/firestore:     âœ” updates elements
@firebase/firestore:     âœ” can iterate over all elements within a range
@firebase/firestore:     âœ” can iterate over all elements while condition
@firebase/firestore:     âœ” can find element equal or greater to provided.
@firebase/firestore:     âœ” can unionWith another set.
@firebase/firestore:     âœ” returns indexes of elements
@firebase/firestore:     âœ” diff sorted sets with missing element
@firebase/firestore:     âœ” diff sorted sets with added element
@firebase/firestore:     âœ” diff sorted sets with empty sets
@firebase/firestore:   (Persistence=memory_lru_gc) Count queries
@firebase/firestore:     âœ” can run count query getCountFromServer
@firebase/firestore:     âœ” can run count query getCountFromServer with special chars in the document path: so!@#$%^&*()_+special/sub
@firebase/firestore:     âœ” can run count query getCountFromServer with special chars in the document path: b1/so!@#$%^&*()_+special
@firebase/firestore:     âœ” count query doesn't use converter
@firebase/firestore:     âœ” count query supports collection groups
@firebase/firestore:     âœ” getCountFromServer fails if firestore is terminated
@firebase/firestore:     âœ” terminate doesn't crash when there is count query in flight
@firebase/firestore:     âœ– getCountFromServer fails if user is offline (skipped)
@firebase/firestore: WARN: '[2025-03-04T23:05:46.061Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'RunAggregationQuery' 0x64578b61 failed with error: ', '{"code":"failed-precondition","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/test-db/documents:runAggregationQuery', 'request:', '{"structuredAggregationQuery":{"aggregations":[{"alias":"aggregate_0","count":{}}],"structuredQuery":{"from":[{"collectionId":"oPGkXV8HbIp0TgfRymc0"}],"where":{"compositeFilter":{"op":"AND","filters":[{"fieldFilter":{"field":{"fieldPath":"key1"},"op":"EQUAL","value":{"integerValue":"42"}}},{"fieldFilter":{"field":{"fieldPath":"key2"},"op":"LESS_THAN","value":{"integerValue":"42"}}}]}}}}}'
@firebase/firestore: WARN: '[2025-03-04T23:05:46.061Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'RunAggregationQuery' 0x64578b61 failed with error: ', '{"code":"failed-precondition","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/test-db/documents:runAggregationQuery', 'request:', '{"structuredAggregationQuery":{"aggregations":[{"alias":"aggregate_0","count":{}}],"structuredQuery":{"from":[{"collectionId":"oPGkXV8HbIp0TgfRymc0"}],"where":{"compositeFilter":{"op":"AND","filters":[{"fieldFilter":{"field":{"fieldPath":"key1"},"op":"EQUAL","value":{"integerValue":"42"}}},{"fieldFilter":{"field":{"fieldPath":"key2"},"op":"LESS_THAN","value":{"integerValue":"42"}}}]}}}}}'
@firebase/firestore:     âœ” getCountFromServer error message contains console link if missing index
@firebase/firestore:   (Persistence=indexeddb) Count queries
@firebase/firestore:     âœ” can run count query getCountFromServer
@firebase/firestore:     âœ” can run count query getCountFromServer with special chars in the document path: so!@#$%^&*()_+special/sub
@firebase/firestore:     âœ” can run count query getCountFromServer with special chars in the document path: b1/so!@#$%^&*()_+special
@firebase/firestore:     âœ” count query doesn't use converter
@firebase/firestore:     âœ” count query supports collection groups
@firebase/firestore:     âœ” getCountFromServer fails if firestore is terminated
@firebase/firestore:     âœ” terminate doesn't crash when there is count query in flight
@firebase/firestore:     âœ– getCountFromServer fails if user is offline (skipped)
@firebase/firestore: WARN: '[2025-03-04T23:05:48.631Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'RunAggregationQuery' 0x64578b74 failed with error: ', '{"code":"failed-precondition","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/test-db/documents:runAggregationQuery', 'request:', '{"structuredAggregationQuery":{"aggregations":[{"alias":"aggregate_0","count":{}}],"structuredQuery":{"from":[{"collectionId":"S9JRkneZCt3ZagoG3dZm"}],"where":{"compositeFilter":{"op":"AND","filters":[{"fieldFilter":{"field":{"fieldPath":"key1"},"op":"EQUAL","value":{"integerValue":"42"}}},{"fieldFilter":{"field":{"fieldPath":"key2"},"op":"LESS_THAN","value":{"integerValue":"42"}}}]}}}}}'
@firebase/firestore: WARN: '[2025-03-04T23:05:48.631Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'RunAggregationQuery' 0x64578b74 failed with error: ', '{"code":"failed-precondition","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/test-db/documents:runAggregationQuery', 'request:', '{"structuredAggregationQuery":{"aggregations":[{"alias":"aggregate_0","count":{}}],"structuredQuery":{"from":[{"collectionId":"S9JRkneZCt3ZagoG3dZm"}],"where":{"compositeFilter":{"op":"AND","filters":[{"fieldFilter":{"field":{"fieldPath":"key1"},"op":"EQUAL","value":{"integerValue":"42"}}},{"fieldFilter":{"field":{"fieldPath":"key2"},"op":"LESS_THAN","value":{"integerValue":"42"}}}]}}}}}'
@firebase/firestore:     âœ” getCountFromServer error message contains console link if missing index
@firebase/firestore:   (Persistence=memory_lru_gc) Aggregation queries
@firebase/firestore:     âœ” can run count query getAggregationFromServer
@firebase/firestore:     âœ” can alias aggregations using getAggregationFromServer
@firebase/firestore:     âœ” allows special chars in aliases when using getAggregationFromServer
@firebase/firestore:     âœ” allows backticks in aliases when using getAggregationFromServer
@firebase/firestore:     âœ” allows backslash in aliases when using getAggregationFromServer
@firebase/firestore:     âœ” allows aliases with length greater than 1500 bytes
@firebase/firestore:     âœ” can get duplicate aggregations using getAggregationFromServer
@firebase/firestore:     âœ” getAggregationFromServer doesn't use converter
@firebase/firestore:     âœ” aggregate query supports collection groups
@firebase/firestore:     âœ” getAggregateFromServer fails if firestore is terminated
@firebase/firestore:     âœ” terminate doesn't crash when there is aggregate query in flight
@firebase/firestore:     âœ– getAggregateFromServer fails if user is offline (skipped)
@firebase/firestore: WARN: '[2025-03-04T23:05:52.459Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'RunAggregationQuery' 0x64578b93 failed with error: ', '{"code":"failed-precondition","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/test-db/documents:runAggregationQuery', 'request:', '{"structuredAggregationQuery":{"aggregations":[{"alias":"aggregate_0","count":{}}],"structuredQuery":{"from":[{"collectionId":"wcoaFeIy3lt9897e55xG"}],"where":{"compositeFilter":{"op":"AND","filters":[{"fieldFilter":{"field":{"fieldPath":"key1"},"op":"EQUAL","value":{"integerValue":"42"}}},{"fieldFilter":{"field":{"fieldPath":"key2"},"op":"LESS_THAN","value":{"integerValue":"42"}}}]}}}}}'
@firebase/firestore: WARN: '[2025-03-04T23:05:52.459Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'RunAggregationQuery' 0x64578b93 failed with error: ', '{"code":"failed-precondition","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/test-db/documents:runAggregationQuery', 'request:', '{"structuredAggregationQuery":{"aggregations":[{"alias":"aggregate_0","count":{}}],"structuredQuery":{"from":[{"collectionId":"wcoaFeIy3lt9897e55xG"}],"where":{"compositeFilter":{"op":"AND","filters":[{"fieldFilter":{"field":{"fieldPath":"key1"},"op":"EQUAL","value":{"integerValue":"42"}}},{"fieldFilter":{"field":{"fieldPath":"key2"},"op":"LESS_THAN","value":{"integerValue":"42"}}}]}}}}}'
@firebase/firestore:     âœ” getAggregateFromServer error message contains console link good if missing index
@firebase/firestore:   (Persistence=indexeddb) Aggregation queries
@firebase/firestore:     âœ” can run count query getAggregationFromServer
@firebase/firestore:     âœ” can alias aggregations using getAggregationFromServer
@firebase/firestore:     âœ” allows special chars in aliases when using getAggregationFromServer
@firebase/firestore:     âœ” allows backticks in aliases when using getAggregationFromServer
@firebase/firestore:     âœ” allows backslash in aliases when using getAggregationFromServer
@firebase/firestore:     âœ” allows aliases with length greater than 1500 bytes
@firebase/firestore:     âœ” can get duplicate aggregations using getAggregationFromServer
@firebase/firestore:     âœ” getAggregationFromServer doesn't use converter
@firebase/firestore:     âœ” aggregate query supports collection groups
@firebase/firestore:     âœ” getAggregateFromServer fails if firestore is terminated
@firebase/firestore:     âœ” terminate doesn't crash when there is aggregate query in flight
@firebase/firestore:     âœ– getAggregateFromServer fails if user is offline (skipped)
@firebase/firestore: WARN: '[2025-03-04T23:05:56.463Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'RunAggregationQuery' 0x64578bb2 failed with error: ', '{"code":"failed-precondition","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/test-db/documents:runAggregationQuery', 'request:', '{"structuredAggregationQuery":{"aggregations":[{"alias":"aggregate_0","count":{}}],"structuredQuery":{"from":[{"collectionId":"1DSHkGMWKXKqmMdlcf1k"}],"where":{"compositeFilter":{"op":"AND","filters":[{"fieldFilter":{"field":{"fieldPath":"key1"},"op":"EQUAL","value":{"integerValue":"42"}}},{"fieldFilter":{"field":{"fieldPath":"key2"},"op":"LESS_THAN","value":{"integerValue":"42"}}}]}}}}}'
@firebase/firestore: WARN: '[2025-03-04T23:05:56.463Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'RunAggregationQuery' 0x64578bb2 failed with error: ', '{"code":"failed-precondition","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/test-db/documents:runAggregationQuery', 'request:', '{"structuredAggregationQuery":{"aggregations":[{"alias":"aggregate_0","count":{}}],"structuredQuery":{"from":[{"collectionId":"1DSHkGMWKXKqmMdlcf1k"}],"where":{"compositeFilter":{"op":"AND","filters":[{"fieldFilter":{"field":{"fieldPath":"key1"},"op":"EQUAL","value":{"integerValue":"42"}}},{"fieldFilter":{"field":{"fieldPath":"key2"},"op":"LESS_THAN","value":{"integerValue":"42"}}}]}}}}}'
@firebase/firestore:     âœ” getAggregateFromServer error message contains console link good if missing index
@firebase/firestore:   (Persistence=memory_lru_gc) Aggregation queries - sum / average
@firebase/firestore:     âœ” can run sum query getAggregationFromServer
@firebase/firestore:     âœ” can run average query getAggregationFromServer
@firebase/firestore:     âœ” can get multiple aggregations using getAggregationFromServer
@firebase/firestore:     âœ” can get duplicate aggregations using getAggregationFromServer
@firebase/firestore:     âœ” can perform max (5) aggregations using getAggregationFromServer
@firebase/firestore: WARN: '[2025-03-04T23:05:58.808Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'RunAggregationQuery' 0x64578bc4 failed with error: ', '{"code":"invalid-argument","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/test-db/documents:runAggregationQuery', 'request:', '{"structuredAggregationQuery":{"aggregations":[{"alias":"aggregate_0","sum":{"field":{"fieldPath":"pages"}}},{"alias":"aggregate_1","avg":{"field":{"fieldPath":"pages"}}},{"alias":"aggregate_2","count":{}},{"alias":"aggregate_3","sum":{"field":{"fieldPath":"pages"}}},{"alias":"aggregate_4","avg":{"field":{"fieldPath":"pages"}}},{"alias":"aggregate_5","count":{}}],"structuredQuery":{"from":[{"collectionId":"KHOPZjCXbR7g4rSIk4v7"}]}}}'
@firebase/firestore: WARN: '[2025-03-04T23:05:58.808Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'RunAggregationQuery' 0x64578bc4 failed with error: ', '{"code":"invalid-argument","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/test-db/documents:runAggregationQuery', 'request:', '{"structuredAggregationQuery":{"aggregations":[{"alias":"aggregate_0","sum":{"field":{"fieldPath":"pages"}}},{"alias":"aggregate_1","avg":{"field":{"fieldPath":"pages"}}},{"alias":"aggregate_2","count":{}},{"alias":"aggregate_3","sum":{"field":{"fieldPath":"pages"}}},{"alias":"aggregate_4","avg":{"field":{"fieldPath":"pages"}}},{"alias":"aggregate_5","count":{}}],"structuredQuery":{"from":[{"collectionId":"KHOPZjCXbR7g4rSIk4v7"}]}}}'
@firebase/firestore:     âœ” fails when exceeding the max (5) aggregations using getAggregationFromServer
@firebase/firestore:     âœ” returns undefined when getting the result of an unrequested aggregation
@firebase/firestore:     âœ” performs aggregates when using `in` operator getAggregationFromServer
@firebase/firestore:     âœ” performs aggregations on nested map values using getAggregationFromServer
@firebase/firestore:     âœ” performs sum that results in float using getAggregationFromServer
@firebase/firestore:     âœ” performs sum of ints and floats that results in an int using getAggregationFromServer
@firebase/firestore:     âœ” performs sum that overflows max int using getAggregationFromServer
@firebase/firestore:     âœ” performs sum that can overflow integer values during accumulation using getAggregationFromServer
@firebase/firestore:     âœ” performs sum that is negative using getAggregationFromServer
@firebase/firestore:     âœ” performs sum that is positive infinity using getAggregationFromServer
@firebase/firestore:     âœ” performs sum that is positive infinity using getAggregationFromServer v2
@firebase/firestore:     âœ” performs sum that is negative infinity using getAggregationFromServer
@firebase/firestore:     âœ” performs sum that is valid but could overflow during aggregation using getAggregationFromServer
@firebase/firestore:     âœ” performs sum that includes NaN using getAggregationFromServer
@firebase/firestore:     âœ” performs sum over a result set of zero documents using getAggregationFromServer
@firebase/firestore:     âœ” performs sum only on numeric fields using getAggregationFromServer
@firebase/firestore:     âœ” performs sum of min IEEE754 using getAggregationFromServer
@firebase/firestore:     âœ” performs average of ints that results in an int using getAggregationFromServer
@firebase/firestore:     âœ” performs average of floats that results in an int using getAggregationFromServer
@firebase/firestore:     âœ” performs average of floats and ints that results in an int using getAggregationFromServer
@firebase/firestore:     âœ” performs average of float that results in float using getAggregationFromServer
@firebase/firestore:     âœ” performs average of floats and ints that results in a float using getAggregationFromServer
@firebase/firestore:     âœ” performs average of ints that results in a float using getAggregationFromServer
@firebase/firestore:     âœ” performs average causing underflow using getAggregationFromServer
@firebase/firestore:     âœ” performs average of min IEEE754 using getAggregationFromServer
@firebase/firestore:     âœ” performs average that overflows IEEE754 during accumulation using getAggregationFromServer
@firebase/firestore:     âœ” performs average that includes NaN using getAggregationFromServer
@firebase/firestore:     âœ” performs average over a result set of zero documents using getAggregationFromServer
@firebase/firestore:     âœ” performs average only on numeric fields using getAggregationFromServer
@firebase/firestore:   (Persistence=indexeddb) Aggregation queries - sum / average
@firebase/firestore:     âœ” can run sum query getAggregationFromServer
@firebase/firestore:     âœ” can run average query getAggregationFromServer
@firebase/firestore:     âœ” can get multiple aggregations using getAggregationFromServer
@firebase/firestore:     âœ” can get duplicate aggregations using getAggregationFromServer
@firebase/firestore:     âœ” can perform max (5) aggregations using getAggregationFromServer
@firebase/firestore: WARN: '[2025-03-04T23:06:12.426Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'RunAggregationQuery' 0x64578c2a failed with error: ', '{"code":"invalid-argument","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/test-db/documents:runAggregationQuery', 'request:', '{"structuredAggregationQuery":{"aggregations":[{"alias":"aggregate_0","sum":{"field":{"fieldPath":"pages"}}},{"alias":"aggregate_1","avg":{"field":{"fieldPath":"pages"}}},{"alias":"aggregate_2","count":{}},{"alias":"aggregate_3","sum":{"field":{"fieldPath":"pages"}}},{"alias":"aggregate_4","avg":{"field":{"fieldPath":"pages"}}},{"alias":"aggregate_5","count":{}}],"structuredQuery":{"from":[{"collectionId":"pnDguEBEsdCLLALyfU8p"}]}}}'
@firebase/firestore: WARN: '[2025-03-04T23:06:12.426Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'RunAggregationQuery' 0x64578c2a failed with error: ', '{"code":"invalid-argument","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/test-db/documents:runAggregationQuery', 'request:', '{"structuredAggregationQuery":{"aggregations":[{"alias":"aggregate_0","sum":{"field":{"fieldPath":"pages"}}},{"alias":"aggregate_1","avg":{"field":{"fieldPath":"pages"}}},{"alias":"aggregate_2","count":{}},{"alias":"aggregate_3","sum":{"field":{"fieldPath":"pages"}}},{"alias":"aggregate_4","avg":{"field":{"fieldPath":"pages"}}},{"alias":"aggregate_5","count":{}}],"structuredQuery":{"from":[{"collectionId":"pnDguEBEsdCLLALyfU8p"}]}}}'
@firebase/firestore:     âœ” fails when exceeding the max (5) aggregations using getAggregationFromServer
@firebase/firestore:     âœ” returns undefined when getting the result of an unrequested aggregation
@firebase/firestore:     âœ” performs aggregates when using `in` operator getAggregationFromServer
@firebase/firestore:     âœ” performs aggregations on nested map values using getAggregationFromServer
@firebase/firestore:     âœ” performs sum that results in float using getAggregationFromServer
@firebase/firestore:     âœ” performs sum of ints and floats that results in an int using getAggregationFromServer
@firebase/firestore:     âœ” performs sum that overflows max int using getAggregationFromServer
@firebase/firestore:     âœ” performs sum that can overflow integer values during accumulation using getAggregationFromServer
@firebase/firestore:     âœ” performs sum that is negative using getAggregationFromServer
@firebase/firestore:     âœ” performs sum that is positive infinity using getAggregationFromServer
@firebase/firestore:     âœ” performs sum that is positive infinity using getAggregationFromServer v2
@firebase/firestore:     âœ” performs sum that is negative infinity using getAggregationFromServer
@firebase/firestore:     âœ” performs sum that is valid but could overflow during aggregation using getAggregationFromServer
@firebase/firestore:     âœ” performs sum that includes NaN using getAggregationFromServer
@firebase/firestore:     âœ” performs sum over a result set of zero documents using getAggregationFromServer
@firebase/firestore:     âœ” performs sum only on numeric fields using getAggregationFromServer
@firebase/firestore:     âœ” performs sum of min IEEE754 using getAggregationFromServer
@firebase/firestore:     âœ” performs average of ints that results in an int using getAggregationFromServer
@firebase/firestore:     âœ” performs average of floats that results in an int using getAggregationFromServer
@firebase/firestore:     âœ” performs average of floats and ints that results in an int using getAggregationFromServer
@firebase/firestore:     âœ” performs average of float that results in float using getAggregationFromServer
@firebase/firestore:     âœ” performs average of floats and ints that results in a float using getAggregationFromServer
@firebase/firestore:     âœ” performs average of ints that results in a float using getAggregationFromServer
@firebase/firestore:     âœ” performs average causing underflow using getAggregationFromServer
@firebase/firestore:     âœ” performs average of min IEEE754 using getAggregationFromServer
@firebase/firestore:     âœ” performs average that overflows IEEE754 during accumulation using getAggregationFromServer
@firebase/firestore:     âœ” performs average that includes NaN using getAggregationFromServer
@firebase/firestore:     âœ” performs average over a result set of zero documents using getAggregationFromServer
@firebase/firestore:     âœ” performs average only on numeric fields using getAggregationFromServer
@firebase/firestore:   (Persistence=memory_lru_gc) Array Transforms:
@firebase/firestore:     âœ” create document with arrayUnion()
@firebase/firestore:     âœ” append to array via update()
@firebase/firestore:     âœ” append to array via set(..., {merge: true})
@firebase/firestore:     âœ” append object to array via update()
@firebase/firestore:     âœ” remove from array via update()
@firebase/firestore:     âœ” remove from array via set(..., {merge: true})
@firebase/firestore:     âœ” remove object from array via update()
@firebase/firestore:     âœ” arrayUnion() supports DocumentReference
@firebase/firestore:     Server Application: 
@firebase/firestore:       âœ” set() with no cached base doc
@firebase/firestore:       âœ” update() with no cached base doc
@firebase/firestore:       âœ” set(..., {merge}) with no cached based doc
@firebase/firestore:       âœ” update() with cached base doc using arrayUnion()
@firebase/firestore:       âœ” update() with cached base doc using arrayRemove()
@firebase/firestore:   (Persistence=indexeddb) Array Transforms:
@firebase/firestore:     âœ” create document with arrayUnion()
@firebase/firestore:     âœ” append to array via update()
@firebase/firestore:     âœ” append to array via set(..., {merge: true})
@firebase/firestore:     âœ” append object to array via update()
@firebase/firestore:     âœ” remove from array via update()
@firebase/firestore:     âœ” remove from array via set(..., {merge: true})
@firebase/firestore:     âœ” remove object from array via update()
@firebase/firestore:     âœ” arrayUnion() supports DocumentReference
@firebase/firestore:     Server Application: 
@firebase/firestore:       âœ” set() with no cached base doc
@firebase/firestore:       âœ” update() with no cached base doc
@firebase/firestore:       âœ” set(..., {merge}) with no cached based doc
@firebase/firestore:       âœ” update() with cached base doc using arrayUnion()
@firebase/firestore:       âœ” update() with cached base doc using arrayRemove()
@firebase/firestore:   (Persistence=memory_lru_gc) Database batch writes
@firebase/firestore:     âœ” supports empty batches
@firebase/firestore:     âœ” can set documents
@firebase/firestore:     âœ” can set documents with merge
@firebase/firestore:     âœ” can update documents
@firebase/firestore:     âœ” can update nested fields
@firebase/firestore:     âœ” can delete documents
@firebase/firestore:     âœ” commit atomically, raising correct events
@firebase/firestore:     âœ” fail atomically, raising correct events
@firebase/firestore:     âœ” write the same server timestamp across writes
@firebase/firestore:     âœ” can write the same document multiple times
@firebase/firestore:     (Persistence=memory_lru_gc) withConverter() support
@firebase/firestore:       âœ” for WriteBatch.set<T>()
@firebase/firestore:     (Persistence=indexeddb) withConverter() support
@firebase/firestore:       âœ” for WriteBatch.set<T>()
@firebase/firestore:   (Persistence=indexeddb) Database batch writes
@firebase/firestore:     âœ” supports empty batches
@firebase/firestore:     âœ” can set documents
@firebase/firestore:     âœ” can set documents with merge
@firebase/firestore:     âœ” can update documents
@firebase/firestore:     âœ” can update nested fields
@firebase/firestore:     âœ” can delete documents
@firebase/firestore:     âœ” commit atomically, raising correct events
@firebase/firestore:     âœ” fail atomically, raising correct events
@firebase/firestore:     âœ” write the same server timestamp across writes
@firebase/firestore:     âœ” can write the same document multiple times
@firebase/firestore:     (Persistence=memory_lru_gc) withConverter() support
@firebase/firestore:       âœ” for WriteBatch.set<T>()
@firebase/firestore:     (Persistence=indexeddb) withConverter() support
@firebase/firestore:       âœ” for WriteBatch.set<T>()
@firebase/firestore:   (Persistence=memory_lru_gc) Bundles
@firebase/firestore:     âœ” load with documents only with on progress and promise interface
@firebase/firestore:     âœ” load with documents and queries with promise interface
@firebase/firestore:     âœ” load for a second time skips
@firebase/firestore: ERROR: '[2025-03-04T23:06:47.612Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T23:06:47.612Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:     âœ” load with documents already pulled from backend
@firebase/firestore:     âœ” loaded documents should not be GC-ed right away
@firebase/firestore: WARN: '[2025-03-04T23:06:47.632Z]  @firebase/firestore:', 'Firestore (11.3.0): SyncEngine', 'Loading bundle failed with FirebaseError: [code=invalid-argument]: Tried to deserialize key from different project: jscore-sandbox-141b5 vs test-db2'
@firebase/firestore: WARN: '[2025-03-04T23:06:47.632Z]  @firebase/firestore:', 'Firestore (11.3.0): SyncEngine', 'Loading bundle failed with FirebaseError: [code=invalid-argument]: Tried to deserialize key from different project: jscore-sandbox-141b5 vs test-db2'
@firebase/firestore:     âœ” load with documents from other projects fails
@firebase/firestore:   (Persistence=indexeddb) Bundles
@firebase/firestore:     âœ” load with documents only with on progress and promise interface
@firebase/firestore:     âœ” load with documents and queries with promise interface
@firebase/firestore:     âœ” load for a second time skips
@firebase/firestore: ERROR: '[2025-03-04T23:06:48.449Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T23:06:48.449Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:     âœ” load with documents already pulled from backend
@firebase/firestore:     âœ” loaded documents should not be GC-ed right away
@firebase/firestore: WARN: '[2025-03-04T23:06:48.474Z]  @firebase/firestore:', 'Firestore (11.3.0): SyncEngine', 'Loading bundle failed with FirebaseError: [code=invalid-argument]: Tried to deserialize key from different project: jscore-sandbox-141b5 vs test-db2'
@firebase/firestore: WARN: '[2025-03-04T23:06:48.474Z]  @firebase/firestore:', 'Firestore (11.3.0): SyncEngine', 'Loading bundle failed with FirebaseError: [code=invalid-argument]: Tried to deserialize key from different project: jscore-sandbox-141b5 vs test-db2'
@firebase/firestore:     âœ” load with documents from other projects fails
@firebase/firestore:   (Persistence=memory_lru_gc) Composite Index Queries
@firebase/firestore:     OR Queries
@firebase/firestore:       âœ” can use query overloads
@firebase/firestore:       âœ” can use or queries
@firebase/firestore:     Aggregation queries - sum / average
@firebase/firestore:       âœ” aggregate query supports collection groups - multi-aggregate
@firebase/firestore:       âœ” performs aggregations on documents with all aggregated fields using getAggregationFromServer
@firebase/firestore:       âœ” performs aggregates on multiple fields where one aggregate could cause short-circuit due to NaN using getAggregationFromServer
@firebase/firestore:       âœ” performs aggregates when using `array-contains-any` operator getAggregationFromServer
@firebase/firestore:     Multiple Inequality
@firebase/firestore:       âœ” can use multiple inequality filters
@firebase/firestore:       âœ” can use on special values
@firebase/firestore:       âœ” can use with array membership
@firebase/firestore:       âœ” can use with nested field
@firebase/firestore:       âœ” can use with nested composite filters
@firebase/firestore:       âœ” inequality fields will be implicitly ordered lexicographically
@firebase/firestore:       âœ” can use multiple explicit order by field
@firebase/firestore:       âœ” can use in aggregate query
@firebase/firestore:       âœ” can use document ID im multiple inequality query
@firebase/firestore:       âœ” can get documents while offline
@firebase/firestore:       âœ” can get same result from server and cache
@firebase/firestore:       âœ” inequality query will reject if document key is not the last orderBy field
@firebase/firestore:       âœ” inequality query will reject if document key appears only in equality filter
@firebase/firestore:   (Persistence=indexeddb) Composite Index Queries
@firebase/firestore:     OR Queries
@firebase/firestore:       âœ” can use query overloads
@firebase/firestore:       âœ” can use or queries
@firebase/firestore:     Aggregation queries - sum / average
@firebase/firestore:       âœ” aggregate query supports collection groups - multi-aggregate
@firebase/firestore:       âœ” performs aggregations on documents with all aggregated fields using getAggregationFromServer
@firebase/firestore:       âœ” performs aggregates on multiple fields where one aggregate could cause short-circuit due to NaN using getAggregationFromServer
@firebase/firestore:       âœ” performs aggregates when using `array-contains-any` operator getAggregationFromServer
@firebase/firestore:     Multiple Inequality
@firebase/firestore:       âœ” can use multiple inequality filters
@firebase/firestore:       âœ” can use on special values
@firebase/firestore:       âœ” can use with array membership
@firebase/firestore:       âœ” can use with nested field
@firebase/firestore:       âœ” can use with nested composite filters
@firebase/firestore:       âœ” inequality fields will be implicitly ordered lexicographically
@firebase/firestore:       âœ” can use multiple explicit order by field
@firebase/firestore:       âœ” can use in aggregate query
@firebase/firestore:       âœ” can use document ID im multiple inequality query
@firebase/firestore:       âœ” can get documents while offline
@firebase/firestore:       âœ” can get same result from server and cache
@firebase/firestore:       âœ” inequality query will reject if document key is not the last orderBy field
@firebase/firestore:       âœ” inequality query will reject if document key appears only in equality filter
@firebase/firestore:   (Persistence=memory_lru_gc) Cursors
@firebase/firestore:     âœ” can page through items
@firebase/firestore:     âœ” can be created from documents
@firebase/firestore:     âœ” can be created from values
@firebase/firestore:     âœ” can be created using document id
@firebase/firestore:     âœ” can be used with reference values
@firebase/firestore:     âœ” can be used in descending queries
@firebase/firestore:     âœ” can accept Timestamps as bounds
@firebase/firestore:     âœ” can accept Timestamps in where clause
@firebase/firestore:     âœ” truncate Timestamps
@firebase/firestore:   (Persistence=indexeddb) Cursors
@firebase/firestore:     âœ” can page through items
@firebase/firestore:     âœ” can be created from documents
@firebase/firestore:     âœ” can be created from values
@firebase/firestore:     âœ” can be created using document id
@firebase/firestore:     âœ” can be used with reference values
@firebase/firestore:     âœ” can be used in descending queries
@firebase/firestore:     âœ” can accept Timestamps as bounds
@firebase/firestore:     âœ” can accept Timestamps in where clause
@firebase/firestore:     âœ” truncate Timestamps
@firebase/firestore:   (Persistence=memory_lru_gc) Database
@firebase/firestore:     âœ” can set a document
@firebase/firestore:     âœ” doc() will auto generate an ID
@firebase/firestore:     âœ” can delete a document
@firebase/firestore:     âœ” can update existing document
@firebase/firestore:     âœ” can retrieve document that does not exist
@firebase/firestore:     âœ” can update an unknown document
@firebase/firestore:     âœ” can merge data with an existing document using set
@firebase/firestore:     âœ” can merge server timestamps
@firebase/firestore:     âœ” can merge empty object
@firebase/firestore:     âœ” update with empty object replaces all fields
@firebase/firestore:     âœ” merge with empty object replaces all fields
@firebase/firestore:     âœ” can delete field using merge
@firebase/firestore:     âœ” can delete field using mergeFields
@firebase/firestore:     âœ” can set server timestamps using mergeFields
@firebase/firestore:     âœ” can replace an array by merging using set
@firebase/firestore:     âœ” can't specify a field mask for a missing field using set
@firebase/firestore:     âœ” can set a subset of fields using a field mask
@firebase/firestore:     âœ” doesn't apply field delete outside of mask
@firebase/firestore:     âœ” doesn't apply field transform outside of mask
@firebase/firestore:     âœ” can set an empty field mask
@firebase/firestore:     âœ” can specify fields multiple times in a field mask
@firebase/firestore:     âœ” cannot update nonexistent document
@firebase/firestore:     âœ” can delete a field with an update
@firebase/firestore:     âœ” can update nested fields
@firebase/firestore:     âœ” can specify updated field multiple times
@firebase/firestore:     âœ” CollectionRef.add() resolves with resulting DocumentRef.
@firebase/firestore: ERROR: '[2025-03-04T23:07:38.162Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T23:07:38.162Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:     âœ” onSnapshotsInSync fires after listeners are in sync
@firebase/firestore: ERROR: '[2025-03-04T23:07:38.299Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T23:07:38.299Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:     âœ” DocumentSnapshot events for nonexistent document
@firebase/firestore: ERROR: '[2025-03-04T23:07:38.700Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T23:07:38.700Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:     âœ” DocumentSnapshot events for add data to document
@firebase/firestore: ERROR: '[2025-03-04T23:07:39.370Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T23:07:39.370Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:     âœ” DocumentSnapshot events for change data in document
@firebase/firestore: ERROR: '[2025-03-04T23:07:40.038Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T23:07:40.038Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:     âœ” DocumentSnapshot events for delete data in document
@firebase/firestore: ERROR: '[2025-03-04T23:07:40.295Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T23:07:40.295Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T23:07:40.296Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T23:07:40.296Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:     âœ” Listen can be called multiple times
@firebase/firestore:     âœ” Metadata only changes are not fired when no options provided
@firebase/firestore:     âœ” exposes "firestore" on document references.
@firebase/firestore:     âœ” exposes "firestore" on query references.
@firebase/firestore:     âœ” can compare DocumentReference instances with isEqual().
@firebase/firestore:     âœ” can compare Query instances with isEqual().
@firebase/firestore:     âœ” can compare multiple inequality Query instances with isEqual().
@firebase/firestore:     âœ” can traverse collections and documents.
@firebase/firestore:     âœ” can traverse collection and document parents.
@firebase/firestore:     âœ” can queue writes while offline
@firebase/firestore:     âœ– offline writes are sent after restart (skipped)
@firebase/firestore:     âœ” rejects subsequent method calls after terminate() is called
@firebase/firestore:     âœ” can call terminate() multiple times
@firebase/firestore:     âœ– maintains persistence after restarting app (skipped)
@firebase/firestore:     âœ– can clear persistence if the client has been terminated (skipped)
@firebase/firestore:     âœ– can clear persistence if the client has not been initialized (skipped)
@firebase/firestore:     âœ– cannot clear persistence if the client has been initialized (skipped)
@firebase/firestore:     âœ” can get documents while offline
@firebase/firestore:     âœ” can enable and disable networking
@firebase/firestore:     âœ” can start a new instance after shut down
@firebase/firestore:     âœ” new operation after termination should throw
@firebase/firestore:     âœ” calling terminate multiple times should proceed
@firebase/firestore: ERROR: '[2025-03-04T23:07:41.955Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T23:07:41.955Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:     âœ” can unlisten queries after termination
@firebase/firestore:     âœ” can query after firestore restart
@firebase/firestore:     âœ” query listener throws error on termination
@firebase/firestore:     âœ” can wait for pending writes
@firebase/firestore:     âœ” waiting for pending writes resolves immediately when offline and no pending writes
@firebase/firestore:     âœ– can set and get data with auto detect long polling enabled (skipped)
@firebase/firestore:     âœ” can keep docs separate with multi-db when online
@firebase/firestore:     âœ” can keep docs separate with multi-db when offline
@firebase/firestore:     âœ” Cannot get document from cache with eager GC enabled.
@firebase/firestore:     âœ” Can get document from cache with Lru GC enabled.
@firebase/firestore:     âœ” Lru GC is enabled by default.
@firebase/firestore:     vector embeddings
@firebase/firestore:       âœ” can write and read vector embeddings
@firebase/firestore:       âœ” can listen to documents with vectors
@firebase/firestore:       âœ” SDK orders vector field same way as backend
@firebase/firestore:       From Cache
@firebase/firestore:         âœ” SDK orders vector field the same way online and offline
@firebase/firestore:     documents: 
@firebase/firestore:       âœ” set/update should reject: undefined
@firebase/firestore:       âœ” set/update should reject: null
@firebase/firestore:       âœ” set/update should reject: 0
@firebase/firestore:       âœ” set/update should reject: foo
@firebase/firestore:       âœ” set/update should reject: a
@firebase/firestore:       âœ” set/update should reject: Tue Mar 04 2025 15:05:26 GMT-0800 (Pacific Standard Time)
@firebase/firestore:     (Persistence=memory_lru_gc) Queries are validated client-side
@firebase/firestore:       âœ” same inequality fields works
@firebase/firestore:       âœ” inequality and equality on different fields works
@firebase/firestore:       âœ” inequality on multiple fields works
@firebase/firestore:       âœ” inequality with key fields works
@firebase/firestore:       âœ” inequality and array-contains on different fields works
@firebase/firestore:       âœ” inequality and array-contains-any on different fields works
@firebase/firestore:       âœ” multiple inequality and array-contains on different fields works
@firebase/firestore:       âœ” multiple inequality and array-contains-any on different fields works
@firebase/firestore:       âœ” inequality and IN on different fields works
@firebase/firestore:       âœ” multiple inequality and IN on different fields works
@firebase/firestore:       âœ” inequality and NOT IN on different fields works
@firebase/firestore:       âœ” multiple inequality and NOT IN on different fields works
@firebase/firestore:       âœ” inequality same as orderBy works.
@firebase/firestore:       âœ” != same as orderBy works.
@firebase/firestore:       âœ” equality different than orderBy works
@firebase/firestore:       âœ” inequality different than orderBy works.
@firebase/firestore:       âœ” multiple inequality different from orderBy works.
@firebase/firestore:       âœ” array-contains different than orderBy works
@firebase/firestore:       âœ” IN different than orderBy works
@firebase/firestore:       âœ” array-contains-any different than orderBy works
@firebase/firestore:     (Persistence=indexeddb) Queries are validated client-side
@firebase/firestore:       âœ” same inequality fields works
@firebase/firestore:       âœ” inequality and equality on different fields works
@firebase/firestore:       âœ” inequality on multiple fields works
@firebase/firestore:       âœ” inequality with key fields works
@firebase/firestore:       âœ” inequality and array-contains on different fields works
@firebase/firestore:       âœ” inequality and array-contains-any on different fields works
@firebase/firestore:       âœ” multiple inequality and array-contains on different fields works
@firebase/firestore:       âœ” multiple inequality and array-contains-any on different fields works
@firebase/firestore:       âœ” inequality and IN on different fields works
@firebase/firestore:       âœ” multiple inequality and IN on different fields works
@firebase/firestore:       âœ” inequality and NOT IN on different fields works
@firebase/firestore:       âœ” multiple inequality and NOT IN on different fields works
@firebase/firestore:       âœ” inequality same as orderBy works.
@firebase/firestore:       âœ” != same as orderBy works.
@firebase/firestore:       âœ” equality different than orderBy works
@firebase/firestore:       âœ” inequality different than orderBy works.
@firebase/firestore:       âœ” multiple inequality different from orderBy works.
@firebase/firestore:       âœ” array-contains different than orderBy works
@firebase/firestore:       âœ” IN different than orderBy works
@firebase/firestore:       âœ” array-contains-any different than orderBy works
@firebase/firestore:     Listens are rejected remotely:
@firebase/firestore:       âœ” will reject listens
@firebase/firestore:       âœ” will reject same listens twice in a row
@firebase/firestore:       âœ” will reject gets
@firebase/firestore:       âœ” will reject gets twice in a row
@firebase/firestore:     (Persistence=memory_lru_gc) withConverter() support
@firebase/firestore:       âœ” for DocumentReference.withConverter()
@firebase/firestore:       âœ” for DocumentReference.withConverter(null) 
@firebase/firestore:       âœ” for CollectionReference.withConverter()
@firebase/firestore:       âœ” for CollectionReference.withConverter(null)
@firebase/firestore:       âœ” for Query.withConverter()
@firebase/firestore:       âœ” for Query.withConverter(null)
@firebase/firestore:       âœ” requires the correct converter for Partial usage
@firebase/firestore:       âœ” WriteBatch.set() supports partials with merge
@firebase/firestore:       âœ” WriteBatch.set() supports partials with mergeFields
@firebase/firestore:       âœ” Transaction.set() supports partials with merge
@firebase/firestore:       âœ” Transaction.set() supports partials with mergeFields
@firebase/firestore:       âœ” DocumentReference.set() supports partials with merge
@firebase/firestore:       âœ” DocumentReference.set() supports partials with mergeFields
@firebase/firestore:       âœ” calls DocumentSnapshot.data() with specified SnapshotOptions
@firebase/firestore:       âœ” drops the converter when calling CollectionReference<T>.parent()
@firebase/firestore:       âœ” checks converter when comparing with isEqual()
@firebase/firestore:       âœ” Correct snapshot specified to fromFirestore() when registered with DocumentReference
@firebase/firestore:       âœ” Correct snapshot specified to fromFirestore() when registered with CollectionReference
@firebase/firestore:       âœ” Correct snapshot specified to fromFirestore() when registered with Query
@firebase/firestore:       âœ” DocumentReference.withConverter() default DbModelType
@firebase/firestore:       âœ” CollectionReference.withConverter() default DbModelType
@firebase/firestore:       âœ” Query.withConverter() default DbModelType
@firebase/firestore:     (Persistence=indexeddb) withConverter() support
@firebase/firestore:       âœ” for DocumentReference.withConverter()
@firebase/firestore:       âœ” for DocumentReference.withConverter(null) 
@firebase/firestore:       âœ” for CollectionReference.withConverter()
@firebase/firestore:       âœ” for CollectionReference.withConverter(null)
@firebase/firestore:       âœ” for Query.withConverter()
@firebase/firestore:       âœ” for Query.withConverter(null)
@firebase/firestore:       âœ” requires the correct converter for Partial usage
@firebase/firestore:       âœ” WriteBatch.set() supports partials with merge
@firebase/firestore:       âœ” WriteBatch.set() supports partials with mergeFields
@firebase/firestore:       âœ” Transaction.set() supports partials with merge
@firebase/firestore:       âœ” Transaction.set() supports partials with mergeFields
@firebase/firestore:       âœ” DocumentReference.set() supports partials with merge
@firebase/firestore:       âœ” DocumentReference.set() supports partials with mergeFields
@firebase/firestore:       âœ” calls DocumentSnapshot.data() with specified SnapshotOptions
@firebase/firestore:       âœ” drops the converter when calling CollectionReference<T>.parent()
@firebase/firestore:       âœ” checks converter when comparing with isEqual()
@firebase/firestore:       âœ” Correct snapshot specified to fromFirestore() when registered with DocumentReference
@firebase/firestore:       âœ” Correct snapshot specified to fromFirestore() when registered with CollectionReference
@firebase/firestore:       âœ” Correct snapshot specified to fromFirestore() when registered with Query
@firebase/firestore:       âœ” DocumentReference.withConverter() default DbModelType
@firebase/firestore:       âœ” CollectionReference.withConverter() default DbModelType
@firebase/firestore:       âœ” Query.withConverter() default DbModelType
@firebase/firestore:     sort documents by DocumentId
@firebase/firestore:       âœ” snapshot listener sorts query by DocumentId same way as get query
@firebase/firestore:       âœ” snapshot listener sorts filtered query by DocumentId same way as get query
@firebase/firestore:       offline
@firebase/firestore:         âœ” SDK orders query the same way online and offline
@firebase/firestore:     Sort unicode strings
@firebase/firestore:       âœ” snapshot listener sorts unicode strings the same as server
@firebase/firestore:       âœ” snapshot listener sorts unicode strings in array the same  as server
@firebase/firestore:       âœ” snapshot listener sorts unicode strings in map the same as server
@firebase/firestore:       âœ” snapshot listener sorts unicode strings in map key the same as server
@firebase/firestore:       âœ” snapshot listener sorts unicode strings in document key the same as server
@firebase/firestore:       âœ” snapshot listener sorts unicode strings in document key the same as server with persistence
@firebase/firestore:   (Persistence=indexeddb) Database
@firebase/firestore:     âœ” can set a document
@firebase/firestore:     âœ” doc() will auto generate an ID
@firebase/firestore:     âœ” can delete a document
@firebase/firestore:     âœ” can update existing document
@firebase/firestore:     âœ” can retrieve document that does not exist
@firebase/firestore:     âœ” can update an unknown document
@firebase/firestore:     âœ” can merge data with an existing document using set
@firebase/firestore:     âœ” can merge server timestamps
@firebase/firestore:     âœ” can merge empty object
@firebase/firestore:     âœ” update with empty object replaces all fields
@firebase/firestore:     âœ” merge with empty object replaces all fields
@firebase/firestore:     âœ” can delete field using merge
@firebase/firestore:     âœ” can delete field using mergeFields
@firebase/firestore:     âœ” can set server timestamps using mergeFields
@firebase/firestore:     âœ” can replace an array by merging using set
@firebase/firestore:     âœ” can't specify a field mask for a missing field using set
@firebase/firestore:     âœ” can set a subset of fields using a field mask
@firebase/firestore:     âœ” doesn't apply field delete outside of mask
@firebase/firestore:     âœ” doesn't apply field transform outside of mask
@firebase/firestore:     âœ” can set an empty field mask
@firebase/firestore:     âœ” can specify fields multiple times in a field mask
@firebase/firestore:     âœ” cannot update nonexistent document
@firebase/firestore:     âœ” can delete a field with an update
@firebase/firestore:     âœ” can update nested fields
@firebase/firestore:     âœ” can specify updated field multiple times
@firebase/firestore:     âœ” CollectionRef.add() resolves with resulting DocumentRef.
@firebase/firestore: ERROR: '[2025-03-04T23:08:22.070Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T23:08:22.070Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:     âœ” onSnapshotsInSync fires after listeners are in sync
@firebase/firestore: ERROR: '[2025-03-04T23:08:22.238Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T23:08:22.238Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:     âœ” DocumentSnapshot events for nonexistent document
@firebase/firestore: ERROR: '[2025-03-04T23:08:22.649Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T23:08:22.649Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:     âœ” DocumentSnapshot events for add data to document
@firebase/firestore: ERROR: '[2025-03-04T23:08:23.341Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T23:08:23.341Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:     âœ” DocumentSnapshot events for change data in document
@firebase/firestore: ERROR: '[2025-03-04T23:08:24.043Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T23:08:24.043Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:     âœ” DocumentSnapshot events for delete data in document
@firebase/firestore: ERROR: '[2025-03-04T23:08:24.313Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T23:08:24.313Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T23:08:24.313Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T23:08:24.313Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:     âœ” Listen can be called multiple times
@firebase/firestore:     âœ” Metadata only changes are not fired when no options provided
@firebase/firestore:     âœ” exposes "firestore" on document references.
@firebase/firestore:     âœ” exposes "firestore" on query references.
@firebase/firestore:     âœ” can compare DocumentReference instances with isEqual().
@firebase/firestore:     âœ” can compare Query instances with isEqual().
@firebase/firestore:     âœ” can compare multiple inequality Query instances with isEqual().
@firebase/firestore:     âœ” can traverse collections and documents.
@firebase/firestore:     âœ” can traverse collection and document parents.
@firebase/firestore:     âœ” can queue writes while offline
@firebase/firestore: WARN: '[2025-03-04T23:08:25.047Z]  @firebase/firestore:', 'Firestore (11.3.0): enableIndexedDbPersistence() will be deprecated in the future, you can use `FirestoreSettings.cache` instead.'
@firebase/firestore: WARN: '[2025-03-04T23:08:25.047Z]  @firebase/firestore:', 'Firestore (11.3.0): enableIndexedDbPersistence() will be deprecated in the future, you can use `FirestoreSettings.cache` instead.'
@firebase/firestore:     âœ” offline writes are sent after restart
@firebase/firestore:     âœ” rejects subsequent method calls after terminate() is called
@firebase/firestore:     âœ” can call terminate() multiple times
@firebase/firestore: WARN: '[2025-03-04T23:08:25.739Z]  @firebase/firestore:', 'Firestore (11.3.0): enableIndexedDbPersistence() will be deprecated in the future, you can use `FirestoreSettings.cache` instead.'
@firebase/firestore: WARN: '[2025-03-04T23:08:25.739Z]  @firebase/firestore:', 'Firestore (11.3.0): enableIndexedDbPersistence() will be deprecated in the future, you can use `FirestoreSettings.cache` instead.'
@firebase/firestore:     âœ” maintains persistence after restarting app
@firebase/firestore: WARN: '[2025-03-04T23:08:26.010Z]  @firebase/firestore:', 'Firestore (11.3.0): enableIndexedDbPersistence() will be deprecated in the future, you can use `FirestoreSettings.cache` instead.'
@firebase/firestore: WARN: '[2025-03-04T23:08:26.010Z]  @firebase/firestore:', 'Firestore (11.3.0): enableIndexedDbPersistence() will be deprecated in the future, you can use `FirestoreSettings.cache` instead.'
@firebase/firestore:     âœ” can clear persistence if the client has been terminated
@firebase/firestore: WARN: '[2025-03-04T23:08:26.297Z]  @firebase/firestore:', 'Firestore (11.3.0): enableIndexedDbPersistence() will be deprecated in the future, you can use `FirestoreSettings.cache` instead.'
@firebase/firestore: WARN: '[2025-03-04T23:08:26.297Z]  @firebase/firestore:', 'Firestore (11.3.0): enableIndexedDbPersistence() will be deprecated in the future, you can use `FirestoreSettings.cache` instead.'
@firebase/firestore:     âœ” can clear persistence if the client has not been initialized
@firebase/firestore:     âœ” cannot clear persistence if the client has been initialized
@firebase/firestore:     âœ” can get documents while offline
@firebase/firestore:     âœ” can enable and disable networking
@firebase/firestore:     âœ” can start a new instance after shut down
@firebase/firestore:     âœ” new operation after termination should throw
@firebase/firestore:     âœ” calling terminate multiple times should proceed
@firebase/firestore: ERROR: '[2025-03-04T23:08:27.616Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T23:08:27.616Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:     âœ” can unlisten queries after termination
@firebase/firestore:     âœ” can query after firestore restart
@firebase/firestore:     âœ” query listener throws error on termination
@firebase/firestore:     âœ” can wait for pending writes
@firebase/firestore:     âœ” waiting for pending writes resolves immediately when offline and no pending writes
@firebase/firestore:     âœ– can set and get data with auto detect long polling enabled (skipped)
@firebase/firestore:     âœ” can keep docs separate with multi-db when online
@firebase/firestore:     âœ” can keep docs separate with multi-db when offline
@firebase/firestore:     âœ” Cannot get document from cache with eager GC enabled.
@firebase/firestore:     âœ” Can get document from cache with Lru GC enabled.
@firebase/firestore:     âœ” Lru GC is enabled by default.
@firebase/firestore:     vector embeddings
@firebase/firestore:       âœ” can write and read vector embeddings
@firebase/firestore:       âœ” can listen to documents with vectors
@firebase/firestore:       âœ” SDK orders vector field same way as backend
@firebase/firestore:       From Cache
@firebase/firestore:         âœ” SDK orders vector field the same way online and offline
@firebase/firestore:     documents: 
@firebase/firestore:       âœ” set/update should reject: undefined
@firebase/firestore:       âœ” set/update should reject: null
@firebase/firestore:       âœ” set/update should reject: 0
@firebase/firestore:       âœ” set/update should reject: foo
@firebase/firestore:       âœ” set/update should reject: a
@firebase/firestore:       âœ” set/update should reject: Tue Mar 04 2025 15:05:26 GMT-0800 (Pacific Standard Time)
@firebase/firestore:     (Persistence=memory_lru_gc) Queries are validated client-side
@firebase/firestore:       âœ” same inequality fields works
@firebase/firestore:       âœ” inequality and equality on different fields works
@firebase/firestore:       âœ” inequality on multiple fields works
@firebase/firestore:       âœ” inequality with key fields works
@firebase/firestore:       âœ” inequality and array-contains on different fields works
@firebase/firestore:       âœ” inequality and array-contains-any on different fields works
@firebase/firestore:       âœ” multiple inequality and array-contains on different fields works
@firebase/firestore:       âœ” multiple inequality and array-contains-any on different fields works
@firebase/firestore:       âœ” inequality and IN on different fields works
@firebase/firestore:       âœ” multiple inequality and IN on different fields works
@firebase/firestore:       âœ” inequality and NOT IN on different fields works
@firebase/firestore:       âœ” multiple inequality and NOT IN on different fields works
@firebase/firestore:       âœ” inequality same as orderBy works.
@firebase/firestore:       âœ” != same as orderBy works.
@firebase/firestore:       âœ” equality different than orderBy works
@firebase/firestore:       âœ” inequality different than orderBy works.
@firebase/firestore:       âœ” multiple inequality different from orderBy works.
@firebase/firestore:       âœ” array-contains different than orderBy works
@firebase/firestore:       âœ” IN different than orderBy works
@firebase/firestore:       âœ” array-contains-any different than orderBy works
@firebase/firestore:     (Persistence=indexeddb) Queries are validated client-side
@firebase/firestore:       âœ” same inequality fields works
@firebase/firestore:       âœ” inequality and equality on different fields works
@firebase/firestore:       âœ” inequality on multiple fields works
@firebase/firestore:       âœ” inequality with key fields works
@firebase/firestore:       âœ” inequality and array-contains on different fields works
@firebase/firestore:       âœ” inequality and array-contains-any on different fields works
@firebase/firestore:       âœ” multiple inequality and array-contains on different fields works
@firebase/firestore:       âœ” multiple inequality and array-contains-any on different fields works
@firebase/firestore:       âœ” inequality and IN on different fields works
@firebase/firestore:       âœ” multiple inequality and IN on different fields works
@firebase/firestore:       âœ” inequality and NOT IN on different fields works
@firebase/firestore:       âœ” multiple inequality and NOT IN on different fields works
@firebase/firestore:       âœ” inequality same as orderBy works.
@firebase/firestore:       âœ” != same as orderBy works.
@firebase/firestore:       âœ” equality different than orderBy works
@firebase/firestore:       âœ” inequality different than orderBy works.
@firebase/firestore:       âœ” multiple inequality different from orderBy works.
@firebase/firestore:       âœ” array-contains different than orderBy works
@firebase/firestore:       âœ” IN different than orderBy works
@firebase/firestore:       âœ” array-contains-any different than orderBy works
@firebase/firestore:     Listens are rejected remotely:
@firebase/firestore:       âœ” will reject listens
@firebase/firestore:       âœ” will reject same listens twice in a row
@firebase/firestore:       âœ” will reject gets
@firebase/firestore:       âœ” will reject gets twice in a row
@firebase/firestore:     (Persistence=memory_lru_gc) withConverter() support
@firebase/firestore:       âœ” for DocumentReference.withConverter()
@firebase/firestore:       âœ” for DocumentReference.withConverter(null) 
@firebase/firestore:       âœ” for CollectionReference.withConverter()
@firebase/firestore:       âœ” for CollectionReference.withConverter(null)
@firebase/firestore:       âœ” for Query.withConverter()
@firebase/firestore:       âœ” for Query.withConverter(null)
@firebase/firestore:       âœ” requires the correct converter for Partial usage
@firebase/firestore:       âœ” WriteBatch.set() supports partials with merge
@firebase/firestore:       âœ” WriteBatch.set() supports partials with mergeFields
@firebase/firestore:       âœ” Transaction.set() supports partials with merge
@firebase/firestore:       âœ” Transaction.set() supports partials with mergeFields
@firebase/firestore:       âœ” DocumentReference.set() supports partials with merge
@firebase/firestore:       âœ” DocumentReference.set() supports partials with mergeFields
@firebase/firestore:       âœ” calls DocumentSnapshot.data() with specified SnapshotOptions
@firebase/firestore:       âœ” drops the converter when calling CollectionReference<T>.parent()
@firebase/firestore:       âœ” checks converter when comparing with isEqual()
@firebase/firestore:       âœ” Correct snapshot specified to fromFirestore() when registered with DocumentReference
@firebase/firestore:       âœ” Correct snapshot specified to fromFirestore() when registered with CollectionReference
@firebase/firestore:       âœ” Correct snapshot specified to fromFirestore() when registered with Query
@firebase/firestore:       âœ” DocumentReference.withConverter() default DbModelType
@firebase/firestore:       âœ” CollectionReference.withConverter() default DbModelType
@firebase/firestore:       âœ” Query.withConverter() default DbModelType
@firebase/firestore:     (Persistence=indexeddb) withConverter() support
@firebase/firestore:       âœ” for DocumentReference.withConverter()
@firebase/firestore:       âœ” for DocumentReference.withConverter(null) 
@firebase/firestore:       âœ” for CollectionReference.withConverter()
@firebase/firestore:       âœ” for CollectionReference.withConverter(null)
@firebase/firestore:       âœ” for Query.withConverter()
@firebase/firestore:       âœ” for Query.withConverter(null)
@firebase/firestore:       âœ” requires the correct converter for Partial usage
@firebase/firestore:       âœ” WriteBatch.set() supports partials with merge
@firebase/firestore:       âœ” WriteBatch.set() supports partials with mergeFields
@firebase/firestore:       âœ” Transaction.set() supports partials with merge
@firebase/firestore:       âœ” Transaction.set() supports partials with mergeFields
@firebase/firestore:       âœ” DocumentReference.set() supports partials with merge
@firebase/firestore:       âœ” DocumentReference.set() supports partials with mergeFields
@firebase/firestore:       âœ” calls DocumentSnapshot.data() with specified SnapshotOptions
@firebase/firestore:       âœ” drops the converter when calling CollectionReference<T>.parent()
@firebase/firestore:       âœ” checks converter when comparing with isEqual()
@firebase/firestore:       âœ” Correct snapshot specified to fromFirestore() when registered with DocumentReference
@firebase/firestore:       âœ” Correct snapshot specified to fromFirestore() when registered with CollectionReference
@firebase/firestore:       âœ” Correct snapshot specified to fromFirestore() when registered with Query
@firebase/firestore:       âœ” DocumentReference.withConverter() default DbModelType
@firebase/firestore:       âœ” CollectionReference.withConverter() default DbModelType
@firebase/firestore:       âœ” Query.withConverter() default DbModelType
@firebase/firestore:     sort documents by DocumentId
@firebase/firestore:       âœ” snapshot listener sorts query by DocumentId same way as get query
@firebase/firestore:       âœ” snapshot listener sorts filtered query by DocumentId same way as get query
@firebase/firestore:       offline
@firebase/firestore:         âœ” SDK orders query the same way online and offline
@firebase/firestore:     Sort unicode strings
@firebase/firestore:       âœ” snapshot listener sorts unicode strings the same as server
@firebase/firestore:       âœ” snapshot listener sorts unicode strings in array the same  as server
@firebase/firestore:       âœ” snapshot listener sorts unicode strings in map the same as server
@firebase/firestore:       âœ” snapshot listener sorts unicode strings in map key the same as server
@firebase/firestore:       âœ” snapshot listener sorts unicode strings in document key the same as server
@firebase/firestore:       âœ– snapshot listener sorts unicode strings in document key the same as server with persistence (skipped)
@firebase/firestore:   (Persistence=memory_lru_gc) Nested Fields
@firebase/firestore:     âœ” can be written with set()
@firebase/firestore:     âœ” can be read directly with .get(<string>)
@firebase/firestore:     âœ” can be read directly with .get(<FieldPath>)
@firebase/firestore:     âœ” can be updated with update(<string>)
@firebase/firestore:     âœ” can be updated with update(<FieldPath>)
@firebase/firestore:     âœ” can be used with query.where(<string>).
@firebase/firestore:     âœ” can be used with query.where(<FieldPath>).
@firebase/firestore:     âœ” can be used with query.orderBy(<string>).
@firebase/firestore:     âœ” can be used with query.orderBy(<FieldPath>).
@firebase/firestore:   (Persistence=indexeddb) Nested Fields
@firebase/firestore:     âœ” can be written with set()
@firebase/firestore:     âœ” can be read directly with .get(<string>)
@firebase/firestore:     âœ” can be read directly with .get(<FieldPath>)
@firebase/firestore:     âœ” can be updated with update(<string>)
@firebase/firestore:     âœ” can be updated with update(<FieldPath>)
@firebase/firestore:     âœ” can be used with query.where(<string>).
@firebase/firestore:     âœ” can be used with query.where(<FieldPath>).
@firebase/firestore:     âœ” can be used with query.orderBy(<string>).
@firebase/firestore:     âœ” can be used with query.orderBy(<FieldPath>).
@firebase/firestore:   (Persistence=memory_lru_gc) Fields with special characters
@firebase/firestore:     âœ” can be written with set()
@firebase/firestore:     âœ” can be read directly with .data(<field>)
@firebase/firestore:     âœ” can be updated with update()
@firebase/firestore:     âœ” can be used in query filters.
@firebase/firestore:     âœ” can be used in a query orderBy.
@firebase/firestore:   (Persistence=indexeddb) Fields with special characters
@firebase/firestore:     âœ” can be written with set()
@firebase/firestore:     âœ” can be read directly with .data(<field>)
@firebase/firestore:     âœ” can be updated with update()
@firebase/firestore:     âœ” can be used in query filters.
@firebase/firestore:     âœ” can be used in a query orderBy.
@firebase/firestore:   (Persistence=memory_lru_gc) Timestamp Fields in snapshots
@firebase/firestore:     âœ” are returned as Timestamps
@firebase/firestore:   (Persistence=indexeddb) Timestamp Fields in snapshots
@firebase/firestore:     âœ” are returned as Timestamps
@firebase/firestore:   (Persistence=memory_lru_gc) `undefined` properties
@firebase/firestore:     âœ” are ignored in set()
@firebase/firestore:     âœ” are ignored in set({ merge: true })
@firebase/firestore:     âœ” are ignored in update()
@firebase/firestore:     âœ” are ignored in Query.where()
@firebase/firestore:     âœ” are ignored in Query.startAt()
@firebase/firestore:   (Persistence=indexeddb) `undefined` properties
@firebase/firestore:     âœ” are ignored in set()
@firebase/firestore:     âœ” are ignored in set({ merge: true })
@firebase/firestore:     âœ” are ignored in update()
@firebase/firestore:     âœ” are ignored in Query.where()
@firebase/firestore:     âœ” are ignored in Query.startAt()
@firebase/firestore:   (Persistence=memory_lru_gc) GetOptions
@firebase/firestore:     âœ” get document while online with default get options
@firebase/firestore:     âœ” get collection while online with default get options
@firebase/firestore:     âœ” get document while offline with default get options
@firebase/firestore: ERROR: '[2025-03-04T23:09:14.446Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T23:09:14.446Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:     âœ” get collection while offline with default get options
@firebase/firestore: ERROR: '[2025-03-04T23:09:14.814Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T23:09:14.814Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:     âœ” get document while online with source=cache
@firebase/firestore: ERROR: '[2025-03-04T23:09:15.218Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T23:09:15.218Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:     âœ” get collection while online with source=cache
@firebase/firestore: ERROR: '[2025-03-04T23:09:15.604Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T23:09:15.604Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:     âœ” get document while offline with source=cache
@firebase/firestore: ERROR: '[2025-03-04T23:09:16.026Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T23:09:16.026Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:     âœ” get collection while offline with source=cache
@firebase/firestore:     âœ” get document while online with source=server
@firebase/firestore:     âœ” get collection while online with source=server
@firebase/firestore:     âœ” get document while offline with source=server
@firebase/firestore:     âœ” get collection while offline with source=server
@firebase/firestore: ERROR: '[2025-03-04T23:09:18.076Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T23:09:18.076Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:     âœ” get document while offline with different get options
@firebase/firestore: ERROR: '[2025-03-04T23:09:18.502Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T23:09:18.502Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:     âœ” get collection while offline with different get options
@firebase/firestore:     âœ” get nonexistent doc while online with default get options
@firebase/firestore:     âœ” get nonexistent collection while online with default get options
@firebase/firestore:     âœ” get nonexistent doc while offline with default get options
@firebase/firestore:     âœ– get deleted doc while offline with default get options (skipped)
@firebase/firestore:     âœ” get nonexistent collection while offline with default get options
@firebase/firestore:     âœ” get nonexistent doc while online with source=cache
@firebase/firestore:     âœ” get nonexistent collection while online with source=cache
@firebase/firestore:     âœ” get nonexistent doc while offline with source=cache
@firebase/firestore:     âœ” get deleted doc while offline with source=cache
@firebase/firestore:     âœ” get nonexistent collection while offline with source=cache
@firebase/firestore:     âœ” get nonexistent doc while online with source=server
@firebase/firestore:     âœ” get nonexistent collection while online with source=server
@firebase/firestore:     âœ” get nonexistent doc while offline with source=server
@firebase/firestore:     âœ” get nonexistent collection while offline with source=server
@firebase/firestore:   (Persistence=indexeddb) GetOptions
@firebase/firestore:     âœ” get document while online with default get options
@firebase/firestore:     âœ” get collection while online with default get options
@firebase/firestore:     âœ” get document while offline with default get options
@firebase/firestore: ERROR: '[2025-03-04T23:09:21.103Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T23:09:21.103Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:     âœ” get collection while offline with default get options
@firebase/firestore: ERROR: '[2025-03-04T23:09:21.520Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T23:09:21.520Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:     âœ” get document while online with source=cache
@firebase/firestore: ERROR: '[2025-03-04T23:09:21.931Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T23:09:21.931Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:     âœ” get collection while online with source=cache
@firebase/firestore: ERROR: '[2025-03-04T23:09:22.346Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T23:09:22.346Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:     âœ” get document while offline with source=cache
@firebase/firestore: ERROR: '[2025-03-04T23:09:22.773Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T23:09:22.773Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:     âœ” get collection while offline with source=cache
@firebase/firestore:     âœ” get document while online with source=server
@firebase/firestore:     âœ” get collection while online with source=server
@firebase/firestore:     âœ” get document while offline with source=server
@firebase/firestore:     âœ” get collection while offline with source=server
@firebase/firestore: ERROR: '[2025-03-04T23:09:24.913Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T23:09:24.913Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:     âœ” get document while offline with different get options
@firebase/firestore: ERROR: '[2025-03-04T23:09:25.334Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T23:09:25.334Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:     âœ” get collection while offline with different get options
@firebase/firestore:     âœ” get nonexistent doc while online with default get options
@firebase/firestore:     âœ” get nonexistent collection while online with default get options
@firebase/firestore:     âœ” get nonexistent doc while offline with default get options
@firebase/firestore:     âœ– get deleted doc while offline with default get options (skipped)
@firebase/firestore:     âœ” get nonexistent collection while offline with default get options
@firebase/firestore:     âœ” get nonexistent doc while online with source=cache
@firebase/firestore:     âœ” get nonexistent collection while online with source=cache
@firebase/firestore:     âœ” get nonexistent doc while offline with source=cache
@firebase/firestore:     âœ” get deleted doc while offline with source=cache
@firebase/firestore:     âœ” get nonexistent collection while offline with source=cache
@firebase/firestore:     âœ” get nonexistent doc while online with source=server
@firebase/firestore:     âœ” get nonexistent collection while online with source=server
@firebase/firestore:     âœ” get nonexistent doc while offline with source=server
@firebase/firestore:     âœ” get nonexistent collection while offline with source=server
@firebase/firestore: WARN: '[2025-03-04T23:09:26.245Z]  @firebase/firestore:', 'Firestore (11.3.0): Cannot enable indexes when persistence is disabled'
@firebase/firestore: WARN: '[2025-03-04T23:09:26.245Z]  @firebase/firestore:', 'Firestore (11.3.0): Cannot enable indexes when persistence is disabled'
@firebase/firestore:   (Persistence=memory_lru_gc) Index Configuration:
@firebase/firestore:     âœ” supports JSON
@firebase/firestore: WARN: '[2025-03-04T23:09:26.245Z]  @firebase/firestore:', 'Firestore (11.3.0): Cannot enable indexes when persistence is disabled'
@firebase/firestore: WARN: '[2025-03-04T23:09:26.245Z]  @firebase/firestore:', 'Firestore (11.3.0): Cannot enable indexes when persistence is disabled'
@firebase/firestore:     âœ” supports schema
@firebase/firestore: WARN: '[2025-03-04T23:09:26.250Z]  @firebase/firestore:', 'Firestore (11.3.0): Cannot enable indexes when persistence is disabled'
@firebase/firestore: WARN: '[2025-03-04T23:09:26.250Z]  @firebase/firestore:', 'Firestore (11.3.0): Cannot enable indexes when persistence is disabled'
@firebase/firestore:     âœ” bad JSON does not crash client
@firebase/firestore: WARN: '[2025-03-04T23:09:26.260Z]  @firebase/firestore:', 'Firestore (11.3.0): Cannot enable indexes when persistence is disabled'
@firebase/firestore: WARN: '[2025-03-04T23:09:26.260Z]  @firebase/firestore:', 'Firestore (11.3.0): Cannot enable indexes when persistence is disabled'
@firebase/firestore:     âœ” bad index does not crash client
@firebase/firestore:   (Persistence=indexeddb) Index Configuration:
@firebase/firestore:     âœ” supports JSON
@firebase/firestore:     âœ” supports schema
@firebase/firestore:     âœ” bad JSON does not crash client
@firebase/firestore:     âœ” bad index does not crash client
@firebase/firestore:   (Persistence=memory_lru_gc) Numeric Transforms:
@firebase/firestore:     âœ” create document with increment
@firebase/firestore:     âœ” merge on non-existing document with increment
@firebase/firestore:     âœ– increment existing integer with integer (skipped)
@firebase/firestore:     âœ” increment existing double with double
@firebase/firestore:     âœ” increment existing double with integer
@firebase/firestore:     âœ” increment existing integer with double
@firebase/firestore:     âœ” increment existing string with integer
@firebase/firestore:     âœ” increment existing string with double
@firebase/firestore:     âœ” increments with set() and merge:true
@firebase/firestore:     âœ– multiple double increments (skipped)
@firebase/firestore:     âœ” increment twice in a batch
@firebase/firestore:     âœ” increment, delete and increment in a batch
@firebase/firestore:     âœ” increment on top of ServerTimestamp
@firebase/firestore:   (Persistence=indexeddb) Numeric Transforms:
@firebase/firestore:     âœ” create document with increment
@firebase/firestore:     âœ” merge on non-existing document with increment
@firebase/firestore:     âœ– increment existing integer with integer (skipped)
@firebase/firestore:     âœ” increment existing double with double
@firebase/firestore:     âœ” increment existing double with integer
@firebase/firestore:     âœ” increment existing integer with double
@firebase/firestore:     âœ” increment existing string with integer
@firebase/firestore:     âœ” increment existing string with double
@firebase/firestore:     âœ” increments with set() and merge:true
@firebase/firestore:     âœ– multiple double increments (skipped)
@firebase/firestore:     âœ” increment twice in a batch
@firebase/firestore:     âœ” increment, delete and increment in a batch
@firebase/firestore:     âœ” increment on top of ServerTimestamp
@firebase/firestore:   (Persistence=memory_lru_gc) PersistentCacheIndexManager
@firebase/firestore:     getPersistentCacheIndexManager()
@firebase/firestore:       âœ” should return non-null if, and only if, IndexedDB persistence is enabled
@firebase/firestore:       âœ” should always return the same object
@firebase/firestore:       âœ” should fail if invoked after terminate()
@firebase/firestore:   (Persistence=indexeddb) PersistentCacheIndexManager
@firebase/firestore:     âœ” getPersistentCacheIndexManager() should return distinct instances for distinct Firestore objects
@firebase/firestore:     getPersistentCacheIndexManager()
@firebase/firestore:       âœ” should return non-null if, and only if, IndexedDB persistence is enabled
@firebase/firestore:       âœ” should always return the same object
@firebase/firestore:       âœ” should fail if invoked after terminate()
@firebase/firestore:     enable/disable persistent index auto creation
@firebase/firestore:       âœ” enable on new instance should succeed
@firebase/firestore:       âœ” disable on new instance should succeed
@firebase/firestore:       âœ” enable when already enabled should succeed
@firebase/firestore:       âœ” disable when already disabled should succeed
@firebase/firestore:       âœ” enabling after terminate() should throw
@firebase/firestore:       âœ” disabling after terminate() should throw
@firebase/firestore:       âœ” query returns correct results when index is auto-created
@firebase/firestore:     delete all persistent cache indexes
@firebase/firestore:       âœ” deleteAllPersistentCacheIndexes() on new instance should succeed
@firebase/firestore:       âœ” deleteAllPersistentCacheIndexes() should be successful when auto-indexing is enabled
@firebase/firestore:       âœ” deleteAllPersistentCacheIndexes() should be successful when auto-indexing is disabled
@firebase/firestore:       âœ” deleteAllPersistentCacheIndexes() after terminate() should throw
@firebase/firestore:       âœ” query returns correct results when auto-created index has been deleted
@firebase/firestore:   Firestore Provider
@firebase/firestore:     âœ” can provide setting
@firebase/firestore:     âœ” returns same default instance from named app
@firebase/firestore:     âœ” returns different instance from named app
@firebase/firestore:     âœ” returns same default instance from default app
@firebase/firestore:     âœ” returns different instance from different named app
@firebase/firestore:     âœ” can call initializeFirestore() twice if settings are same
@firebase/firestore: WARN: '[2025-03-04T23:09:39.198Z]  @firebase/firestore:', 'Firestore (11.3.0): enableIndexedDbPersistence() will be deprecated in the future, you can use `FirestoreSettings.cache` instead.'
@firebase/firestore: WARN: '[2025-03-04T23:09:39.198Z]  @firebase/firestore:', 'Firestore (11.3.0): enableIndexedDbPersistence() will be deprecated in the future, you can use `FirestoreSettings.cache` instead.'
@firebase/firestore:     âœ” can still use enableIndexedDbPersistence()
@firebase/firestore: WARN: '[2025-03-04T23:09:39.207Z]  @firebase/firestore:', 'Firestore (11.3.0): enableIndexedDbPersistence() will be deprecated in the future, you can use `FirestoreSettings.cache` instead.'
@firebase/firestore: WARN: '[2025-03-04T23:09:39.207Z]  @firebase/firestore:', 'Firestore (11.3.0): enableIndexedDbPersistence() will be deprecated in the future, you can use `FirestoreSettings.cache` instead.'
@firebase/firestore:     âœ” cannot mix enableIndexedDbPersistence() and settings.cache
@firebase/firestore:     âœ” cannot use once terminated
@firebase/firestore:     âœ” can call terminate() multiple times
@firebase/firestore: WARN: '[2025-03-04T23:09:39.289Z]  @firebase/firestore:', 'Firestore (11.3.0): WebChannelConnection', 'RPC 'Write' stream 0x64578f98 transport errored:', jd{type: 'c', target: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, g: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, defaultPrevented: false, status: 1}
@firebase/firestore: WARN: '[2025-03-04T23:09:39.289Z]  @firebase/firestore:', 'Firestore (11.3.0): WebChannelConnection', 'RPC 'Write' stream 0x64578f98 transport errored:', jd{type: 'c', target: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, g: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, defaultPrevented: false, status: 1}
@firebase/firestore: WARN: '[2025-03-04T23:09:39.374Z]  @firebase/firestore:', 'Firestore (11.3.0): WebChannelConnection', 'RPC 'Write' stream 0x64578f9a transport errored:', jd{type: 'c', target: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, g: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, defaultPrevented: false, status: 1}
@firebase/firestore: WARN: '[2025-03-04T23:09:39.374Z]  @firebase/firestore:', 'Firestore (11.3.0): WebChannelConnection', 'RPC 'Write' stream 0x64578f9a transport errored:', jd{type: 'c', target: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, g: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, defaultPrevented: false, status: 1}
@firebase/firestore:   (Persistence=memory_lru_gc) Queries
@firebase/firestore:     âœ” can issue limit queries
@firebase/firestore:     âœ” cannot issue limitToLast queries without explicit order-by
@firebase/firestore:     âœ” can issue limit queries using descending sort order
@firebase/firestore:     âœ” can issue limitToLast queries using descending sort order
@firebase/firestore: WARN: '[2025-03-04T23:09:40.739Z]  @firebase/firestore:', 'Firestore (11.3.0): WebChannelConnection', 'RPC 'Write' stream 0x64578fa1 transport errored:', jd{type: 'c', target: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, g: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, defaultPrevented: false, status: 1}
@firebase/firestore: WARN: '[2025-03-04T23:09:40.739Z]  @firebase/firestore:', 'Firestore (11.3.0): WebChannelConnection', 'RPC 'Write' stream 0x64578fa1 transport errored:', jd{type: 'c', target: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, g: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, defaultPrevented: false, status: 1}
@firebase/firestore: ERROR: '[2025-03-04T23:09:41.125Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T23:09:41.125Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:     âœ” can listen to limitToLast queries
@firebase/firestore: ERROR: '[2025-03-04T23:09:41.912Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T23:09:41.912Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T23:09:41.912Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T23:09:41.912Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:     âœ” can listen/unlisten/relisten to mirror queries
@firebase/firestore: WARN: '[2025-03-04T23:09:42.079Z]  @firebase/firestore:', 'Firestore (11.3.0): WebChannelConnection', 'RPC 'Write' stream 0x64578fa8 transport errored:', jd{type: 'c', target: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, g: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, defaultPrevented: false, status: 1}
@firebase/firestore: WARN: '[2025-03-04T23:09:42.079Z]  @firebase/firestore:', 'Firestore (11.3.0): WebChannelConnection', 'RPC 'Write' stream 0x64578fa8 transport errored:', jd{type: 'c', target: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, g: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, defaultPrevented: false, status: 1}
@firebase/firestore:     âœ” can issue limitToLast queries with cursors
@firebase/firestore:     âœ” key order is descending for descending inequality
@firebase/firestore:     âœ” can use unary filters
@firebase/firestore: WARN: '[2025-03-04T23:09:44.096Z]  @firebase/firestore:', 'Firestore (11.3.0): WebChannelConnection', 'RPC 'Write' stream 0x64578faf transport errored:', jd{type: 'c', target: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, g: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, defaultPrevented: false, status: 1}
@firebase/firestore: WARN: '[2025-03-04T23:09:44.096Z]  @firebase/firestore:', 'Firestore (11.3.0): WebChannelConnection', 'RPC 'Write' stream 0x64578faf transport errored:', jd{type: 'c', target: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, g: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, defaultPrevented: false, status: 1}
@firebase/firestore:     âœ” can filter on infinity
@firebase/firestore:     âœ” will not get metadata only updates
@firebase/firestore:     âœ” maintains correct DocumentChange indexes
@firebase/firestore:     âœ– can listen for the same query with different options (skipped)
@firebase/firestore:     âœ” can issue queries with Dates differing in milliseconds
@firebase/firestore: WARN: '[2025-03-04T23:09:46.671Z]  @firebase/firestore:', 'Firestore (11.3.0): WebChannelConnection', 'RPC 'Write' stream 0x64578fbb transport errored:', jd{type: 'c', target: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, g: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, defaultPrevented: false, status: 1}
@firebase/firestore: WARN: '[2025-03-04T23:09:46.671Z]  @firebase/firestore:', 'Firestore (11.3.0): WebChannelConnection', 'RPC 'Write' stream 0x64578fbb transport errored:', jd{type: 'c', target: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, g: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, defaultPrevented: false, status: 1}
@firebase/firestore:     âœ” can listen for QueryMetadata changes
@firebase/firestore:     âœ” can listen for metadata changes
@firebase/firestore:     âœ” can catch error message for missing index with error handler
@firebase/firestore:     âœ” can explicitly sort by document ID
@firebase/firestore:     âœ” can query by document ID
@firebase/firestore:     âœ” can query by document ID using refs
@firebase/firestore:     âœ” can query while reconnecting to network
@firebase/firestore:     âœ” trigger with isFromCache=true when offline
@firebase/firestore:     âœ” can use != filters
@firebase/firestore:     âœ” can use != filters by document ID
@firebase/firestore: WARN: '[2025-03-04T23:09:51.800Z]  @firebase/firestore:', 'Firestore (11.3.0): WebChannelConnection', 'RPC 'Write' stream 0x64578fd2 transport errored:', jd{type: 'c', target: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, g: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, defaultPrevented: false, status: 1}
@firebase/firestore: WARN: '[2025-03-04T23:09:51.800Z]  @firebase/firestore:', 'Firestore (11.3.0): WebChannelConnection', 'RPC 'Write' stream 0x64578fd2 transport errored:', jd{type: 'c', target: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, g: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, defaultPrevented: false, status: 1}
@firebase/firestore:     âœ” can use array-contains filters
@firebase/firestore:     âœ” can use IN filters
@firebase/firestore:     âœ” can use IN filters by document ID
@firebase/firestore:     âœ” can use NOT_IN filters
@firebase/firestore:     âœ” can use NOT_IN filters by document ID
@firebase/firestore:     âœ” can use array-contains-any filters
@firebase/firestore:     âœ” can query collection groups
@firebase/firestore:     âœ” can query collection groups with startAt / endAt by arbitrary documentId
@firebase/firestore:     âœ” can query collection groups with where filters on arbitrary documentId
@firebase/firestore:     âœ” can query custom types
@firebase/firestore:     âœ” can use filter with nested field
@firebase/firestore: WARN: '[2025-03-04T23:10:00.320Z]  @firebase/firestore:', 'Firestore (11.3.0): WebChannelConnection', 'RPC 'Write' stream 0x64578fea transport errored:', jd{type: 'c', target: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, g: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, defaultPrevented: false, status: 1}
@firebase/firestore: WARN: '[2025-03-04T23:10:00.320Z]  @firebase/firestore:', 'Firestore (11.3.0): WebChannelConnection', 'RPC 'Write' stream 0x64578fea transport errored:', jd{type: 'c', target: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, g: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, defaultPrevented: false, status: 1}
@firebase/firestore: WARN: '[2025-03-04T23:10:07.467Z]  @firebase/firestore:', 'Firestore (11.3.0): WebChannelConnection', 'RPC 'Write' stream 0x64578feb transport errored:', jd{type: 'c', target: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, g: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, defaultPrevented: false, status: 1}
@firebase/firestore: WARN: '[2025-03-04T23:10:07.467Z]  @firebase/firestore:', 'Firestore (11.3.0): WebChannelConnection', 'RPC 'Write' stream 0x64578feb transport errored:', jd{type: 'c', target: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, g: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, defaultPrevented: false, status: 1}
@firebase/firestore:     âœ” resuming a query should use bloom filter to avoid full requery
@firebase/firestore:     âœ” bloom filter should avert a full re-query when documents were added, deleted, removed, updated, and unchanged since the resume token
@firebase/firestore: WARN: '[2025-03-04T23:10:31.676Z]  @firebase/firestore:', 'Firestore (11.3.0): WebChannelConnection', 'RPC 'Write' stream 0x64578ff2 transport errored:', jd{type: 'c', target: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, g: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, defaultPrevented: false, status: 1}
@firebase/firestore: WARN: '[2025-03-04T23:10:31.676Z]  @firebase/firestore:', 'Firestore (11.3.0): WebChannelConnection', 'RPC 'Write' stream 0x64578ff2 transport errored:', jd{type: 'c', target: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, g: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, defaultPrevented: false, status: 1}
@firebase/firestore:     âœ” bloom filter should correctly encode complex Unicode characters
@firebase/firestore:     âœ” can query large documents with multi-byte character strings
@firebase/firestore:     OR Queries
@firebase/firestore:       âœ” can use query overloads
@firebase/firestore:       âœ” can use or queries
@firebase/firestore:       âœ” can use or queries with in
@firebase/firestore:       âœ” can use or queries with array membership
@firebase/firestore:       âœ” supports using in with array contains any
@firebase/firestore:       âœ” supports using in with array contains
@firebase/firestore:       âœ” supports order by equality
@firebase/firestore:       âœ” supports multiple in ops
@firebase/firestore: ERROR: '[2025-03-04T23:10:41.080Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T23:10:41.080Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:     Caching empty results
@firebase/firestore:       âœ” can raise initial snapshot from cache, even if it is empty
@firebase/firestore: ERROR: '[2025-03-04T23:10:41.500Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T23:10:41.500Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:       âœ” can raise initial snapshot from cache, even if it has become empty
@firebase/firestore:   (Persistence=indexeddb) Queries
@firebase/firestore:     âœ” can issue limit queries
@firebase/firestore:     âœ” cannot issue limitToLast queries without explicit order-by
@firebase/firestore:     âœ” can issue limit queries using descending sort order
@firebase/firestore:     âœ” can issue limitToLast queries using descending sort order
@firebase/firestore: ERROR: '[2025-03-04T23:10:43.609Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T23:10:43.609Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:     âœ” can listen to limitToLast queries
@firebase/firestore: ERROR: '[2025-03-04T23:10:44.502Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T23:10:44.502Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T23:10:44.502Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T23:10:44.502Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:     âœ” can listen/unlisten/relisten to mirror queries
@firebase/firestore:     âœ” can issue limitToLast queries with cursors
@firebase/firestore:     âœ” key order is descending for descending inequality
@firebase/firestore:     âœ” can use unary filters
@firebase/firestore:     âœ” can filter on infinity
@firebase/firestore:     âœ” will not get metadata only updates
@firebase/firestore:     âœ” maintains correct DocumentChange indexes
@firebase/firestore:     âœ– can listen for the same query with different options (skipped)
@firebase/firestore:     âœ” can issue queries with Dates differing in milliseconds
@firebase/firestore:     âœ” can listen for QueryMetadata changes
@firebase/firestore:     âœ” can listen for metadata changes
@firebase/firestore:     âœ” can catch error message for missing index with error handler
@firebase/firestore:     âœ” can explicitly sort by document ID
@firebase/firestore:     âœ” can query by document ID
@firebase/firestore:     âœ” can query by document ID using refs
@firebase/firestore:     âœ” can query while reconnecting to network
@firebase/firestore:     âœ” trigger with isFromCache=true when offline
@firebase/firestore:     âœ” can use != filters
@firebase/firestore:     âœ” can use != filters by document ID
@firebase/firestore:     âœ” can use array-contains filters
@firebase/firestore:     âœ” can use IN filters
@firebase/firestore:     âœ” can use IN filters by document ID
@firebase/firestore:     âœ” can use NOT_IN filters
@firebase/firestore:     âœ” can use NOT_IN filters by document ID
@firebase/firestore:     âœ” can use array-contains-any filters
@firebase/firestore: WARN: '[2025-03-04T23:11:00.279Z]  @firebase/firestore:', 'Firestore (11.3.0): WebChannelConnection', 'RPC 'Write' stream 0x64579048 transport errored:', jd{type: 'c', target: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, g: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, defaultPrevented: false, status: 1}
@firebase/firestore: WARN: '[2025-03-04T23:11:00.279Z]  @firebase/firestore:', 'Firestore (11.3.0): WebChannelConnection', 'RPC 'Write' stream 0x64579048 transport errored:', jd{type: 'c', target: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, g: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, defaultPrevented: false, status: 1}
@firebase/firestore:     âœ” can query collection groups
@firebase/firestore:     âœ” can query collection groups with startAt / endAt by arbitrary documentId
@firebase/firestore:     âœ” can query collection groups with where filters on arbitrary documentId
@firebase/firestore:     âœ” can query custom types
@firebase/firestore:     âœ” can use filter with nested field
@firebase/firestore:     âœ” resuming a query should use bloom filter to avoid full requery
@firebase/firestore:     âœ” bloom filter should avert a full re-query when documents were added, deleted, removed, updated, and unchanged since the resume token
@firebase/firestore:     âœ” bloom filter should correctly encode complex Unicode characters
@firebase/firestore:     âœ” can query large documents with multi-byte character strings
@firebase/firestore:     OR Queries
@firebase/firestore:       âœ” can use query overloads
@firebase/firestore:       âœ” can use or queries
@firebase/firestore:       âœ” can use or queries with in
@firebase/firestore:       âœ” can use or queries with array membership
@firebase/firestore:       âœ” supports using in with array contains any
@firebase/firestore:       âœ” supports using in with array contains
@firebase/firestore:       âœ” supports order by equality
@firebase/firestore:       âœ” supports multiple in ops
@firebase/firestore: ERROR: '[2025-03-04T23:11:45.698Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T23:11:45.698Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:     Caching empty results
@firebase/firestore:       âœ” can raise initial snapshot from cache, even if it is empty
@firebase/firestore: ERROR: '[2025-03-04T23:11:46.169Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore: ERROR: '[2025-03-04T23:11:46.169Z]  @firebase/firestore:', 'Firestore (11.3.0): Uncaught Error in snapshot listener:', 'FirebaseError: [code=aborted]: Firestore shutting down'
@firebase/firestore:       âœ” can raise initial snapshot from cache, even if it has become empty
@firebase/firestore: WARN: '[2025-03-04T23:11:47.127Z]  @firebase/firestore:', 'Firestore (11.3.0): WebChannelConnection', 'RPC 'Write' stream 0x64579072 transport errored:', jd{type: 'c', target: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, g: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, defaultPrevented: false, status: 1}
@firebase/firestore: WARN: '[2025-03-04T23:11:47.127Z]  @firebase/firestore:', 'Firestore (11.3.0): WebChannelConnection', 'RPC 'Write' stream 0x64579072 transport errored:', jd{type: 'c', target: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, g: Y{s: false, C: undefined, i: Ka{src: ..., g: ..., h: ...}, M: Y{s: ..., C: ..., i: ..., M: ..., F: ..., g: ..., l: ..., h: ..., v: ..., u: ..., j: ...}, F: null, g: Yc{Aa: ..., i: ..., j: ..., o: ..., S: ..., m: ..., H: ..., D: ..., ya: ..., g: ..., W: ..., I: ..., qa: ..., ia: ..., U: ..., Ya: ..., Va: ..., l: ..., s: ..., u: ..., C: ..., F: ..., X: ..., T: ..., za: ..., B: ..., v: ..., Y: ..., Ta: ..., cb: ..., Wa: ..., wa: ..., pa: ..., Xa: ..., Ca: ..., L: ..., J: ..., K: ..., h: ..., Da: ..., P: ..., O: ..., Ua: ..., ba: ..., ja: ..., ca: ..., R: ..., M: ..., A: ..., ka: ..., G: ..., la: ...}, l: 'https://firestore.googleapis.com/google.firestore.v1.Firestore/Write/channel', h: Object{database: ...}, v: true, u: true, j: Z{g: ...}}, defaultPrevented: false, status: 1}
@firebase/firestore:   (Persistence=memory_lru_gc) Hanging query issue - #7652
@firebase/firestore:     âœ” iteration 0
@firebase/firestore:     âœ” iteration 1
@firebase/firestore:     âœ” iteration 2
@firebase/firestore:     âœ” iteration 3
@firebase/firestore:     âœ” iteration 4
@firebase/firestore:     âœ” iteration 5
@firebase/firestore:     âœ” iteration 6
@firebase/firestore:     âœ” iteration 7
@firebase/firestore:     âœ” iteration 8
@firebase/firestore:     âœ” iteration 9
@firebase/firestore:     âœ” iteration 10
@firebase/firestore:     âœ” iteration 11
@firebase/firestore:     âœ” iteration 12
@firebase/firestore:     âœ” iteration 13
@firebase/firestore:     âœ” iteration 14
@firebase/firestore:     âœ” iteration 15
@firebase/firestore:     âœ” iteration 16
@firebase/firestore:     âœ” iteration 17
@firebase/firestore:     âœ” iteration 18
@firebase/firestore:     âœ” iteration 19
@firebase/firestore:   (Persistence=indexeddb) Hanging query issue - #7652
@firebase/firestore:     âœ” iteration 0
@firebase/firestore:     âœ” iteration 1
@firebase/firestore:     âœ” iteration 2
@firebase/firestore:     âœ” iteration 3
@firebase/firestore:     âœ” iteration 4
@firebase/firestore:     âœ” iteration 5
@firebase/firestore:     âœ” iteration 6
@firebase/firestore:     âœ” iteration 7
@firebase/firestore:     âœ” iteration 8
@firebase/firestore:     âœ” iteration 9
@firebase/firestore:     âœ” iteration 10
@firebase/firestore:     âœ” iteration 11
@firebase/firestore:     âœ” iteration 12
@firebase/firestore:     âœ” iteration 13
@firebase/firestore:     âœ” iteration 14
@firebase/firestore:     âœ” iteration 15
@firebase/firestore:     âœ” iteration 16
@firebase/firestore:     âœ” iteration 17
@firebase/firestore:     âœ” iteration 18
@firebase/firestore:     âœ” iteration 19
@firebase/firestore:   (Persistence=memory_lru_gc) Server Timestamps
@firebase/firestore:     âœ” work via set()
@firebase/firestore:     âœ” work via update()
@firebase/firestore:     âœ” work via transaction set()
@firebase/firestore:     âœ” work via transaction update()
@firebase/firestore:     âœ” can return estimated value
@firebase/firestore:     âœ” can return previous value of different type
@firebase/firestore:     âœ” can return previous value through consecutive updates
@firebase/firestore:     âœ” uses previous value from local mutation
@firebase/firestore:     âœ” fail via update() on nonexistent document.
@firebase/firestore: WARN: '[2025-03-04T23:12:05.828Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x645790b6 failed with error: ', '{"code":"not-found","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/test-db/documents:commit', 'request:', '{"writes":[{"update":{"name":"projects/jscore-sandbox-141b5/databases/test-db/documents/test-collection/y7ZF87O9PFboJCkzSzjJ","fields":{"deep":{"mapValue":{"fields":{}}}}},"updateMask":{"fieldPaths":["deep"]},"updateTransforms":[{"fieldPath":"when","setToServerValue":"REQUEST_TIME"},{"fieldPath":"deep.when","setToServerValue":"REQUEST_TIME"}],"currentDocument":{"exists":true}}]}'
@firebase/firestore: WARN: '[2025-03-04T23:12:05.828Z]  @firebase/firestore:', 'Firestore (11.3.0): RestConnection', 'RPC 'Commit' 0x645790b6 failed with error: ', '{"code":"not-found","name":"FirebaseError"}', 'url: ', 'https://firestore.googleapis.com/v1/projects/jscore-sandbox-141b5/databases/test-db/documents:commit', 'request:', '{"writes":[{"update":{"name":"projects/jscore-sandbox-141b5/databases/test-db/documents/test-collection/y7ZF87O9PFboJCkzSzjJ","fields":{"deep":{"mapValue":{"fields":{}}}}},"updateMask":{"fieldPaths":["deep"]},"updateTransforms":[{"fieldPath":"when","setToServerValue":"REQUEST_TIME"},{"fieldPath":"deep.when","setToServerValue":"REQUEST_TIME"}],"currentDocument":{"exists":true}}]}'
@firebase/firestore:     âœ” fail via transaction update() on nonexistent document.
@firebase/firestore:   (Persistence=indexeddb) Server Timestamps
@firebase/firestore:     âœ” work via set()
@firebase/firestore:     âœ” work via update()
@firebase/firestore:     âœ” work via transaction set()
@firebase/firestore:     âœ” work via transaction update()
@firebase/firestore:     âœ” can return estimated value
@firebase/firestore:     âœ” can return previous value of different type
@firebase/firestore:     âœ” can return previous value through consecutive updates
@firebase/firestore:     âœ” uses previous value from local mutation
