/**
 * @license
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * The next "unique ID" to return from `generateUniqueDebugId()`.
 */
let nextUniqueDebugId: number | null = null;

/**
 * Generates and returns an initial value for `nextUniqueDebugId`.
 *
 * The returned value is randomly selected from a range of integers that are
 * represented as 8 hexadecimal digits. This means that any numbers generated by
 * incrementing the returned number by 1 will be represented by 8 hexadecimal
 * digits in a string. This leads to all "IDs" having the same length, making
 * reading logs containing these IDs easier to follow. And since the return
 * value is randomly selected it will help to differentiate when comparing logs
 * from different executions.
 */
function generateInitialValueForNextUniqueId(): number {
  const minResult = 0x20000000;
  const maxResult = 0x90000000;
  const resultRange = maxResult - minResult;
  const resultOffset = Math.round(resultRange * Math.random());
  return minResult + resultOffset;
}

/**
 * Generates and returns a unique ID as a hexadecimal string.
 *
 * The returned ID is intended to be used in debug logging messages to help
 * correlate log messages that may be spatially separated in the logs. For
 * example, a network connection could include the same "debug ID" string in
 * all of its log messages to help trace a specific connection over time.
 *
 * @return the generated unique ID (e.g. "0xa1b2c3d4"), which will be exactly
 * 10 characters.
 */
export function generateUniqueDebugId(): string {
  if (nextUniqueDebugId === null) {
    nextUniqueDebugId = generateInitialValueForNextUniqueId();
  }
  const uniqueIdString = `0x${nextUniqueDebugId.toString(16)}`;
  nextUniqueDebugId++;
  return uniqueIdString;
}
