// Copyright 2018 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Specification of the Firestore Emulator API.
syntax = "proto3";

package google.firestore.emulator.v1;

option java_multiple_files = true;
option java_package = "com.google.firestore.emulator.v1";

import "google/protobuf/empty.proto";
import "google/firebase/rules/v1/source.proto";

// The Cloud Firestore Emulator service.
//
// A collection of auxiliary functionality present in the Cloud Firestore
// emulator but not the production Cloud Firestore service.
service FirestoreEmulator {
  // Set the Firebase Rules used to validate requests against a given project.
  // Note: In production this behavior is handled by the Firebase Rules service.
  // The Firestore Emulator does not interact with the Firebase Rules service,
  // so it needs to have some way of uploading new rulesets.
  rpc SetSecurityRules(SetSecurityRulesRequest)
      returns (google.protobuf.Empty) {
  }

  // Delete all data in a given database. Useful for clearing a database
  // between tests to prevent cross-test data contamination.
  rpc ClearData(ClearDataRequest) returns (google.protobuf.Empty) {
  }
}

message SetSecurityRulesRequest {
  // Format: `projects/{project_id}
  string project = 1;

  // The ruleset to use for the project
  google.firebase.rules.v1.Source rules = 2;
}

message ClearDataRequest {
  // Format: `projects/{project_id}/databases/(default)`
  string database = 1;
}
