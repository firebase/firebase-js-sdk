{"version":3,"file":"firebase-performance-standalone-compat.es2017.js","sources":["../../packages/util/src/deepCopy.ts","../../packages/util/src/deferred.ts","../../packages/util/src/errors.ts","../../packages/component/src/component.ts","../../packages/component/src/constants.ts","../../packages/component/src/provider.ts","../../packages/component/src/component_container.ts","../../packages/logger/src/logger.ts","../app-exp/src/platformLoggerService.ts","../app-exp/src/logger.ts","../app-exp/src/constants.ts","../app-exp/src/internal.ts","../app-exp/src/errors.ts","../app-exp/src/firebaseApp.ts","../app-exp/src/api.ts","../app-exp/src/registerCoreComponents.ts","../app-compat/src/lite/firebaseAppLite.ts","../app-compat/src/errors.ts","../app-compat/src/firebaseNamespaceCore.ts","../../packages/util/src/obj.ts","../app-compat/src/index.lite.ts","../app-compat/src/lite/firebaseNamespaceLite.ts","../app-compat/src/registerCoreComponents.ts","compat/app/index.ts","compat/index.perf.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Do a deep-copy of basic JavaScript Objects or Arrays.\n */\nexport function deepCopy<T>(value: T): T {\n  return deepExtend(undefined, value) as T;\n}\n\n/**\n * Copy properties from source to target (recursively allows extension\n * of Objects and Arrays).  Scalar values in the target are over-written.\n * If target is undefined, an object of the appropriate type will be created\n * (and returned).\n *\n * We recursively copy all child properties of plain Objects in the source- so\n * that namespace- like dictionaries are merged.\n *\n * Note that the target can be a function, in which case the properties in\n * the source Object are copied onto it as static properties of the Function.\n *\n * Note: we don't merge __proto__ to prevent prototype pollution\n */\nexport function deepExtend(target: unknown, source: unknown): unknown {\n  if (!(source instanceof Object)) {\n    return source;\n  }\n\n  switch (source.constructor) {\n    case Date:\n      // Treat Dates like scalars; if the target date object had any child\n      // properties - they will be lost!\n      const dateValue = source as Date;\n      return new Date(dateValue.getTime());\n\n    case Object:\n      if (target === undefined) {\n        target = {};\n      }\n      break;\n    case Array:\n      // Always copy the array source and overwrite the target.\n      target = [];\n      break;\n\n    default:\n      // Not a plain Object - treat it as a scalar.\n      return source;\n  }\n\n  for (const prop in source) {\n    // use isValidKey to guard against prototype pollution. See https://snyk.io/vuln/SNYK-JS-LODASH-450202\n    if (!source.hasOwnProperty(prop) || !isValidKey(prop)) {\n      continue;\n    }\n    (target as Record<string, unknown>)[prop] = deepExtend(\n      (target as Record<string, unknown>)[prop],\n      (source as Record<string, unknown>)[prop]\n    );\n  }\n\n  return target;\n}\n\nfunction isValidKey(key: string): boolean {\n  return key !== '__proto__';\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class Deferred<R> {\n  promise: Promise<R>;\n  reject: (value?: unknown) => void = () => {};\n  resolve: (value?: unknown) => void = () => {};\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = resolve as (value?: unknown) => void;\n      this.reject = reject as (value?: unknown) => void;\n    });\n  }\n\n  /**\n   * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around\n   * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback\n   * and returns a node-style callback which will resolve or reject the Deferred's promise.\n   */\n  wrapCallback(\n    callback?: (error?: unknown, value?: unknown) => void\n  ): (error: unknown, value?: unknown) => void {\n    return (error, value?) => {\n      if (error) {\n        this.reject(error);\n      } else {\n        this.resolve(value);\n      }\n      if (typeof callback === 'function') {\n        // Attaching noop handler just in case developer wasn't expecting\n        // promises\n        this.promise.catch(() => {});\n\n        // Some of our callbacks don't expect a value and our own tests\n        // assert that the parameter length is 1\n        if (callback.length === 1) {\n          callback(error);\n        } else {\n          callback(error, value);\n        }\n      }\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Standardized Firebase Error.\n *\n * Usage:\n *\n *   // Typescript string literals for type-safe codes\n *   type Err =\n *     'unknown' |\n *     'object-not-found'\n *     ;\n *\n *   // Closure enum for type-safe error codes\n *   // at-enum {string}\n *   var Err = {\n *     UNKNOWN: 'unknown',\n *     OBJECT_NOT_FOUND: 'object-not-found',\n *   }\n *\n *   let errors: Map<Err, string> = {\n *     'generic-error': \"Unknown error\",\n *     'file-not-found': \"Could not find file: {$file}\",\n *   };\n *\n *   // Type-safe function - must pass a valid error code as param.\n *   let error = new ErrorFactory<Err>('service', 'Service', errors);\n *\n *   ...\n *   throw error.create(Err.GENERIC);\n *   ...\n *   throw error.create(Err.FILE_NOT_FOUND, {'file': fileName});\n *   ...\n *   // Service: Could not file file: foo.txt (service/file-not-found).\n *\n *   catch (e) {\n *     assert(e.message === \"Could not find file: foo.txt.\");\n *     if (e.code === 'service/file-not-found') {\n *       console.log(\"Could not read file: \" + e['file']);\n *     }\n *   }\n */\n\nexport type ErrorMap<ErrorCode extends string> = {\n  readonly [K in ErrorCode]: string;\n};\n\nconst ERROR_NAME = 'FirebaseError';\n\nexport interface StringLike {\n  toString(): string;\n}\n\nexport interface ErrorData {\n  [key: string]: unknown;\n}\n\n// Based on code from:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types\nexport class FirebaseError extends Error {\n  readonly name = ERROR_NAME;\n\n  constructor(\n    readonly code: string,\n    message: string,\n    public customData?: Record<string, unknown>\n  ) {\n    super(message);\n\n    // Fix For ES5\n    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, FirebaseError.prototype);\n\n    // Maintains proper stack trace for where our error was thrown.\n    // Only available on V8.\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, ErrorFactory.prototype.create);\n    }\n  }\n}\n\nexport class ErrorFactory<\n  ErrorCode extends string,\n  ErrorParams extends { readonly [K in ErrorCode]?: ErrorData } = {}\n> {\n  constructor(\n    private readonly service: string,\n    private readonly serviceName: string,\n    private readonly errors: ErrorMap<ErrorCode>\n  ) {}\n\n  create<K extends ErrorCode>(\n    code: K,\n    ...data: K extends keyof ErrorParams ? [ErrorParams[K]] : []\n  ): FirebaseError {\n    const customData = (data[0] as ErrorData) || {};\n    const fullCode = `${this.service}/${code}`;\n    const template = this.errors[code];\n\n    const message = template ? replaceTemplate(template, customData) : 'Error';\n    // Service Name: Error message (service/code).\n    const fullMessage = `${this.serviceName}: ${message} (${fullCode}).`;\n\n    const error = new FirebaseError(fullCode, fullMessage, customData);\n\n    return error;\n  }\n}\n\nfunction replaceTemplate(template: string, data: ErrorData): string {\n  return template.replace(PATTERN, (_, key) => {\n    const value = data[key];\n    return value != null ? String(value) : `<${key}?>`;\n  });\n}\n\nconst PATTERN = /\\{\\$([^}]+)}/g;\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  InstantiationMode,\n  InstanceFactory,\n  ComponentType,\n  Dictionary,\n  Name\n} from './types';\n\n/**\n * Component for service name T, e.g. `auth`, `auth-internal`\n */\nexport class Component<T extends Name = Name> {\n  multipleInstances = false;\n  /**\n   * Properties to be added to the service namespace\n   */\n  serviceProps: Dictionary = {};\n\n  instantiationMode = InstantiationMode.LAZY;\n\n  /**\n   *\n   * @param name The public service name, e.g. app, auth, firestore, database\n   * @param instanceFactory Service factory responsible for creating the public interface\n   * @param type whether the service provided by the component is public or private\n   */\n  constructor(\n    readonly name: T,\n    readonly instanceFactory: InstanceFactory<T>,\n    readonly type: ComponentType\n  ) {}\n\n  setInstantiationMode(mode: InstantiationMode): this {\n    this.instantiationMode = mode;\n    return this;\n  }\n\n  setMultipleInstances(multipleInstances: boolean): this {\n    this.multipleInstances = multipleInstances;\n    return this;\n  }\n\n  setServiceProps(props: Dictionary): this {\n    this.serviceProps = props;\n    return this;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const DEFAULT_ENTRY_NAME = '[DEFAULT]';\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '@firebase/util';\nimport { ComponentContainer } from './component_container';\nimport { DEFAULT_ENTRY_NAME } from './constants';\nimport { InstantiationMode, Name, NameServiceMapping } from './types';\nimport { Component } from './component';\n\n/**\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\n * NameServiceMapping[T] is an alias for the type of the instance\n */\nexport class Provider<T extends Name> {\n  private component: Component<T> | null = null;\n  private readonly instances: Map<string, NameServiceMapping[T]> = new Map();\n  private readonly instancesDeferred: Map<\n    string,\n    Deferred<NameServiceMapping[T]>\n  > = new Map();\n\n  constructor(\n    private readonly name: T,\n    private readonly container: ComponentContainer\n  ) {}\n\n  /**\n   * @param identifier A provider can provide mulitple instances of a service\n   * if this.component.multipleInstances is true.\n   */\n  get(identifier: string = DEFAULT_ENTRY_NAME): Promise<NameServiceMapping[T]> {\n    // if multipleInstances is not supported, use the default name\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n\n    if (!this.instancesDeferred.has(normalizedIdentifier)) {\n      const deferred = new Deferred<NameServiceMapping[T]>();\n      this.instancesDeferred.set(normalizedIdentifier, deferred);\n      // If the service instance is available, resolve the promise with it immediately\n      try {\n        const instance = this.getOrInitializeService(normalizedIdentifier);\n        if (instance) {\n          deferred.resolve(instance);\n        }\n      } catch (e) {\n        // when the instance factory throws an exception during get(), it should not cause\n        // a fatal error. We just return the unresolved promise in this case.\n      }\n    }\n\n    return this.instancesDeferred.get(normalizedIdentifier)!.promise;\n  }\n\n  /**\n   *\n   * @param options.identifier A provider can provide mulitple instances of a service\n   * if this.component.multipleInstances is true.\n   * @param options.optional If optional is false or not provided, the method throws an error when\n   * the service is not immediately available.\n   * If optional is true, the method returns null if the service is not immediately available.\n   */\n  getImmediate(options: {\n    identifier?: string;\n    optional: true;\n  }): NameServiceMapping[T] | null;\n  getImmediate(options?: {\n    identifier?: string;\n    optional?: false;\n  }): NameServiceMapping[T];\n  getImmediate(options?: {\n    identifier?: string;\n    optional?: boolean;\n  }): NameServiceMapping[T] | null {\n    const { identifier, optional } = {\n      identifier: DEFAULT_ENTRY_NAME,\n      optional: false,\n      ...options\n    };\n    // if multipleInstances is not supported, use the default name\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n    try {\n      const instance = this.getOrInitializeService(normalizedIdentifier);\n\n      if (!instance) {\n        if (optional) {\n          return null;\n        }\n        throw Error(`Service ${this.name} is not available`);\n      }\n      return instance;\n    } catch (e) {\n      if (optional) {\n        return null;\n      } else {\n        throw e;\n      }\n    }\n  }\n\n  getComponent(): Component<T> | null {\n    return this.component;\n  }\n\n  setComponent(component: Component<T>): void {\n    if (component.name !== this.name) {\n      throw Error(\n        `Mismatching Component ${component.name} for Provider ${this.name}.`\n      );\n    }\n\n    if (this.component) {\n      throw Error(`Component for ${this.name} has already been provided`);\n    }\n\n    this.component = component;\n    // if the service is eager, initialize the default instance\n    if (isComponentEager(component)) {\n      try {\n        this.getOrInitializeService(DEFAULT_ENTRY_NAME);\n      } catch (e) {\n        // when the instance factory for an eager Component throws an exception during the eager\n        // initialization, it should not cause a fatal error.\n        // TODO: Investigate if we need to make it configurable, because some component may want to cause\n        // a fatal error in this case?\n      }\n    }\n\n    // Create service instances for the pending promises and resolve them\n    // NOTE: if this.multipleInstances is false, only the default instance will be created\n    // and all promises with resolve with it regardless of the identifier.\n    for (const [\n      instanceIdentifier,\n      instanceDeferred\n    ] of this.instancesDeferred.entries()) {\n      const normalizedIdentifier = this.normalizeInstanceIdentifier(\n        instanceIdentifier\n      );\n\n      try {\n        // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\n        const instance = this.getOrInitializeService(normalizedIdentifier)!;\n        instanceDeferred.resolve(instance);\n      } catch (e) {\n        // when the instance factory throws an exception, it should not cause\n        // a fatal error. We just leave the promise unresolved.\n      }\n    }\n  }\n\n  clearInstance(identifier: string = DEFAULT_ENTRY_NAME): void {\n    this.instancesDeferred.delete(identifier);\n    this.instances.delete(identifier);\n  }\n\n  // app.delete() will call this method on every provider to delete the services\n  // TODO: should we mark the provider as deleted?\n  async delete(): Promise<void> {\n    const services = Array.from(this.instances.values());\n\n    await Promise.all([\n      ...services\n        .filter(service => 'INTERNAL' in service) // legacy services\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .map(service => (service as any).INTERNAL!.delete()),\n      ...services\n        .filter(service => '_delete' in service) // modularized services\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .map(service => (service as any)._delete())\n    ]);\n  }\n\n  isComponentSet(): boolean {\n    return this.component != null;\n  }\n\n  private getOrInitializeService(\n    identifier: string\n  ): NameServiceMapping[T] | null {\n    let instance = this.instances.get(identifier);\n    if (!instance && this.component) {\n      instance = this.component.instanceFactory(\n        this.container,\n        normalizeIdentifierForFactory(identifier)\n      ) as NameServiceMapping[T];\n      this.instances.set(identifier, instance);\n    }\n\n    return instance || null;\n  }\n\n  private normalizeInstanceIdentifier(identifier: string): string {\n    if (this.component) {\n      return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\n    } else {\n      return identifier; // assume multiple instances are supported before the component is provided.\n    }\n  }\n}\n\n// undefined should be passed to the service factory for the default instance\nfunction normalizeIdentifierForFactory(identifier: string): string | undefined {\n  return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\n}\n\nfunction isComponentEager(component: Component<Name>): boolean {\n  return component.instantiationMode === InstantiationMode.EAGER;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Provider } from './provider';\nimport { Component } from './component';\nimport { Name } from './types';\n\n/**\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\n */\nexport class ComponentContainer {\n  private readonly providers = new Map<string, Provider<Name>>();\n\n  constructor(private readonly name: string) {}\n\n  /**\n   *\n   * @param component Component being added\n   * @param overwrite When a component with the same name has already been registered,\n   * if overwrite is true: overwrite the existing component with the new component and create a new\n   * provider with the new component. It can be useful in tests where you want to use different mocks\n   * for different tests.\n   * if overwrite is false: throw an exception\n   */\n  addComponent<T extends Name>(component: Component<T>): void {\n    const provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      throw new Error(\n        `Component ${component.name} has already been registered with ${this.name}`\n      );\n    }\n\n    provider.setComponent(component);\n  }\n\n  addOrOverwriteComponent<T extends Name>(component: Component<T>): void {\n    const provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      // delete the existing provider from the container, so we can register the new component\n      this.providers.delete(component.name);\n    }\n\n    this.addComponent(component);\n  }\n\n  /**\n   * getProvider provides a type safe interface where it can only be called with a field name\n   * present in NameServiceMapping interface.\n   *\n   * Firebase SDKs providing services should extend NameServiceMapping interface to register\n   * themselves.\n   */\n  getProvider<T extends Name>(name: T): Provider<T> {\n    if (this.providers.has(name)) {\n      return this.providers.get(name) as Provider<T>;\n    }\n\n    // create a Provider for a service that hasn't registered with Firebase\n    const provider = new Provider<T>(name, this);\n    this.providers.set(name, provider);\n\n    return provider as Provider<T>;\n  }\n\n  getProviders(): Array<Provider<Name>> {\n    return Array.from(this.providers.values());\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport type LogLevelString =\n  | 'debug'\n  | 'verbose'\n  | 'info'\n  | 'warn'\n  | 'error'\n  | 'silent';\n\nexport interface LogOptions {\n  level: LogLevelString;\n}\n\nexport type LogCallback = (callbackParams: LogCallbackParams) => void;\n\nexport interface LogCallbackParams {\n  level: LogLevelString;\n  message: string;\n  args: unknown[];\n  type: string;\n}\n\n/**\n * A container for all of the Logger instances\n */\nexport const instances: Logger[] = [];\n\n/**\n * The JS SDK supports 5 log levels and also allows a user the ability to\n * silence the logs altogether.\n *\n * The order is a follows:\n * DEBUG < VERBOSE < INFO < WARN < ERROR\n *\n * All of the log types above the current log level will be captured (i.e. if\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\n * `VERBOSE` logs will not)\n */\nexport enum LogLevel {\n  DEBUG,\n  VERBOSE,\n  INFO,\n  WARN,\n  ERROR,\n  SILENT\n}\n\nconst levelStringToEnum: { [key in LogLevelString]: LogLevel } = {\n  'debug': LogLevel.DEBUG,\n  'verbose': LogLevel.VERBOSE,\n  'info': LogLevel.INFO,\n  'warn': LogLevel.WARN,\n  'error': LogLevel.ERROR,\n  'silent': LogLevel.SILENT\n};\n\n/**\n * The default log level\n */\nconst defaultLogLevel: LogLevel = LogLevel.INFO;\n\n/**\n * We allow users the ability to pass their own log handler. We will pass the\n * type of log, the current log level, and any other arguments passed (i.e. the\n * messages that the user wants to log) to this function.\n */\nexport type LogHandler = (\n  loggerInstance: Logger,\n  logType: LogLevel,\n  ...args: unknown[]\n) => void;\n\n/**\n * By default, `console.debug` is not displayed in the developer console (in\n * chrome). To avoid forcing users to have to opt-in to these logs twice\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\n * logs to the `console.log` function.\n */\nconst ConsoleMethod = {\n  [LogLevel.DEBUG]: 'log',\n  [LogLevel.VERBOSE]: 'log',\n  [LogLevel.INFO]: 'info',\n  [LogLevel.WARN]: 'warn',\n  [LogLevel.ERROR]: 'error'\n};\n\n/**\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\n * messages on to their corresponding console counterparts (if the log method\n * is supported by the current log level)\n */\nconst defaultLogHandler: LogHandler = (instance, logType, ...args): void => {\n  if (logType < instance.logLevel) {\n    return;\n  }\n  const now = new Date().toISOString();\n  const method = ConsoleMethod[logType as keyof typeof ConsoleMethod];\n  if (method) {\n    console[method as 'log' | 'info' | 'warn' | 'error'](\n      `[${now}]  ${instance.name}:`,\n      ...args\n    );\n  } else {\n    throw new Error(\n      `Attempted to log a message with an invalid logType (value: ${logType})`\n    );\n  }\n};\n\nexport class Logger {\n  /**\n   * Gives you an instance of a Logger to capture messages according to\n   * Firebase's logging scheme.\n   *\n   * @param name The name that the logs will be associated with\n   */\n  constructor(public name: string) {\n    /**\n     * Capture the current instance for later use\n     */\n    instances.push(this);\n  }\n\n  /**\n   * The log level of the given Logger instance.\n   */\n  private _logLevel = defaultLogLevel;\n\n  get logLevel(): LogLevel {\n    return this._logLevel;\n  }\n\n  set logLevel(val: LogLevel) {\n    if (!(val in LogLevel)) {\n      throw new TypeError(`Invalid value \"${val}\" assigned to \\`logLevel\\``);\n    }\n    this._logLevel = val;\n  }\n\n  // Workaround for setter/getter having to be the same type.\n  setLogLevel(val: LogLevel | LogLevelString): void {\n    this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\n  }\n\n  /**\n   * The main (internal) log handler for the Logger instance.\n   * Can be set to a new function in internal package code but not by user.\n   */\n  private _logHandler: LogHandler = defaultLogHandler;\n  get logHandler(): LogHandler {\n    return this._logHandler;\n  }\n  set logHandler(val: LogHandler) {\n    if (typeof val !== 'function') {\n      throw new TypeError('Value assigned to `logHandler` must be a function');\n    }\n    this._logHandler = val;\n  }\n\n  /**\n   * The optional, additional, user-defined log handler for the Logger instance.\n   */\n  private _userLogHandler: LogHandler | null = null;\n  get userLogHandler(): LogHandler | null {\n    return this._userLogHandler;\n  }\n  set userLogHandler(val: LogHandler | null) {\n    this._userLogHandler = val;\n  }\n\n  /**\n   * The functions below are all based on the `console` interface\n   */\n\n  debug(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);\n    this._logHandler(this, LogLevel.DEBUG, ...args);\n  }\n  log(...args: unknown[]): void {\n    this._userLogHandler &&\n      this._userLogHandler(this, LogLevel.VERBOSE, ...args);\n    this._logHandler(this, LogLevel.VERBOSE, ...args);\n  }\n  info(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);\n    this._logHandler(this, LogLevel.INFO, ...args);\n  }\n  warn(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);\n    this._logHandler(this, LogLevel.WARN, ...args);\n  }\n  error(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);\n    this._logHandler(this, LogLevel.ERROR, ...args);\n  }\n}\n\nexport function setLogLevel(level: LogLevelString | LogLevel): void {\n  instances.forEach(inst => {\n    inst.setLogLevel(level);\n  });\n}\n\nexport function setUserLogHandler(\n  logCallback: LogCallback | null,\n  options?: LogOptions\n): void {\n  for (const instance of instances) {\n    let customLogLevel: LogLevel | null = null;\n    if (options && options.level) {\n      customLogLevel = levelStringToEnum[options.level];\n    }\n    if (logCallback === null) {\n      instance.userLogHandler = null;\n    } else {\n      instance.userLogHandler = (\n        instance: Logger,\n        level: LogLevel,\n        ...args: unknown[]\n      ) => {\n        const message = args\n          .map(arg => {\n            if (arg == null) {\n              return null;\n            } else if (typeof arg === 'string') {\n              return arg;\n            } else if (typeof arg === 'number' || typeof arg === 'boolean') {\n              return arg.toString();\n            } else if (arg instanceof Error) {\n              return arg.message;\n            } else {\n              try {\n                return JSON.stringify(arg);\n              } catch (ignored) {\n                return null;\n              }\n            }\n          })\n          .filter(arg => arg)\n          .join(' ');\n        if (level >= (customLogLevel ?? instance.logLevel)) {\n          logCallback({\n            level: LogLevel[level].toLowerCase() as LogLevelString,\n            message,\n            args,\n            type: instance.name\n          });\n        }\n      };\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ComponentContainer,\n  ComponentType,\n  Provider,\n  Name\n} from '@firebase/component';\n\nexport class PlatformLoggerService {\n  constructor(private readonly container: ComponentContainer) {}\n  // In initial implementation, this will be called by installations on\n  // auth token refresh, and installations will send this string.\n  getPlatformInfoString(): string {\n    const providers = this.container.getProviders();\n    // Loop through providers and get library/version pairs from any that are\n    // version components.\n    return providers\n      .map(provider => {\n        if (isVersionServiceProvider(provider)) {\n          const service = provider.getImmediate();\n          return `${service.library}/${service.version}`;\n        } else {\n          return null;\n        }\n      })\n      .filter(logString => logString)\n      .join(' ');\n  }\n}\n/**\n *\n * @param provider check if this provider provides a VersionService\n *\n * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider\n * provides VersionService. The provider is not necessarily a 'app-version'\n * provider.\n */\nfunction isVersionServiceProvider(\n  provider: Provider<Name>\n): provider is Provider<'app-version'> {\n  const component = provider.getComponent();\n  return component?.type === ComponentType.VERSION;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from '@firebase/logger';\n\nexport const logger = new Logger('@firebase/app');\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { name as appName } from '../package.json';\nimport { name as appCompatName } from '../../app-compat/package.json';\nimport { name as analyticsName } from '../../../packages/analytics/package.json';\nimport { name as authName } from '../../../packages/auth/package.json';\nimport { name as databaseName } from '../../../packages/database/package.json';\nimport { name as functionsName } from '../../../packages-exp/functions-exp/package.json';\nimport { name as functionsCompatName } from '../../../packages-exp/functions-compat/package.json';\nimport { name as installationsName } from '../../../packages/installations/package.json';\nimport { name as messagingName } from '../../../packages/messaging/package.json';\nimport { name as performanceName } from '../../../packages/performance/package.json';\nimport { name as remoteConfigName } from '../../../packages/remote-config/package.json';\nimport { name as storageName } from '../../../packages/storage/package.json';\nimport { name as firestoreName } from '../../../packages/firestore/package.json';\nimport { name as packageName } from '../../../packages-exp/firebase-exp/package.json';\n\n/**\n * The default app name\n *\n * @internal\n */\nexport const DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\nexport const PLATFORM_LOG_STRING = {\n  [appName]: 'fire-core',\n  [appCompatName]: 'fire-core-compat',\n  [analyticsName]: 'fire-analytics',\n  [authName]: 'fire-auth',\n  [databaseName]: 'fire-rtdb',\n  [functionsName]: 'fire-fn',\n  [functionsCompatName]: 'fire-fn-compat',\n  [installationsName]: 'fire-iid',\n  [messagingName]: 'fire-fcm',\n  [performanceName]: 'fire-perf',\n  [remoteConfigName]: 'fire-rc',\n  [storageName]: 'fire-gcs',\n  [firestoreName]: 'fire-fst',\n  'fire-js': 'fire-js', // Platform identifier for JS SDK.\n  [packageName]: 'fire-js-all'\n} as const;\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _FirebaseAppInternal, FirebaseApp } from '@firebase/app-types-exp';\nimport { Component, Provider, Name } from '@firebase/component';\nimport { logger } from './logger';\nimport { DEFAULT_ENTRY_NAME } from './constants';\n\n/**\n * @internal\n */\nexport const _apps = new Map<string, FirebaseApp>();\n\n/**\n * Registered components.\n *\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const _components = new Map<string, Component<any>>();\n\n/**\n * @param component - the component being added to this app's container\n *\n * @internal\n */\nexport function _addComponent(app: FirebaseApp, component: Component): void {\n  try {\n    (app as _FirebaseAppInternal).container.addComponent(component);\n  } catch (e) {\n    logger.debug(\n      `Component ${component.name} failed to register with FirebaseApp ${app.name}`,\n      e\n    );\n  }\n}\n\n/**\n *\n * @internal\n */\nexport function _addOrOverwriteComponent(\n  app: FirebaseApp,\n  component: Component\n): void {\n  (app as _FirebaseAppInternal).container.addOrOverwriteComponent(component);\n}\n\n/**\n *\n * @param component - the component to register\n * @returns whether or not the component is registered successfully\n *\n * @internal\n */\nexport function _registerComponent(component: Component): boolean {\n  const componentName = component.name;\n  if (_components.has(componentName)) {\n    logger.debug(\n      `There were multiple attempts to register component ${componentName}.`\n    );\n\n    return false;\n  }\n\n  _components.set(componentName, component);\n\n  // add the component to existing app instances\n  for (const app of _apps.values()) {\n    _addComponent(app as _FirebaseAppInternal, component);\n  }\n\n  return true;\n}\n\n/**\n *\n * @param app - FirebaseApp instance\n * @param name - service name\n *\n * @returns the provider for the service with the matching name\n *\n * @internal\n */\nexport function _getProvider<T extends Name>(\n  app: FirebaseApp,\n  name: T\n): Provider<T> {\n  return (app as _FirebaseAppInternal).container.getProvider(name);\n}\n\n/**\n *\n * @param app - FirebaseApp instance\n * @param name - service name\n * @param instanceIdentifier - service instance identifier in case the service supports multiple instances\n *\n * @internal\n */\nexport function _removeServiceInstance<T extends Name>(\n  app: FirebaseApp,\n  name: T,\n  instanceIdentifier: string = DEFAULT_ENTRY_NAME\n): void {\n  _getProvider(app, name).clearInstance(instanceIdentifier);\n}\n\n/**\n * Test only\n *\n * @internal\n */\nexport function _clearComponents(): void {\n  _components.clear();\n}\n\n/**\n * Exported in order to be used in app-compat package\n */\nexport { DEFAULT_ENTRY_NAME as _DEFAULT_ENTRY_NAME };\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum AppError {\n  NO_APP = 'no-app',\n  BAD_APP_NAME = 'bad-app-name',\n  DUPLICATE_APP = 'duplicate-app',\n  APP_DELETED = 'app-deleted',\n  INVALID_APP_ARGUMENT = 'invalid-app-argument',\n  INVALID_LOG_ARGUMENT = 'invalid-log-argument'\n}\n\nconst ERRORS: ErrorMap<AppError> = {\n  [AppError.NO_APP]:\n    \"No Firebase App '{$appName}' has been created - \" +\n    'call Firebase App.initializeApp()',\n  [AppError.BAD_APP_NAME]: \"Illegal App name: '{$appName}\",\n  [AppError.DUPLICATE_APP]: \"Firebase App named '{$appName}' already exists\",\n  [AppError.APP_DELETED]: \"Firebase App named '{$appName}' already deleted\",\n  [AppError.INVALID_APP_ARGUMENT]:\n    'firebase.{$appName}() takes either no argument or a ' +\n    'Firebase App instance.',\n  [AppError.INVALID_LOG_ARGUMENT]:\n    'First argument to `onLog` must be null or a function.'\n};\n\ntype ErrorParams = { [key in AppError]: { appName: string } };\n\nexport const ERROR_FACTORY = new ErrorFactory<AppError, ErrorParams>(\n  'app',\n  'Firebase',\n  ERRORS\n);\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp,\n  FirebaseOptions,\n  FirebaseAppConfig\n} from '@firebase/app-types-exp';\nimport {\n  ComponentContainer,\n  Component,\n  ComponentType\n} from '@firebase/component';\nimport { ERROR_FACTORY, AppError } from './errors';\n\nexport class FirebaseAppImpl implements FirebaseApp {\n  private readonly options_: FirebaseOptions;\n  private readonly name_: string;\n  private automaticDataCollectionEnabled_: boolean;\n  private isDeleted = false;\n  private readonly container: ComponentContainer;\n\n  constructor(\n    options: FirebaseOptions,\n    config: Required<FirebaseAppConfig>,\n    container: ComponentContainer\n  ) {\n    this.options_ = { ...options };\n    this.name_ = config.name;\n    this.automaticDataCollectionEnabled_ =\n      config.automaticDataCollectionEnabled;\n    this.container = container;\n    this.container.addComponent(\n      new Component('app-exp', () => this, ComponentType.PUBLIC)\n    );\n  }\n\n  get automaticDataCollectionEnabled(): boolean {\n    this.checkDestroyed();\n    return this.automaticDataCollectionEnabled_;\n  }\n\n  set automaticDataCollectionEnabled(val: boolean) {\n    this.checkDestroyed();\n    this.automaticDataCollectionEnabled_ = val;\n  }\n\n  get name(): string {\n    this.checkDestroyed();\n    return this.name_;\n  }\n\n  get options(): FirebaseOptions {\n    this.checkDestroyed();\n    return this.options_;\n  }\n\n  /**\n   * This function will throw an Error if the App has already been deleted -\n   * use before performing API actions on the App.\n   */\n  private checkDestroyed(): void {\n    if (this.isDeleted) {\n      throw ERROR_FACTORY.create(AppError.APP_DELETED, { appName: this.name_ });\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp,\n  FirebaseOptions,\n  FirebaseAppConfig,\n  _FirebaseAppInternal\n} from '@firebase/app-types-exp';\nimport { DEFAULT_ENTRY_NAME, PLATFORM_LOG_STRING } from './constants';\nimport { ERROR_FACTORY, AppError } from './errors';\nimport {\n  ComponentContainer,\n  Component,\n  Name,\n  ComponentType\n} from '@firebase/component';\nimport { version } from '../../firebase-exp/package.json';\nimport { FirebaseAppImpl } from './firebaseApp';\nimport { _apps, _components, _registerComponent } from './internal';\nimport { logger } from './logger';\nimport {\n  LogLevelString,\n  setLogLevel as setLogLevelImpl,\n  LogCallback,\n  LogOptions,\n  setUserLogHandler\n} from '@firebase/logger';\n\n/**\n * The current SDK version.\n *\n * @public\n */\nexport const SDK_VERSION = version;\n\n/**\n * Creates and initializes a FirebaseApp instance.\n *\n * See\n * {@link\n *   https://firebase.google.com/docs/web/setup#add_firebase_to_your_app\n *   | Add Firebase to your app} and\n * {@link\n *   https://firebase.google.com/docs/web/setup#multiple-projects\n *   | Initialize multiple projects} for detailed documentation.\n *\n * @example\n * ```javascript\n *\n * // Initialize default app\n * // Retrieve your own options values by adding a web app on\n * // https://console.firebase.google.com\n * initializeApp({\n *   apiKey: \"AIza....\",                             // Auth / General Use\n *   authDomain: \"YOUR_APP.firebaseapp.com\",         // Auth with popup/redirect\n *   databaseURL: \"https://YOUR_APP.firebaseio.com\", // Realtime Database\n *   storageBucket: \"YOUR_APP.appspot.com\",          // Storage\n *   messagingSenderId: \"123456789\"                  // Cloud Messaging\n * });\n * ```\n *\n * @example\n * ```javascript\n *\n * // Initialize another app\n * const otherApp = initializeApp({\n *   databaseURL: \"https://<OTHER_DATABASE_NAME>.firebaseio.com\",\n *   storageBucket: \"<OTHER_STORAGE_BUCKET>.appspot.com\"\n * }, \"otherApp\");\n * ```\n *\n * @param options - Options to configure the app's services.\n * @param name - Optional name of the app to initialize. If no name\n *   is provided, the default is `\"[DEFAULT]\"`.\n *\n * @returns The initialized app.\n *\n * @public\n */\nexport function initializeApp(\n  options: FirebaseOptions,\n  name?: string\n): FirebaseApp;\n/**\n * Creates and initializes a FirebaseApp instance.\n *\n * @param options - Options to configure the app's services.\n * @param config - FirebaseApp Configuration\n *\n * @public\n */\nexport function initializeApp(\n  options: FirebaseOptions,\n  config?: FirebaseAppConfig\n): FirebaseApp;\nexport function initializeApp(\n  options: FirebaseOptions,\n  rawConfig = {}\n): FirebaseApp {\n  if (typeof rawConfig !== 'object') {\n    const name = rawConfig;\n    rawConfig = { name };\n  }\n\n  const config: Required<FirebaseAppConfig> = {\n    name: DEFAULT_ENTRY_NAME,\n    automaticDataCollectionEnabled: false,\n    ...rawConfig\n  };\n  const name = config.name;\n\n  if (typeof name !== 'string' || !name) {\n    throw ERROR_FACTORY.create(AppError.BAD_APP_NAME, {\n      appName: String(name)\n    });\n  }\n\n  if (_apps.has(name)) {\n    throw ERROR_FACTORY.create(AppError.DUPLICATE_APP, { appName: name });\n  }\n\n  const container = new ComponentContainer(name);\n  for (const component of _components.values()) {\n    container.addComponent(component);\n  }\n\n  const newApp = new FirebaseAppImpl(options, config, container);\n\n  _apps.set(name, newApp);\n\n  return newApp;\n}\n\n/**\n * Retrieves a FirebaseApp instance.\n *\n * When called with no arguments, the default app is returned. When an app name\n * is provided, the app corresponding to that name is returned.\n *\n * An exception is thrown if the app being retrieved has not yet been\n * initialized.\n *\n * @example\n * ```javascript\n * // Return the default app\n * const app = getApp();\n * ```\n *\n * @example\n * ```javascript\n * // Return a named app\n * const otherApp = getApp(\"otherApp\");\n * ```\n *\n * @param name - Optional name of the app to return. If no name is\n *   provided, the default is `\"[DEFAULT]\"`.\n *\n * @returns The app corresponding to the provided app name.\n *   If no app name is provided, the default app is returned.\n *\n * @public\n */\nexport function getApp(name: string = DEFAULT_ENTRY_NAME): FirebaseApp {\n  const app = _apps.get(name);\n  if (!app) {\n    throw ERROR_FACTORY.create(AppError.NO_APP, { appName: name });\n  }\n\n  return app;\n}\n\n/**\n * A (read-only) array of all initialized apps.\n * @public\n */\nexport function getApps(): FirebaseApp[] {\n  return Array.from(_apps.values());\n}\n\n/**\n * Renders this app unusable and frees the resources of all associated\n * services.\n *\n * @example\n * ```javascript\n * deleteApp(app)\n *   .then(function() {\n *     console.log(\"App deleted successfully\");\n *   })\n *   .catch(function(error) {\n *     console.log(\"Error deleting app:\", error);\n *   });\n * ```\n *\n * @public\n */\nexport async function deleteApp(app: FirebaseApp): Promise<void> {\n  const name = app.name;\n  if (_apps.has(name)) {\n    _apps.delete(name);\n    await Promise.all(\n      (app as _FirebaseAppInternal).container\n        .getProviders()\n        .map(provider => provider.delete())\n    );\n    (app as _FirebaseAppInternal).isDeleted = true;\n  }\n}\n\n/**\n * Registers a library's name and version for platform logging purposes.\n * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)\n * @param version - Current version of that library.\n * @param variant - Bundle variant, e.g., node, rn, etc.\n *\n * @public\n */\nexport function registerVersion(\n  libraryKeyOrName: string,\n  version: string,\n  variant?: string\n): void {\n  // TODO: We can use this check to whitelist strings when/if we set up\n  // a good whitelist system.\n  let library = PLATFORM_LOG_STRING[libraryKeyOrName] ?? libraryKeyOrName;\n  if (variant) {\n    library += `-${variant}`;\n  }\n  const libraryMismatch = library.match(/\\s|\\//);\n  const versionMismatch = version.match(/\\s|\\//);\n  if (libraryMismatch || versionMismatch) {\n    const warning = [\n      `Unable to register library \"${library}\" with version \"${version}\":`\n    ];\n    if (libraryMismatch) {\n      warning.push(\n        `library name \"${library}\" contains illegal characters (whitespace or \"/\")`\n      );\n    }\n    if (libraryMismatch && versionMismatch) {\n      warning.push('and');\n    }\n    if (versionMismatch) {\n      warning.push(\n        `version name \"${version}\" contains illegal characters (whitespace or \"/\")`\n      );\n    }\n    logger.warn(warning.join(' '));\n    return;\n  }\n  _registerComponent(\n    new Component(\n      `${library}-version` as Name,\n      () => ({ library, version }),\n      ComponentType.VERSION\n    )\n  );\n}\n\n/**\n * Sets log handler for all Firebase SDKs.\n * @param logCallback - An optional custom log handler that executes user code whenever\n * the Firebase SDK makes a logging call.\n *\n * @public\n */\nexport function onLog(\n  logCallback: LogCallback | null,\n  options?: LogOptions\n): void {\n  if (logCallback !== null && typeof logCallback !== 'function') {\n    throw ERROR_FACTORY.create(AppError.INVALID_LOG_ARGUMENT, {\n      appName: name\n    });\n  }\n  setUserLogHandler(logCallback, options);\n}\n\n/**\n * Sets log level for all Firebase SDKs.\n *\n * All of the log types above the current log level are captured (i.e. if\n * you set the log level to `info`, errors are logged, but `debug` and\n * `verbose` logs are not).\n *\n * @public\n */\nexport function setLogLevel(logLevel: LogLevelString): void {\n  setLogLevelImpl(logLevel);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ComponentType } from '@firebase/component';\nimport { PlatformLoggerService } from './platformLoggerService';\nimport { name, version } from '../package.json';\nimport { _registerComponent } from './internal';\nimport { registerVersion } from './api';\n\nexport function registerCoreComponents(variant?: string): void {\n  _registerComponent(\n    new Component(\n      'platform-logger',\n      container => new PlatformLoggerService(container),\n      ComponentType.PRIVATE\n    )\n  );\n\n  // Register `app` package.\n  registerVersion(name, version, variant);\n  // Register platform SDK identifier (no version).\n  registerVersion('fire-js', '');\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, FirebaseOptions } from '@firebase/app-types';\nimport {\n  _FirebaseNamespace,\n  FirebaseService\n} from '@firebase/app-types/private';\nimport {\n  deleteApp,\n  _addComponent,\n  _DEFAULT_ENTRY_NAME\n} from '@firebase/app-exp';\nimport { _FirebaseAppInternal } from '@firebase/app-types-exp';\nimport { Component, ComponentType, Name } from '@firebase/component';\n\n/**\n * Global context object for a collection of services using\n * a shared authentication state.\n */\nexport class FirebaseAppLiteImpl implements FirebaseApp {\n  constructor(\n    private readonly app: _FirebaseAppInternal,\n    private readonly firebase: _FirebaseNamespace\n  ) {\n    // add itself to container\n    _addComponent(app, new Component('app', () => this, ComponentType.PUBLIC));\n  }\n\n  get automaticDataCollectionEnabled(): boolean {\n    return this.app.automaticDataCollectionEnabled;\n  }\n\n  set automaticDataCollectionEnabled(val) {\n    this.automaticDataCollectionEnabled = val;\n  }\n\n  get name(): string {\n    return this.app.name;\n  }\n\n  get options(): FirebaseOptions {\n    return this.app.options;\n  }\n\n  delete(): Promise<void> {\n    this.firebase.INTERNAL.removeApp(this.name);\n    return deleteApp(this.app);\n  }\n\n  /**\n   * Return a service instance associated with this app (creating it\n   * on demand), identified by the passed instanceIdentifier.\n   *\n   * NOTE: Currently storage is the only one that is leveraging this\n   * functionality. They invoke it by calling:\n   *\n   * ```javascript\n   * firebase.app().storage('STORAGE BUCKET ID')\n   * ```\n   *\n   * The service name is passed to this already\n   * @internal\n   */\n  _getService(\n    name: string,\n    instanceIdentifier: string = _DEFAULT_ENTRY_NAME\n  ): FirebaseService {\n    this.app.checkDestroyed();\n\n    // getImmediate will always succeed because _getService is only called for registered components.\n    return (this.app.container.getProvider(name as Name).getImmediate({\n      identifier: instanceIdentifier\n    }) as unknown) as FirebaseService;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum AppError {\n  NO_APP = 'no-app',\n  INVALID_APP_ARGUMENT = 'invalid-app-argument'\n}\n\nconst ERRORS: ErrorMap<AppError> = {\n  [AppError.NO_APP]:\n    \"No Firebase App '{$appName}' has been created - \" +\n    'call Firebase App.initializeApp()',\n  [AppError.INVALID_APP_ARGUMENT]:\n    'firebase.{$appName}() takes either no argument or a ' +\n    'Firebase App instance.'\n};\n\ntype ErrorParams = { [key in AppError]: { appName: string } };\n\nexport const ERROR_FACTORY = new ErrorFactory<AppError, ErrorParams>(\n  'app-compat',\n  'Firebase',\n  ERRORS\n);\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp,\n  FirebaseOptions,\n  FirebaseNamespace\n} from '@firebase/app-types'; // TODO: create @firebase/app-types-compat before the official release\nimport {\n  _FirebaseNamespace,\n  FirebaseService,\n  FirebaseServiceNamespace\n} from '@firebase/app-types/private';\nimport * as modularAPIs from '@firebase/app-exp';\nimport { _FirebaseAppInternal } from '@firebase/app-types-exp';\nimport { Component, ComponentType } from '@firebase/component';\n\nimport { deepExtend, contains } from '@firebase/util';\nimport { FirebaseAppImpl } from './firebaseApp';\nimport { ERROR_FACTORY, AppError } from './errors';\nimport { FirebaseAppLiteImpl } from './lite/firebaseAppLite';\n\n/**\n * Because auth can't share code with other components, we attach the utility functions\n * in an internal namespace to share code.\n * This function return a firebase namespace object without\n * any utility functions, so it can be shared between the regular firebaseNamespace and\n * the lite version.\n */\nexport function createFirebaseNamespaceCore(\n  firebaseAppImpl: typeof FirebaseAppImpl | typeof FirebaseAppLiteImpl\n): FirebaseNamespace {\n  const apps: { [name: string]: FirebaseApp } = {};\n  // // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  // const components = new Map<string, Component<any>>();\n\n  // A namespace is a plain JavaScript Object.\n  const namespace: FirebaseNamespace = {\n    // Hack to prevent Babel from modifying the object returned\n    // as the firebase namespace.\n    // @ts-ignore\n    __esModule: true,\n    initializeApp: initializeAppCompat,\n    // @ts-ignore\n    app,\n    registerVersion: modularAPIs.registerVersion,\n    setLogLevel: modularAPIs.setLogLevel,\n    onLog: modularAPIs.onLog,\n    // @ts-ignore\n    apps: null,\n    SDK_VERSION: modularAPIs.SDK_VERSION,\n    INTERNAL: {\n      registerComponent: registerComponentCompat,\n      removeApp,\n      useAsService,\n      modularAPIs\n    }\n  };\n\n  // Inject a circular default export to allow Babel users who were previously\n  // using:\n  //\n  //   import firebase from 'firebase';\n  //   which becomes: var firebase = require('firebase').default;\n  //\n  // instead of\n  //\n  //   import * as firebase from 'firebase';\n  //   which becomes: var firebase = require('firebase');\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (namespace as any)['default'] = namespace;\n\n  // firebase.apps is a read-only getter.\n  Object.defineProperty(namespace, 'apps', {\n    get: getApps\n  });\n\n  /**\n   * Called by App.delete() - but before any services associated with the App\n   * are deleted.\n   */\n  function removeApp(name: string): void {\n    delete apps[name];\n  }\n\n  /**\n   * Get the App object for a given name (or DEFAULT).\n   */\n  function app(name?: string): FirebaseApp {\n    name = name || modularAPIs._DEFAULT_ENTRY_NAME;\n    if (!contains(apps, name)) {\n      throw ERROR_FACTORY.create(AppError.NO_APP, { appName: name });\n    }\n    return apps[name];\n  }\n\n  // @ts-ignore\n  app['App'] = firebaseAppImpl;\n\n  /**\n   * Create a new App instance (name must be unique).\n   */\n  function initializeAppCompat(\n    options: FirebaseOptions,\n    rawConfig = {}\n  ): FirebaseApp {\n    const app = modularAPIs.initializeApp(\n      options,\n      rawConfig\n    ) as _FirebaseAppInternal;\n    const appCompat = new firebaseAppImpl(app, namespace as _FirebaseNamespace);\n    apps[app.name] = appCompat;\n    return appCompat;\n  }\n\n  /*\n   * Return an array of all the non-deleted FirebaseApps.\n   */\n  function getApps(): FirebaseApp[] {\n    // Make a copy so caller cannot mutate the apps list.\n    return Object.keys(apps).map(name => apps[name]);\n  }\n\n  function registerComponentCompat(\n    component: Component\n  ): FirebaseServiceNamespace<FirebaseService> | null {\n    const componentName = component.name;\n    if (\n      modularAPIs._registerComponent(component) &&\n      component.type === ComponentType.PUBLIC\n    ) {\n      // create service namespace for public components\n      // The Service namespace is an accessor function ...\n      const serviceNamespace = (\n        appArg: FirebaseApp = app()\n      ): FirebaseService => {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if (typeof (appArg as any)[componentName] !== 'function') {\n          // Invalid argument.\n          // This happens in the following case: firebase.storage('gs:/')\n          throw ERROR_FACTORY.create(AppError.INVALID_APP_ARGUMENT, {\n            appName: componentName\n          });\n        }\n\n        // Forward service instance lookup to the FirebaseApp.\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return (appArg as any)[componentName]();\n      };\n\n      // ... and a container for service-level properties.\n      if (component.serviceProps !== undefined) {\n        deepExtend(serviceNamespace, component.serviceProps);\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (namespace as any)[componentName] = serviceNamespace;\n\n      // Patch the FirebaseAppImpl prototype\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (firebaseAppImpl.prototype as any)[componentName] =\n        // TODO: The eslint disable can be removed and the 'ignoreRestArgs'\n        // option added to the no-explicit-any rule when ESlint releases it.\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        function (...args: any) {\n          const serviceFxn = this._getService.bind(this, componentName);\n          return serviceFxn.apply(\n            this,\n            component.multipleInstances ? args : []\n          );\n        };\n    }\n\n    return component.type === ComponentType.PUBLIC\n      ? // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (namespace as any)[componentName]\n      : null;\n  }\n\n  // Map the requested service to a registered service name\n  // (used to map auth to serverAuth service when needed).\n  function useAsService(app: FirebaseApp, name: string): string | null {\n    if (name === 'serverAuth') {\n      return null;\n    }\n\n    const useService = name;\n\n    return useService;\n  }\n\n  return namespace;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function contains<T extends object>(obj: T, key: string): boolean {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nexport function safeGet<T extends object, K extends keyof T>(\n  obj: T,\n  key: K\n): T[K] | undefined {\n  if (Object.prototype.hasOwnProperty.call(obj, key)) {\n    return obj[key];\n  } else {\n    return undefined;\n  }\n}\n\nexport function isEmpty(obj: object): obj is {} {\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function map<K extends string, V, U>(\n  obj: { [key in K]: V },\n  fn: (value: V, key: K, obj: { [key in K]: V }) => U,\n  contextObj?: unknown\n): { [key in K]: U } {\n  const res: Partial<{ [key in K]: U }> = {};\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      res[key] = fn.call(contextObj, obj[key], key, obj);\n    }\n  }\n  return res as { [key in K]: U };\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createFirebaseNamespaceLite } from './lite/firebaseNamespaceLite';\nimport { registerCoreComponents } from './registerCoreComponents';\n\nexport const firebase = createFirebaseNamespaceLite();\n\nregisterCoreComponents('lite');\n\n// eslint-disable-next-line import/no-default-export\nexport default firebase;\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseNamespace } from '@firebase/app-types';\nimport {\n  _FirebaseNamespace,\n  FirebaseServiceNamespace,\n  FirebaseService\n} from '@firebase/app-types/private';\nimport { FirebaseAppLiteImpl } from './firebaseAppLite';\nimport { createFirebaseNamespaceCore } from '../firebaseNamespaceCore';\nimport { Component, ComponentType } from '@firebase/component';\n\nexport function createFirebaseNamespaceLite(): FirebaseNamespace {\n  const namespace = createFirebaseNamespaceCore(FirebaseAppLiteImpl);\n\n  namespace.SDK_VERSION = `${namespace.SDK_VERSION}_LITE`;\n\n  const registerComponent = (namespace as _FirebaseNamespace).INTERNAL\n    .registerComponent;\n  (namespace as _FirebaseNamespace).INTERNAL.registerComponent = registerComponentForLite;\n\n  /**\n   * This is a special implementation, so it only works with performance.\n   * only allow performance SDK to register.\n   */\n  function registerComponentForLite(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    component: Component<any>\n  ): FirebaseServiceNamespace<FirebaseService> | null {\n    // only allow performance to register with firebase lite\n    if (\n      component.type === ComponentType.PUBLIC &&\n      component.name !== 'performance' &&\n      component.name !== 'installations'\n    ) {\n      throw Error(`${name} cannot register with the standalone perf instance`);\n    }\n\n    return registerComponent(component);\n  }\n\n  return namespace;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { registerVersion } from '@firebase/app-exp';\n\nimport { name, version } from '../package.json';\n\nexport function registerCoreComponents(variant?: string): void {\n  // Register `app` package.\n  registerVersion(name, version, variant);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase from '@firebase/app-compat';\nimport { name, version } from '../../package.json';\n\nfirebase.registerVersion(name, version, 'app-compat');\n\nexport default firebase;\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase from './app';\n// import './performance';\nimport { name, version } from '../package.json';\n\nfirebase.registerVersion(name, version, 'compat-lite');\n\nexport default firebase;\n"],"names":["deepExtend","target","source","Object","constructor","Date","getTime","undefined","Array","prop","hasOwnProperty","Deferred","[object Object]","this","promise","Promise","resolve","reject","callback","error","value","catch","length","FirebaseError","Error","code","message","customData","super","setPrototypeOf","prototype","captureStackTrace","ErrorFactory","create","service","serviceName","errors","data","fullCode","template","replace","PATTERN","_","key","String","replaceTemplate","fullMessage","Component","name","instanceFactory","type","mode","instantiationMode","multipleInstances","props","serviceProps","DEFAULT_ENTRY_NAME","Provider","container","Map","identifier","normalizedIdentifier","normalizeInstanceIdentifier","instancesDeferred","has","deferred","set","instance","getOrInitializeService","e","get","options","optional","component","isComponentEager","instanceIdentifier","instanceDeferred","entries","delete","instances","services","from","values","all","filter","map","INTERNAL","_delete","normalizeIdentifierForFactory","ComponentContainer","provider","getProvider","isComponentSet","setComponent","providers","addComponent","LogLevel","levelStringToEnum","debug","DEBUG","verbose","VERBOSE","info","INFO","warn","WARN","ERROR","silent","SILENT","defaultLogLevel","ConsoleMethod","defaultLogHandler","logType","args","logLevel","now","toISOString","method","console","PlatformLoggerService","getProviders","getComponent","isVersionServiceProvider","getImmediate","library","version","logString","join","logger","push","_logLevel","val","TypeError","logHandler","_logHandler","userLogHandler","_userLogHandler","PLATFORM_LOG_STRING","appName","@firebase/app-compat","@firebase/analytics","@firebase/auth","@firebase/database","@firebase/functions-exp","@firebase/functions-compat","@firebase/installations","@firebase/messaging","@firebase/performance","@firebase/remote-config","@firebase/storage","@firebase/firestore","fire-js","firebase-exp","_apps","_components","_addComponent","app","_registerComponent","componentName","_getProvider","ERROR_FACTORY","no-app","bad-app-name","duplicate-app","app-deleted","invalid-app-argument","invalid-log-argument","FirebaseAppImpl","config","options_","name_","automaticDataCollectionEnabled_","automaticDataCollectionEnabled","checkDestroyed","isDeleted","SDK_VERSION","initializeApp","rawConfig","newApp","async","deleteApp","registerVersion","libraryKeyOrName","variant","libraryMismatch","match","versionMismatch","warning","onLog","logCallback","customLogLevel","level","arg","toString","JSON","stringify","ignored","toLowerCase","setUserLogHandler","setLogLevel","forEach","inst","addOrOverwriteComponent","clear","clearInstance","FirebaseAppLiteImpl","firebase","removeApp","_DEFAULT_ENTRY_NAME","createFirebaseNamespaceCore","firebaseAppImpl","apps","namespace","__esModule","modularAPIs.initializeApp","appCompat","modularAPIs.registerVersion","modularAPIs.setLogLevel","modularAPIs.onLog","modularAPIs.SDK_VERSION","registerComponent","modularAPIs._registerComponent","serviceNamespace","appArg","_getService","bind","apply","useAsService","modularAPIs","obj","modularAPIs._DEFAULT_ENTRY_NAME","call","defineProperty","keys","createFirebaseNamespaceLite"],"mappings":"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"}