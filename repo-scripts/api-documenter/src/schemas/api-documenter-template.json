/**
 * Config file for API Documenter.  For more info, please visit: https://api-extractor.com
 */
{
  "$schema": "https://developer.microsoft.com/json-schemas/api-extractor/v7/api-documenter.schema.json",

  /**
   * Specifies the output target.
   * Supported values are "docfx" or "markdown"
   */
  // "outputTarget": "markdown",

  /**
   * Specifies what type of newlines API Documenter should use when writing output files.  By default, the output files
   * will be written with Windows-style newlines.  To use POSIX-style newlines, specify "lf" instead.
   * To use the OS's default newline kind, specify "os".
   *
   * DEFAULT VALUE: "crlf"
   */
  // "newlineKind": "crlf",

  /**
   * This enables an experimental feature that will be officially released with the next major version
   * of API Documenter.  It requires DocFX 2.46 or newer.  It enables documentation for namespaces and
   * adds them to the table of contents.  This will also affect file layout as namespaced items will be nested
   * under a directory for the namespace instead of just within the package.
   *
   * This setting currently only affects the 'docfx' output target.  It is equivalent to the `--new-docfx-namespaces`
   * command-line parameter.
   */
  // "newDocfxNamespaces": false,

  /**
   * Describes plugin packages to be loaded, and which features to enable.
   */
  "plugins": [
    // {
    //  "packageName": "doc-plugin-example",
    //  "enabledFeatureNames": [ "example-feature" ]
    // }
  ],

  /**
   * Configures how the table of contents is generated.
   */
  "tableOfContents": {
    /**
     * Allows hand-coded items to be injected into the table of contents.
     *
     * DEFAULT VALUE: (none)
     */
    // "items": [
    //   { "name": "Example Node", "href": "~/homepage/homepage.md" },
    //   {
    //     "name": "API Reference",
    //     "items": [
    //       { "name": "References" }
    //     ]
    //   }
    // ],
    /**
     * Optional category name that is recommended to include in the `tocConfig`,
     * along with one of the filters: `filterByApiItemName` or `filterByInlineTag`.
     * Any items that are not matched to the mentioned filters will be placed under this
     * catchAll category. If none provided the items will not be included in the final toc.yml file.
     *
     * DEFAULT VALUE: (none)
     */
    // "catchAllCategory": "References",
    /**
     * When loading more than one api.json files that might include the same API items,
     * toggle either to show duplicates or not.
     *
     * DEFAULT VALUE: false
     */
    // "noDuplicateEntries": true,
    /**
     * Toggle either sorting of the API items should be made based on category name presence
     * in the API item's name.
     *
     * DEFAULT VALUE: false
     */
    // "filterByApiItemName": false,
    /**
     * Filter that can be used to sort the API items according to an inline custom tag
     * that is present on them.
     *
     * DEFAULT VALUE: (none)
     */
    // "filterByInlineTag": "@docCategory"
  }
}
